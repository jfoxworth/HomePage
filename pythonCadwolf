"""

	This code is the main program in the process to solve an equation. The setup of this file is as follows ...

	1. Import the needed files
	2. Declare the standard variables
	3. Set up the Equation class which includes a function to solve an equation


"""

# Import the built in modules
import json
import math
import re
import inspect
from random import randint
import numpy as np
import scipy as scipy
import copy
import math



Functions={	'sin' : 'sin',
			'cos' : 'cos',
			'tan' : 'tan',
			'asin' : 'arcsin',
			'acos' : 'arccos',
			'atan' : 'arctan',
			'arcsin' : 'arcsin',
			'arccos' : 'arccos',
			'arctan' : 'arctan',
			'atan2' : 'arctan2',
			'sinh' : 'sinh',
			'cosh' : 'cosh',
			'tanh' : 'tanh',
			'asinh' : 'arcsinh',
			'acosh' : 'arccosh',
			'atanh' : 'arctanh',
			'arcsinh' : 'arcsinh',
			'arccosh' : 'arccosh',
			'arctanh' : 'arctanh',
			'sec' : 'secant',
			'secant' : 'secant',
			'csc' : 'cosecant',
			'cosecant' : 'cosecant',
			'cot' : 'cotangent',
			'cotangent' : 'cotangent',
			'asec' : 'asec',
			'acsc' : 'acsc',
			'acot' : 'acot',
			'hypot' : 'hypot',
			'degrees' : 'degrees',
			'radians' : 'radians',
			'unwrap' : 'unwrap',
			'deg2rad' : 'deg2rad',
			'rad2deg' : 'rad2deg',
			'around' : 'around',
			'round' : 'around',
			'rint' : 'rint',
			'fix' : 'fix',
			'floor' : 'floor',
			'ceil' : 'ceil',
			'trunc' : 'trunc',
			'prod' : 'prod',
			'sum' : 'sum',
			'nanprod' : 'nanprod',
			'nansum' : 'nansum',
			'cumprod' : 'cumprod',
			'cumsum' : 'cumsum',
			'nancumprod' : 'nancumprod',
			'diff' : 'diff',
			'ediff1d' : 'ediff1d',
			'gradient' : 'gradient',
			'cross' : 'cross',
			'trapz' : 'trapz',
			'exp' : 'exp',
			'expm1' : 'expm1',
			'exp2' : 'exp2',
			'ln' : 'log',
			'log' : 'log',
			'log10' : 'log10',
			'log2' : 'log2',
			'log1p' : 'log1p',
			'logaddexp' : 'logaddexp',
			'logaddexp2' : 'logaddexp2',
			'i0' : 'i0',
			'sinc' : 'sinc',
			'signbit' : 'signbit',
			'copysign' : 'copysign',
			'frexp' : 'frexp',
			'ldexp' : 'ldexp',
			'nextafter' : 'nextafter',
			'spacing' : 'spacing',
			'add' : 'add',
			'reciprocal' : 'reciprocal',
			'negative' : 'negative',
			'multiply' : 'multiply',
			'divide' : 'divide',
			'power' : 'power',
			'subtract' : 'subtract',
			'true_divide' : 'true_divide',
			'floor_divide' : 'floor_divide',
			'float_power' : 'float_power',
			'fmod' : 'fmod',
			'mod' : 'mod',
			'modf' : 'modf',
			'remainder' : 'remainder',
			'divmod' : 'divmod',
			'angle' : 'angle',
			'real' : 'real',
			'imag' : 'imag',
			'Real' : 'real',
			'Imag' : 'imag',
			'conj' : 'conj',
			'convolve' : 'convolve',
			'clip' : 'clip',
			'sqrt' : 'sqrt',
			'cbrt' : 'cbrt',
			'square' : 'square',
			'absolute' : 'absolute',
			'abs' : 'absolute',
			'fabs' : 'fabs',
			'sign' : 'sign',
			'heaviside' : 'heaviside',
			'max' : 'amax',
			'min' : 'amin',
			'maximum' : 'maximum',
			'minimum' : 'minimum',
			'maxu' : 'maxu',
			'minu' : 'minu',
			'fmax' : 'fmax',
			'fmin' : 'fmin',
			'nan_to_num' : 'nan_to_num',
			'real_if_close' : 'real_if_close',
			'interp' : 'interp',
			'eye' : 'eye',
			'identity' : 'identity',
			'ones' : 'ones',
			'ones_like' : 'ones_like',
			'zeros' : 'zeros',
			'zeros_like' : 'zeros_like',
			'full' : 'full',
			'full_like' : 'full_like',
			'arange' : 'arange',
			'linspace' : 'linspace',
			'logspace' : 'logspace',
			'geomspace' : 'geomspace',
			'meshgrid' : 'meshgrid',
			'mgrid' : 'mgrid',
			'ogrid' : 'ogrid',
			'diag' : 'diag',
			'diagflat' : 'diagflat',
			'tri' : 'tri',
			'tril' : 'tril',
			'triu' : 'triu',
			'vander' : 'vander',			
			'reshape' : 'reshape',
			'ravel' : 'ravel',
			'flat' : 'flat',
			'flatten' : 'flatten',
			'moveaxis' : 'moveaxis',
			'rollaxis' : 'rollaxis',
			'swapaxes' :'swapaxes',
			'transpose' :'Transpose',
			'Transpose' :'Transpose',
			'broadcast_to' : 'broadcast_to',
			'expand_dims' : 'expand_dims',
			'squeeze' : 'squeeze',
			'concatenate' : 'concatenate',
			'stack' : 'stack',
			'column_stack' : 'column_stack',
			'dstack' : 'dstack',
			'hstack' : 'hstack',
			'vstack' : 'vstack',
			'split' : 'split',
			'dsplit' : 'dsplit',
			'hsplit' : 'hsplit',
			'vsplit' : 'vsplit',
			'tile' : 'tile',
			'repeat' : 'repeat',
			'delete' : 'delete',
			'insert' : 'insert',
			'append' : 'append',
			'resize' : 'resize',
			'size': 'size',
			'Size': 'size',
			'trim_zeros' : 'trim_zeros',
			'unique' : 'unique',
			'flip' : 'flip',
			'fliplr' : 'fliplr',
			'flipud' : 'flipud',
			'reshape' : 'reshape',
			'roll' : 'roll',
			'rot90' : 'rot90',
			'bitwise_and' : 'bitwise_and',
			'bitwise_or' : 'bitwise_or',
			'bitwise_xor' : 'bitwise_xor',
			'invert' : 'invert',
			'left_shift' : 'left_shift',
			'right_shift' : 'right_shift',
			'packbits' : 'packbits',
			'unpackbits' : 'unpackbits',
			'binary_repr' : 'binary_repr',
			'cholesky' : 'cholesky',
			'det' : 'det',
			'eig' : 'eig',
			'eigh' : 'eigh',
			'eigvals' : 'eigvals',
			'eigvalsh' : 'eigvalsh',
			'inv' : 'inv',
			'lstsq' : 'lstsq',
			'norm' : 'norm',
			'pinv' : 'pinv',
			'solve' : 'solve',
			'svd' : 'svd',
			'fft' : 'fft',
			'fft2' : 'fft2',
			'fftn' : 'fftn',
			'ifft' : 'ifft',
			'ifft2' : 'ifft2',
			'ifftn' : 'ifftn',
			'fv' : 'fv',
			'pv' : 'pv',
			'npv' : 'npv',
			'pmt' : 'pmt',
			'ppmt' : 'ppmt',
			'ipmt' : 'ipmt',
			'irr' : 'irr',
			'mirr' : 'mirr',
			'nper' : 'nper',
			'rate' : 'rate',
			'dot' : 'dot',
			'multi_dot' : 'multi_dot',
			'vdot' : 'vdot',
			'inner' : 'inner',
			'outer' : 'outer',
			'matmul' : 'matmul',
			'tensordot' : 'tensordot',
			'einsum' : 'einsum',
			'matpower' : 'matpower',
			'kron' : 'kron',
			'qr' : 'qr',
			'isPosDef' : 'isPosDef',
			'cond' : 'cond',
			'matrix_rank' : 'matrix_rank',
			'slogdet' : 'slogdet',
			'trace' : 'trace',
			'tensorsolve' : 'tensorsolve',
			'tensorinv' : 'tensorinv',
			'rand' : 'rand',
			'randn' : 'randn',
			'randint' : 'randint',
			'random_integers' : 'random_integers',
			'random_sample' : 'random_sample',
			'random' : 'random',
			'ranf' : 'ranf',
			'sample' : 'sample',
			'choice' : 'choice',
			'bytes' : 'bytes',
			'shuffle' : 'shuffle',
			'permutation' : 'permutation',
			'beta' : 'beta',
			'binomial' : 'binomial',
			'chisquare' : 'chisquare',
			'dirichlet' : 'dirichlet',
			'exponential' : 'exponential',
			'fdist' : 'fdist',
			'gamma' : 'gamma',
			'geometric' : 'geometric',
			'gumbel' : 'gumbel',
			'hypergeometric' : 'hypergeometric',
			'laplace' : 'laplace',
			'logistic' : 'logistic',
			'lognormal' : 'lognormal',
			'logseries' : 'logseries',
			'multinomial' : 'multinomial',
			'multivariate_normal' : 'multivariate_normal',
			'negative_binomial' : 'negative_binomial',
			'noncentral_chisquare' : 'noncentral_chisquare',
			'noncentral_f' : 'noncentral_f',
			'normal' : 'normal',
			'pareto' : 'pareto',
			'poisson' : 'poisson',
			'power' : 'power',
			'rayleigh' : 'rayleigh',
			'standard_cauchy' : 'standard_cauchy',
			'standard_exponential' : 'standard_exponential',
			'standard_gamma' : 'standard_gamma',
			'standard_normal' : 'standard_normal',
			'standard_t' : 'standard_t',
			'triangular' : 'triangular',
			'uniform' : 'uniform',
			'vonmises' : 'vonmises',
			'wald' : 'wald',
			'weibull' : 'weibull',
			'zipf' : 'zipf',
			'amin' : 'amin',
			'amax' : 'amax',
			'nanmin' : 'nanmax',
			'ptp' : 'ptp',
			'percentile' : 'percentile',
			'nanpercentile' : 'nanpercentile',
			'median' : 'median',
			'average' : 'average',
			'mean' : 'mean',
			'std' : 'std',
			'var' : 'var',
			'nanmedian' : 'nanmedian',
			'nanmean' : 'nanmean',
			'nanstd' : 'nanstd',
			'nanvar' : 'nanvar',
			'corrcoef' : 'corrcoef',
			'correlate' : 'correlate',
			'cov' : 'cov',
			'histogram':'histogram',
			'histogram2d':'histogram2d',
			'bincount' : 'bincount',
			'digitize' : 'digitize',
			'sort' : 'sort',
			'lexsort' : 'lexsort',
			'argsort' : 'argsort',
			'msort' : 'msort',
			'sort_complex' : 'sort_complex',
			'partition' : 'partition',
			'argpartition' : 'argpartition',
			'argmax' : 'argmax',
			'nanargmax' : 'nanargmax',
			'argmin' : 'argmin',
			'nanargmin' : 'nanargmin',
			'argwhere' : 'argwhere',
			'nonzero' : 'nonzero',
			'flatnonzero' : 'flatnonzero',
			'where' : 'where',
			'searchsorted' : 'searchsorted',
			'extract' : 'extract',
			'count_nonzero' : 'count_nonzero',
			'polyval' : 'polyval',
			'poly' : 'poly',
			'root' : 'root',
			'polyfit' : 'polyfit',
			'polyder' : 'polyder',
			'polyint' : 'polyint',
			'polyadd' : 'polyadd',
			'polydiv' : 'polydiv',
			'polymul' : 'polymul',
			'polysub' : 'polysub',
			'all' : 'all',
			'any' : 'any',
			'isfinite' : 'isfinite',
			'isinf' : 'isinf',
			'isnan' : 'isnan',
			'isneginf' : 'isneginf',
			'isposinf' : 'isposinf',
			'IfElse' : 'conditional' }















"""
	This is the sin function for CADWOLF. Handles the sin function for numbers and matrices. For complex numbers, 
	the algorithm follows the following: sin(a+bi)=sina * coshb + i(cosa * sinhb)
"""
def sin(thisItem, worksheet, inputText):

	print('In the sin function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sin", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SinEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "sin", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:
			worksheet[solveID].fullMat=np.sin(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="sin \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the cos function for CADWOLF. Handles the sin function for numbers and matrices. For complex numbers, 
	the algorithm follows the following: cos(a+bi)=cosa * coshb + i(sina*sinhb)
"""
def cos(thisItem, worksheet, inputText):

	print('In the cos function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cos", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CosEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "cos", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.cos(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="cos \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the tan function for CADWOLF. Handles the sin function for numbers and matrices. For complex numbers, 
	the algorithm follows the following: tan=sin/cos
"""
def tan(thisItem, worksheet, inputText):

	print('In the tan function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tan", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TanEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "tan", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.tan(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="tan \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the asin function for CADWOLF. 
"""
def arcsin(thisItem, worksheet, inputText):

	print('In the asin function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "asin", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ASinEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "asin", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.arcsin(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="asin \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the acos function for CADWOLF. 
"""
def arccos(thisItem, worksheet, inputText):

	print('In the acos function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "acos", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ACosEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "acos", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0


		if flag==0:

			worksheet[solveID].fullMat=np.arccos(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="acos \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the atan function for CADWOLF. 
"""
def arctan(thisItem, worksheet, inputText):

	print('In the atan function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "atan", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ATanEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "atan", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0


		if flag==0:

			worksheet[solveID].fullMat=np.arctan(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="atan \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the atan2 function for CADWOLF. 
"""
def arctan2(thisItem, worksheet, inputText):

	print('In the atan2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "atan2", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ATan2Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ATan2Eq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "atan2", worksheet[solveID].Units_units)
			flag=1	

		if worksheet[solveID2].Units_units!='' and worksheet[solveID2].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "atan2", worksheet[solveID2].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0


		if flag==0:

			worksheet[solveID].fullMat=np.arctan2(np.real(worksheet[solveID].fullMat), np.real(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="atan2 \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the sinh function for CADWOLF.
"""
def sinh(thisItem, worksheet, inputText):

	print('In the sinh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sinh", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SinhEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "sinh", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0


		if flag==0:

			worksheet[solveID].fullMat=np.sinh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="sinh \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the cosh function for CADWOLF.
"""
def cosh(thisItem, worksheet, inputText):

	print('In the cosh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cosh", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CoshEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "cosh", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0


		if flag==0:

			worksheet[solveID].fullMat=np.cosh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="cosh \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the tanh function for CADWOLF.
"""
def tanh(thisItem, worksheet, inputText):

	print('In the tanh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tanh", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TanhEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "tanh", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.tanh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="tanh \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the arcsinh function for CADWOLF.
"""
def arcsinh(thisItem, worksheet, inputText):

	print('In the arcsinh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "arcsinh", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ArcSinhEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "arcsinh", worksheet[solveID].Units_units)
			flag=1	


		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.arcsinh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="arcsinh \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID







"""
	This is the arccosh function for CADWOLF.
"""
def arccosh(thisItem, worksheet, inputText):

	print('In the arccosh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "arccosh", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ArcCoshEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "arccosh", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0


		if flag==0:

			worksheet[solveID].fullMat=np.arccosh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="arccosh \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the arccosh function for CADWOLF.
"""
def arctanh(thisItem, worksheet, inputText):

	print('In the arctanh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "arctanh", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ArcTanhEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "arctanh", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0


		if flag==0:

			worksheet[solveID].fullMat=np.arctanh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="arctanh \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID









"""
	This is the secant function for CADWOLF.
"""
def secant(thisItem, worksheet, inputText):

	print('In the secant function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "secant", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SecantEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "secant", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.divide(1,np.cos(worksheet[solveID].fullMat))
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="secant \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID







"""
	This is the cosecant function for CADWOLF.
"""
def cosecant(thisItem, worksheet, inputText):

	print('In the secant function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "secant", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CoSecantEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "cosecant", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.divide(1,np.sin(worksheet[solveID].fullMat))
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="cosecant \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID










"""
	This is the cotangent function for CADWOLF.
"""
def cotangent(thisItem, worksheet, inputText):

	print('In the cotangent function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cotangent", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CoTangentEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if worksheet[solveID].Units_units!='' and worksheet[solveID].Units_units!='rad':
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Trig2", "cotangent", worksheet[solveID].Units_units)
			flag=1	

		# Set the units and base array to null
		worksheet[solveID].Units_units=''
		for index, item in enumerate(worksheet[solveID].Units_base_array):worksheet[solveID].Units_base_array[item]=0

		if flag==0:

			worksheet[solveID].fullMat=np.divide(1,np.tan(worksheet[solveID].fullMat))
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_showequation="cotangent \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID






"""
	This is the hypot function for CADWOLF. 
"""
def hypot(thisItem, worksheet, inputText):

	print('In the hypot function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "hypot", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HypotEq="+inputArray[0]	}
		solveID1=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HypotEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.hypot(worksheet[solveID1].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="hypot \\left("+worksheet[solveID1].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID1].fullMat)

		return solveID1







"""
	This is the degrees function for CADWOLF. 
"""
def degrees(thisItem, worksheet, inputText):

	print('In the degrees function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "degrees", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DegreesEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.degrees(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="degrees \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID1].fullMat)

		return solveID







"""
	This is the radians function for CADWOLF. 
"""
def radians(thisItem, worksheet, inputText):

	print('In the radians function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "radians", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RadiansEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.radians(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="radians \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID1].fullMat)

		return solveID		







"""
	This is the unwrap function for CADWOLF. 
"""
def unwrap(thisItem, worksheet, inputText):

	print('In the unwrap function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "unwrap", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"UnwrapEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.unwrap(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="unwrap \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"UnwrapEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

			worksheet[solveID].fullMat=np.unwrap(worksheet[solveID].fullMat, worksheet[solveID2].fullMat[[0,0]])
			worksheet[solveID].Format_showequation="unwrap \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID		






"""
	This is the around function for CADWOLF.
"""
def around(thisItem, worksheet, inputText):

	print('In the around function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "around", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AroundEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.around(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="around \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:

			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AroundEq2="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

			worksheet[solveID].fullMat=np.around(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="round \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the rint function for CADWOLF.
"""
def rint(thisItem, worksheet, inputText):

	print('In the rint function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "rint", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RintEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.rint(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="rint \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the fix function for CADWOLF.
"""
def fix(thisItem, worksheet, inputText):

	print('In the fix function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fix", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FixEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.fix(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="fix \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the floor function for CADWOLF.
"""
def floor(thisItem, worksheet, inputText):

	print('In the floor function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "floor", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FloorEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		thisReal=np.floor(np.real(worksheet[solveID].fullMat))
		thisImag=np.floor(np.imag(worksheet[solveID].fullMat))
		worksheet[solveID].fullMat=thisItem.combineRealImag(thisItem, thisReal, thisImag)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="floor \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the ceil function for CADWOLF.
"""
def ceil(thisItem, worksheet, inputText):

	print('In the ceil function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ceil", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CeilEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		thisReal=np.ceil(np.real(worksheet[solveID].fullMat))
		thisImag=np.ceil(np.imag(worksheet[solveID].fullMat))
		worksheet[solveID].fullMat=thisItem.combineRealImag(thisItem, thisReal, thisImag)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="ceil \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the trunc function for CADWOLF.
"""
def trunc(thisItem, worksheet, inputText):

	print('In the trunc function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "trunc", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TruncEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.trunc(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_showequation="trunc \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the prod function for CADWOLF.
"""
def prod(thisItem, worksheet, inputText):

	print('In the prod function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "prod", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ProdEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.prod(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="prod \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ProdEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.prod(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="prod \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID].Format_showequation+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the sum function for CADWOLF.
"""
def sum(thisItem, worksheet, inputText):

	print('In the sum function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sum", len(inputArray))

	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SumEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.sum(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="sum \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"SumEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.sum(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="sum \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the cumprod function for CADWOLF.
"""
def cumprod(thisItem, worksheet, inputText):

	print('In the cumprod function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cumprod", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CumProdEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.cumprod(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="cumprod \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CumProdEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.cumprod(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="ceil \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID






"""
	This is the cumsum function for CADWOLF.
"""
def cumsum(thisItem, worksheet, inputText):

	print('In the cumsum function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cumsum", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CumSumEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.cumsum(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="cumsum \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CumSumEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.cumsum(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="cumsum \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID










"""
	This is the diff function for CADWOLF.
"""
def diff(thisItem, worksheet, inputText):

	print('In the diff function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "diff", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CumSumEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.diff(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="diff \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CumSumEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.diff(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="diff \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"



		if len(inputArray)==3:

			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CumSumEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CumSumEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.diff(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat), np.int_(worksheet[solveID3].fullMat))
			worksheet[solveID].Format_showequation="diff \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the ediff1d function for CADWOLF.
"""
def ediff1d(thisItem, worksheet, inputText):

	print('In the ediff1d function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ediff1", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ediff1dEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.ediff1d(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="ediff1d \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ediff1dEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.ediff1d(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="ediff1d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"


		if len(inputArray)==3:

			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ediff1dEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ediff1dEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			worksheet[solveID].fullMat=np.ediff1d(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat), np.int_(worksheet[solveID3].fullMat))
			worksheet[solveID].Format_showequation="ediff1d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the gradient function for CADWOLF.

	This needs to be fixed to allow for the extra inputs like axis
"""
def gradient(thisItem, worksheet, inputText):

	print('In the gradient function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "gradient", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"GradientEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.gradient(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="gradient \\left("+worksheet[solveID].Format_showequation+"\\right)"
			worksheet[solveID].Format_showtype="builtin"
			worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID














"""
	This is the cross function for CADWOLF.

	This needs to be fixed to allow for the extra inputs like axis
"""
def cross(thisItem, worksheet, inputText):

	print('In the cross function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cross", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"GradientEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CrossEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CrossEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CrossEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CrossEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CrossEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.cross(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="cross \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.cross(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="cross \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.cross(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="cross \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.cross(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="cross \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"


		if len(inputArray)==6:
			worksheet[solveID].fullMat=np.cross(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat, worksheet[solveID6].fullMat)
			worksheet[solveID].Format_showequation="cross \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID




"""
	This is the trapz function for CADWOLF.
"""
def trapz(thisItem, worksheet, inputText):

	print('In the trapz function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "trapz", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TrapZEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TrapZEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TrapZEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CrossEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.trapz(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="trapz \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.trapz(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="trapz \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.trapz(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="trapz \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.trapz(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="trapz \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the exp function for CADWOLF.
"""
def exp(thisItem, worksheet, inputText):

	print('In the exp function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "exp", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ExpEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.exp(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="exp \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID










"""
	This is the expm1 function for CADWOLF.
"""
def expm1(thisItem, worksheet, inputText):

	print('In the expm1 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "expm1", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ExpM1Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.expm1(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="expm1 \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the exp2 function for CADWOLF.
"""
def exp2(thisItem, worksheet, inputText):

	print('In the exp2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "exp2", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Exp2Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.exp2(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="exp2 \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the log function for CADWOLF. If a user enters one number, then a natural log is calculated. If a second
	number is entered, the math calculates the base with that number using the rule log_b(x) = log_c(x) / log_c(b)
"""
def log(thisItem, worksheet, inputText):

	print('In the log function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "log", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LogEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.log(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="ln \\left("+worksheet[solveID].Format_showequation+"\\right)"

		elif len(inputArray)==2:
			worksheet[solveID].fullMat=np.divide(np.log(worksheet[solveID].fullMat),np.log(worksheet[solveID2].fullMat[[0][0]]))
			worksheet[solveID].Format_showequation="log \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the log10 function for CADWOLF.
"""
def log10(thisItem, worksheet, inputText):

	print('In the log10 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "log10", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Log10Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.log10(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="log10 \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the log2 function for CADWOLF.
"""
def log2(thisItem, worksheet, inputText):

	print('In the log2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "log2", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Log2Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.log2(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="log2 \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the log1p function for CADWOLF.
"""
def log1p(thisItem, worksheet, inputText):

	print('In the log1p function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "log1p", len(inputArray))


	if flag==0:
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Log1pEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.log1p(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="log1p \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the logaddexp function for CADWOLF.
"""
def logaddexp(thisItem, worksheet, inputText):

	print('In the logaddexp function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "logaddexp", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogAddExpEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogAddExpEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.logaddexp(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="logaddexp \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the logaddexp2 function for CADWOLF.
"""
def logaddexp2(thisItem, worksheet, inputText):

	print('In the logaddexp2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "logaddexp2", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogAddExp2Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogAddExp2Eq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.logaddexp2(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="logaddexp2 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the i0 function for CADWOLF.
"""
def i0(thisItem, worksheet, inputText):

	print('In the i0 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "i0", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"i0Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.i0(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="i0 \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the sinc function for CADWOLF.
"""
def sinc(thisItem, worksheet, inputText):

	print('In the sinc function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sinc", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SincEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.sinc(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="sinc \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the signbit function for CADWOLF.
"""
def signbit(thisItem, worksheet, inputText):

	print('In the signbit function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "signbit", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SignBitEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.signbit(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="signbit \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the copysign function for CADWOLF.
"""
def copysign(thisItem, worksheet, inputText):

	print('In the copysign function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "copysign", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CopySignEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CopySignEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.copysign(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="copysign \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the frexp function for CADWOLF.


	This normally has two outputs. I need to likely fix the code to be two functions that each return a separate item
"""
def frexp(thisItem, worksheet, inputText):

	print('In the frexp function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "frexp", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FrexpEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.frexp(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="frexp \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the ldexp function for CADWOLF.
"""
def ldexp(thisItem, worksheet, inputText):

	print('In the ldexp function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ldexp", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ldexpEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ldexpEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.ldexp(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
		worksheet[solveID].Format_showequation="ldexp \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the nextafter function for CADWOLF.
"""
def nextafter(thisItem, worksheet, inputText):

	print('In the nextafter function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nextafter", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NextAfterEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NextAfterEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.nextafter(worksheet[solveID].fullMat, np.int_(worksheet[solveID2].fullMat))
		worksheet[solveID].Format_showequation="nextafter \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the spacing function for CADWOLF.
"""
def spacing(thisItem, worksheet, inputText):

	print('In the spacing function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "spacing", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"spacingEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.spacing(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="spacing \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID







"""
	This is the add function for CADWOLF.
"""
def add(thisItem, worksheet, inputText):

	print('In the add function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "add", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AddEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AddEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.add(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="add \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the reciprocal function for CADWOLF.
"""
def reciprocal(thisItem, worksheet, inputText):

	print('In the reciprocal function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "reciprocal", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ReciprocalEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.reciprocal(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="reciprocal \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the negative function for CADWOLF.
"""
def negative(thisItem, worksheet, inputText):

	print('In the negative function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "negative", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NegativeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.negative(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="negative \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the multiply function for CADWOLF.
"""
def multiply(thisItem, worksheet, inputText):

	print('In the multiply function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "multiply", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MultiplyEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MultiplyEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.multiply(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="multiply \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the divide function for CADWOLF.
"""
def divide(thisItem, worksheet, inputText):

	print('In the divide function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "divide", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DivideEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DivideEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.divide(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="divide \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the root function for CADWOLF. The order of inputs is changed.
	Note that the sqrt and cbrt functions cannot handle complex numbers 
"""
def root(thisItem, worksheet, inputText):

	print('In the root function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)

	flag=thisItem.checkInputs(thisItem, worksheet, "root", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RootsEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		exponent=copy.copy(worksheet[solveID].fullMat[[0][0]])

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RootsEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		worksheet[solveID].fullMat = np.divide(1,worksheet[solveID].fullMat)
		worksheet[solveID].fullMat = np.power(worksheet[solveID2].fullMat, worksheet[solveID].fullMat)

		# Adjust the units accordingly
		for unitIndex, unitItem in enumerate(worksheet[solveID].Units_base_array):
			worksheet[solveID].Units_base_array[unitItem]=worksheet[solveID2].Units_base_array[unitItem]/exponent
		for unitIndex, unitItem in enumerate(worksheet[solveID].Units_base_array): 
			worksheet[solveID].Units_base_array[unitItem]=np.asscalar(np.real(worksheet[solveID].Units_base_array[unitItem]))
			print('Unit - '+str(unitItem)+' - '+str(worksheet[solveID].Units_base_array[unitItem]))
			if worksheet[solveID].Units_base_array[unitItem]%1!=0:
				worksheet[solveID].setError(thisItem, worksheet, worksheet[solveID].Original_id, "Power5", unitItem)

		worksheet[solveID].recomposeUnits(worksheet[solveID], worksheet) 
	
		worksheet[solveID].Format_showequation="\\sqrt["+worksheet[solveID].Format_showequation+"]{"+worksheet[solveID2].Format_showequation+"}"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID










"""
	This is the power function for CADWOLF.
"""
def power(thisItem, worksheet, inputText):

	print('In the power function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "power", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PowerEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		worksheet[solveID].showEquation(worksheet[solveID], worksheet) 

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PowerEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		worksheet[solveID2].showEquation(worksheet[solveID2], worksheet) 

		exponent=copy.copy(np.float(np.real(worksheet[solveID].fullMat[[0][0]])))
		worksheet[solveID].fullMat=np.power(worksheet[solveID2].fullMat, worksheet[solveID].fullMat)
		worksheet[solveID].Format_showtype="builtin"; 
		worksheet[solveID].Format_showequation="\\left("+worksheet[solveID2].Format_showequation+"\\right)^{"+worksheet[solveID].Format_showequation+"}";
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		# Adjust the units accordingly
		for unitIndex, unitItem in enumerate(worksheet[solveID].Units_base_array):
			worksheet[solveID].Units_base_array[unitItem]=worksheet[solveID2].Units_base_array[unitItem]*exponent
		for unitIndex, unitItem in enumerate(worksheet[solveID].Units_base_array): 
			if worksheet[solveID].Units_base_array[unitItem]%1!=0:
				worksheet[solveID].setError(worksheet[solveID].Original_id, "Power5", i)

		worksheet[solveID].recomposeUnits(worksheet[solveID], worksheet) 

		return solveID




"""
	This is the power function for CADWOLF.
"""
def power2(thisItem, worksheet, inputText):

	print('In the power2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "power", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PowerEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PowerEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.power(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="power \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.power(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="power \\left("+worksheet[solveID].Format_showequation+", "+inputTuple+"\\right)"

		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		return solveID








"""
	This is the subtract function for CADWOLF.
"""
def subtract(thisItem, worksheet, inputText):

	print('In the subtract function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "subtract", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SubtractEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SubtractEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.subtract(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="subtract \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the true_divide function for CADWOLF.
"""
def true_divide(thisItem, worksheet, inputText):

	print('In the true_divide function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "true_divide", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TrueDivideEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TrueDivideEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.true_divide(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="true_divide \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the floor_divide function for CADWOLF.
"""
def floor_divide(thisItem, worksheet, inputText):

	print('In the floor_divide function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "floor_divide", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FloorDivideEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FloorDivideEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.floor_divide(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="floor_divide \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID










"""
	This is the float_power function for CADWOLF.
"""
def float_power(thisItem, worksheet, inputText):

	print('In the float_power function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "float_power", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FloatPowerEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FloatPowerEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.float_power(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="float power \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the fmod function for CADWOLF.
"""
def fmod(thisItem, worksheet, inputText):

	print('In the fmod function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fmod", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FModEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FModEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.fmod(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="fmod \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the mod function for CADWOLF.
"""
def mod(thisItem, worksheet, inputText):

	print('In the mod function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "mod", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ModEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ModEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.mod(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="mod \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID












"""
	This is the modf function for CADWOLF.
"""
def modf(thisItem, worksheet, inputText):

	print('In the modf function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "log1p", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ModFEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ModFEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.modf(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="modf \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the remainder function for CADWOLF.
"""
def remainder(thisItem, worksheet, inputText):

	print('In the remainder function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "remainder", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RemainderEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RemainderEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.remainder(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="remainder \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the angle function for CADWOLF.
"""
def angle(thisItem, worksheet, inputText):

	print('In the angle function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "angle", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RemainderEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.angle(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="angle \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the real function for CADWOLF.
"""
def real(thisItem, worksheet, inputText):

	print('In the real function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "real", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RealEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.real(worksheet[solveID].fullMat)
		print('The real is ')
		print(str(worksheet[solveID].fullMat))
		worksheet[solveID].Format_showequation="real \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the imag function for CADWOLF.
"""
def imag(thisItem, worksheet, inputText):

	print('In the imag function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "imag", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ImagEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.imag(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="imag \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID











"""
	This is the conj function for CADWOLF.
"""
def conj(thisItem, worksheet, inputText):

	print('In the conj function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "conj", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ConjEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.conj(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="conj \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the convolve function for CADWOLF.
"""
def convolve(thisItem, worksheet, inputText):

	print('In the convolve function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "convolve", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ConvolveEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ConvolveEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.convolve(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="convolve \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the clip function for CADWOLF.
"""
def clip(thisItem, worksheet, inputText):

	print('In the clip function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "clip", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ClipEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ClipEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ClipEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.clip(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
		worksheet[solveID].Format_showequation="clip \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the sqrt function for CADWOLF.
"""
def sqrt(thisItem, worksheet, inputText):

	print('In the sqrt function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sqrt", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SqrtEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.sqrt(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="sqrt \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the cbrt function for CADWOLF.
"""
def cbrt(thisItem, worksheet, inputText):

	print('In the cbrt function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cbrt", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CbEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.cbrt(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="cbrt \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID











"""
	This is the square function for CADWOLF.
"""
def square(thisItem, worksheet, inputText):

	print('In the square function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "square", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SquareEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.square(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="square \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the absolute function for CADWOLF.
"""
def absolute(thisItem, worksheet, inputText):

	print('In the absolute function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "absolute", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AbsoluteEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		print('The units are '+str(worksheet[solveID].Units_units))
		worksheet[solveID].fullMat=np.absolute(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="\\vert"+worksheet[solveID].Format_showequation+"\\vert"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the fabs function for CADWOLF.
"""
def fabs(thisItem, worksheet, inputText):

	print('In the fabs function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fabs", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FabsEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.fabs(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="fabs \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the sign function for CADWOLF.
"""
def sign(thisItem, worksheet, inputText):

	print('In the sign function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sign", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SignEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.sign(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="sign \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID










"""
	This is the heaviside step function for CADWOLF.
"""
def heaviside(thisItem, worksheet, inputText):

	print('In the heaviside function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "heaviside", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HeavisideEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HeavisideEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.heaviside(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="heaviside \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the maximum step function for CADWOLF.
"""
def maximum(thisItem, worksheet, inputText):

	print('In the maximum function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "maximum", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MaximumEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MaximumEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.maximum(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="maximum \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the minimum step function for CADWOLF.
"""
def minimum(thisItem, worksheet, inputText):

	print('In the minimum function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "minimum", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MinimumEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MinimumEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.minimum(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="minimum \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the nan_to_num function for CADWOLF.
"""
def nan_to_num(thisItem, worksheet, inputText):

	print('In the nan_to_num function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nan_to_num", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NanToNumEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.nan_to_num(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="nan_to_num \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the real_if_close function for CADWOLF.
"""
def real_if_close(thisItem, worksheet, inputText):

	print('In the real_if_close function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "real_if_close", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RealIfCloseEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.real_if_close(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="real_if_close \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the interp step function for CADWOLF.
"""
def interp(thisItem, worksheet, inputText):

	print('In the interp function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "interp", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InterpEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InterpEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InterpEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.interp(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
		worksheet[solveID].Format_showequation="interp \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the eye function for CADWOLF.
"""
def eye(thisItem, worksheet, inputText):

	print('In the eye function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "eye", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"EyeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"EyeEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"EyeEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.eye(np.int_(np.asscalar(np.real(worksheet[solveID].fullMat))))
			worksheet[solveID].Format_showequation="interp \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.eye(np.int_(np.asscalar(np.real(worksheet[solveID].fullMat))), worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="interp \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.eye(np.int_(np.asscalar(np.real(worksheet[solveID].fullMat))), worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="interp \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the identity function for CADWOLF.
"""
def identity(thisItem, worksheet, inputText):

	print('In the identity function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "identity", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IdentityEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		
		worksheet[solveID].fullMat=np.identity(np.int_(np.asscalar(np.real(worksheet[solveID].fullMat[[0][0]]))))
		worksheet[solveID].Format_showequation="identity \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the ones function for CADWOLF.
"""
def ones(thisItem, worksheet, inputText):

	print('In the ones function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ones", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"OnesEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		
		worksheet[solveID].fullMat=np.ones(np.int_(np.real(worksheet[solveID].fullMat[[0][0]])))
		worksheet[solveID].Format_showequation="ones \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID









"""
	This is the ones_like function for CADWOLF.
"""
def ones_like(thisItem, worksheet, inputText):

	print('In the ones_like function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ones_like", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"OnesLikeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		
		worksheet[solveID].fullMat=np.ones_like(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="ones_like \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID









"""
	This is the zeros function for CADWOLF.
"""
def zeros(thisItem, worksheet, inputText):

	print('In the zeros function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "zeros", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ZerosEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		
		worksheet[solveID].fullMat=np.zeros(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="zeros \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID










"""
	This is the zeros_like function for CADWOLF.
"""
def zeros_like(thisItem, worksheet, inputText):

	print('In the zeros_like function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "zeros_like", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ZerosLikeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		
		worksheet[solveID].fullMat=np.zeros_like(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="zeros_like \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the fill function for CADWOLF.
"""
def fill(thisItem, worksheet, inputText):

	print('In the fill function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fill", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FillEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FillEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		
		worksheet[solveID].fullMat=np.fill(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="fill \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID






"""
	This is the fill_like function for CADWOLF.
"""
def fill_like(thisItem, worksheet, inputText):

	print('In the fill_like function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fill_like", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FillLikeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FillLikeEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		
		worksheet[solveID].fullMat=np.fill_like(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="fill_like \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID






"""
	This is the arange function for CADWOLF.
"""
def arange(thisItem, worksheet, inputText):

	print('In the arange function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "arange", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ArangeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ARangeEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ARangeEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.arange(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="fill_like \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.arange(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="fill_like \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the linspace function for CADWOLF.
"""
def linspace(thisItem, worksheet, inputText):

	print('In the linspace function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "linspace", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LinspaceEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LinspaceEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LinspaceEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.linspace(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="fill_like \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.linspace(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="fill_like \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the logspace function for CADWOLF.
"""
def logspace(thisItem, worksheet, inputText):

	print('In the logspace function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "logspace", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogspaceEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogspaceEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LogspaceEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.logspace(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="fill_like \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.logspace(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="fill_like \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the geomspace function for CADWOLF.
"""
def geomspace(thisItem, worksheet, inputText):

	print('In the geomspace function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "geomspace", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"GeomspaceEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"GeomspaceEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"GeomspaceEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"GeomspaceEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.geomspace(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="geomspace \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.geomspace(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="geomspace \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.geomspace(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="geomspace \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the meshgrid function for CADWOLF.
"""
def meshgrid(thisItem, worksheet, inputText):

	print('In the meshgrid function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "meshgrid", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MeshgridEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MeshGridEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		[x, y]=np.meshgrid(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		if inputArray[2]==2 or inputArray[2]=="2":
			worksheet[solveID].fullMat=x
		else:
			worksheet[solveID].fullMat=y

		worksheet[solveID].Format_showequation="meshgrid \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+inputArray[2]+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID









"""
	This is the diag function for CADWOLF.
"""
def diag(thisItem, worksheet, inputText):

	print('In the diag function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "diag", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DiagEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"DiagEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.diag(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="diag \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.diag(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="diag \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the diagflat function for CADWOLF.
"""
def diagflat(thisItem, worksheet, inputText):

	print('In the diagflat function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "diagflat", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DiagFlatEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"DiagFlatEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.diagflat(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="diagflat \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.diagflat(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="diagflat \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the tri function for CADWOLF.
"""
def tri(thisItem, worksheet, inputText):

	print('In the tri function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tri", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TriEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TriEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TriEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.tri(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="tri \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.tri(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="tri \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.tri(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="tri \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the tril function for CADWOLF.
"""
def tril(thisItem, worksheet, inputText):

	print('In the tril function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tril", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TriLEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TriLEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.tril(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="tril \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.tril(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="tril \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the triu function for CADWOLF.
"""
def triu(thisItem, worksheet, inputText):

	print('In the triu function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "triu", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TriUEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TriUEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.triu(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="triu \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.triu(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="triu \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the vander function for CADWOLF.
"""
def vander(thisItem, worksheet, inputText):

	print('In the vander function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "vander", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VanderEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"VanderEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"VanderEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.vander(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="vander \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.vander(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="vander \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if worksheet[solveID3].fullMat[0,0]==1:
				worksheet[solveID].fullMat=np.vander(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, True)
				worksheet[solveID].Format_showequation="vander \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

			if worksheet[solveID3].fullMat[0,0]==0:
				worksheet[solveID].fullMat=np.vander(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, False)
				worksheet[solveID].Format_showequation="vander \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID










"""
	This is the reshape function for CADWOLF.
"""
def reshape(thisItem, worksheet, inputText):

	print('In the reshape function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "reshape", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ReshapeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ReshapeEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.reshape(worksheet[solveID].fullMat, np.ravel(np.int_(np.real(worksheet[solveID2].fullMat))))
		worksheet[solveID].Format_showequation="reshape \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the ravel function for CADWOLF.
"""
def ravel(thisItem, worksheet, inputText):

	print('In the ravel function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ravel", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RavelEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.ravel(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="ravel \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the rollaxis function for CADWOLF.
"""
def rollaxis(thisItem, worksheet, inputText):

	print('In the rollaxis function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "rollaxis", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RollAxisEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RollAxisEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RollAxisEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.rollaxis(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="rollaxis \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.rollaxis(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="rollaxis \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the swapaxis function for CADWOLF.
"""
def swapaxes(thisItem, worksheet, inputText):

	print('In the swapaxes function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "swapaxes", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SwapAxesEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SwapAxesEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RollAxesEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.swapaxes(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
		worksheet[solveID].Format_showequation="swapaxes \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the transpose function for CADWOLF.
"""
def Transpose(thisItem, worksheet, inputText):

	print('In the transpose function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "transpose", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TransposeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TransposeEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.transpose(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation=worksheet[solveID].Format_showequation+"^T"


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.transpose(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="Transpose \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)^T"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the size function for CADWOLF.
"""
def size(thisItem, worksheet, inputText):

	print('In the size function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "size", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SizeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SizeEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		shapeIndex=np.asscalar(np.real(worksheet[solveID2].fullMat))
		shapeNum=worksheet[solveID].fullMat.shape[np.int_(np.real(shapeIndex))]
		worksheet[solveID].fullMat=np.zeros((1,1))
		worksheet[solveID].fullMat[[0][0]]=shapeNum
		worksheet[solveID].Format_showequation="size \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the broadcast_to function for CADWOLF.
"""
def broadcast_to(thisItem, worksheet, inputText):

	print('In the broadcast_to function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "broadcast_to", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BroadcastToEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TransposeEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.broadcast_to(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="broadcast to \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID









"""
	This is the expand_dims function for CADWOLF.
"""
def expand_dims(thisItem, worksheet, inputText):

	print('In the expand_dims function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "expand_dims", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ExpandDimsEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ExpandDimsEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.expand_dims(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="expand dims \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID








"""
	This is the squeeze function for CADWOLF.
"""
def squeeze(thisItem, worksheet, inputText):

	print('In the squeeze function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "squeeze", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SqueezeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"SqueezeEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.squeeze(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="squeeze \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.squeeze(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="squeeze \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the concatenate function for CADWOLF.
"""
def concatenate(thisItem, worksheet, inputText):

	print('In the concatenate function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "concatenate", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ConcatenateEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ConcatenateEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.concatenate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="concatenate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the stack function for CADWOLF.
"""
def stack(thisItem, worksheet, inputText):

	print('In the stack function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "stack", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"StackEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"StackEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"StackEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.stack(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="stack \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"


		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.stack(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="stack \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the column_stack function for CADWOLF.
"""
def column_stack(thisItem, worksheet, inputText):

	print('In the column_stack function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "column_stack", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ColumnStackEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ColumnStackEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.column_stack((worksheet[solveID].fullMat, worksheet[solveID2].fullMat))
		worksheet[solveID].Format_showequation="column stack \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the dstack function for CADWOLF.
"""
def dstack(thisItem, worksheet, inputText):

	print('In the dstack function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "dstack", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DStackEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DStackEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.dstack((worksheet[solveID].fullMat, worksheet[solveID2].fullMat))
		worksheet[solveID].Format_showequation="dstack \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the hstack function for CADWOLF.
"""
def hstack(thisItem, worksheet, inputText):

	print('In the hstack function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "hstack", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HStackEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HStackEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.hstack((worksheet[solveID].fullMat, worksheet[solveID2].fullMat))
		worksheet[solveID].Format_showequation="hstack \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the vstack function for CADWOLF.
"""
def vstack(thisItem, worksheet, inputText):

	print('In the vstack function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "vstack", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VStackEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VStackEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.vstack((worksheet[solveID].fullMat, worksheet[solveID2].fullMat))
		worksheet[solveID].Format_showequation="vstack \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the dsplit function for CADWOLF.
"""
def dsplit(thisItem, worksheet, inputText):

	print('In the dsplit function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "dsplit", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DSplitEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DSplitEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DSplitEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		tempReal=np.dsplit((worksheet[solveID].fullMat, worksheet[solveID2].fullMat))
		worksheet[solveID].fullMat=tempReal[worksheet[solveID3].fullMat[0,0]]
		worksheet[solveID].Format_showequation="dsplit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the hsplit function for CADWOLF.
"""
def hsplit(thisItem, worksheet, inputText):

	print('In the hsplit function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "hsplit", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HSplitEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HSplitEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HSplitEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		tempReal=np.hsplit((worksheet[solveID].fullMat, worksheet[solveID2].fullMat))
		worksheet[solveID].fullMat=tempReal[worksheet[solveID3].fullMat[0,0]]
		worksheet[solveID].Format_showequation="hsplit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the vsplit function for CADWOLF.
"""
def vsplit(thisItem, worksheet, inputText):

	print('In the vsplit function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "vsplit", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VSplitEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VSplitEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VSplitEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		tempReal=np.vsplit((worksheet[solveID].fullMat, worksheet[solveID2].fullMat))
		worksheet[solveID].fullMat=tempReal[worksheet[solveID3].fullMat[0,0]]
		worksheet[solveID].Format_showequation="vsplit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID



"""
	This is the tile function for CADWOLF.
"""
def tile(thisItem, worksheet, inputText):

	print('In the tile function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tile", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TileEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TileEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TileEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.repeat(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="repeat \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.repeat(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="repeat \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the delete function for CADWOLF.
"""
def delete(thisItem, worksheet, inputText):

	print('In the delete function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "delete", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DeleteEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DeleteEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"DeleteEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.delete(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="delete \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.delete(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="delete \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the insert function for CADWOLF.
"""
def insert(thisItem, worksheet, inputText):

	print('In the insert function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "insert", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InsertEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InsertEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"InsertEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"InsertEq="+inputArray[3]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.insert(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="diag \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.insert(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="diag \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the append function for CADWOLF.
"""
def append(thisItem, worksheet, inputText):

	print('In the append function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "append", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AppendEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AppendEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AppendEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.append(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="append \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.append(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="append \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the resize function for CADWOLF.
"""
def resize(thisItem, worksheet, inputText):

	print('In the resize function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "resize", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ResizeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ResizeEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.resize(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="resize \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the trim_zeros function for CADWOLF.
"""
def trim_zeros(thisItem, worksheet, inputText):

	print('In the trim_zeros function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "trim_zeros", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TrimZerosEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TrimZerosEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.trim_zeros(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="trim zeros \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.trim_zeros(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="trim zeros \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the unique function for CADWOLF.
"""
def unique(thisItem, worksheet, inputText):

	print('In the unique function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "unique", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"UniqueEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"UniqueEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"UniqueEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"UniqueEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"UniqueEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.unique(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="unique \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.unique(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="unique \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.unique(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="unique \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"


		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.unique(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="unique \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"


		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.unique(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="unique \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the flip function for CADWOLF.
"""
def flip(thisItem, worksheet, inputText):

	print('In the flip function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "flip", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FlipEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FlipEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.flip(worksheet[solveID].fullMat, np.int_(np.asscalar(np.real(worksheet[solveID2].fullMat[[0][0]]))))
		worksheet[solveID].Format_showequation="flip \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the fliplr function for CADWOLF.
"""
def fliplr(thisItem, worksheet, inputText):

	print('In the fliplr function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)

	print('The return from input array is '+str(inputArray))
	flag=thisItem.checkInputs(thisItem, worksheet, "fliplr", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FlipLREq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.fliplr(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="fliplr \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the flipud function for CADWOLF.
"""
def flipud(thisItem, worksheet, inputText):

	print('In the flipud function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "flipud", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FlipUDEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.flipud(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="flipud \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the roll function for CADWOLF.
"""
def roll(thisItem, worksheet, inputText):

	print('In the roll function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "roll", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RollEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RollEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RollEq="+inputArray[1]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.roll(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="roll \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.roll(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="roll \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the rot90 function for CADWOLF.
"""
def rot90(thisItem, worksheet, inputText):

	print('In the rot90 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "rot90", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Rot90Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Rot90Eq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.rot90(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="rot90 \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.rot90(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="rot90 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the bitwise_and function for CADWOLF.
"""
def bitwise_and(thisItem, worksheet, inputText):

	print('In the bitwise_and function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "bitwise_and", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BitwiseAndEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BitwiseAndEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.bitwise_and(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="bitwise and \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the bitwise_or function for CADWOLF.
"""
def bitwise_or(thisItem, worksheet, inputText):

	print('In the bitwise_or function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "bitwise_or", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BitwiseOrEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BitwiseOrEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.bitwise_or(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="bitwise or \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the bitwise_xor function for CADWOLF.
"""
def bitwise_xor(thisItem, worksheet, inputText):

	print('In the bitwise_xor function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "bitwise_xor", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BitwiseXOrEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BitwiseXOrEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.bitwise_xor(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="bitwise xor \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the invert function for CADWOLF.
"""
def invert(thisItem, worksheet, inputText):

	print('In the invert function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "invert", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InvertEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.invert(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="invert \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the left_shift function for CADWOLF.
"""
def left_shift(thisItem, worksheet, inputText):

	print('In the left_shift function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "left_shift", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LeftShiftEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LeftShiftEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.left_shift(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="left shift \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the right_shift function for CADWOLF.
"""
def right_shift(thisItem, worksheet, inputText):

	print('In the right_shift function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "right_shift", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RightShiftEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RightShiftEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		worksheet[solveID].fullMat=np.right_shift(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="right shift \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the packbits function for CADWOLF.
"""
def packbits(thisItem, worksheet, inputText):

	print('In the packbits function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "packbits", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PackBitsEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PackBitsEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.packbits(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="packbits \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.packbits(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="packbits \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the unpackbits function for CADWOLF.
"""
def unpackbits(thisItem, worksheet, inputText):

	print('In the unpackbits function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "unpackbits", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"UnpackBitsEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"UnpackBitsEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.unpackbits(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="unpackbits \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.unpackbits(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="unpackbits \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the binary_repr function for CADWOLF.
"""
def binary_repr(thisItem, worksheet, inputText):

	print('In the binary_repr function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "binary_repr", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BinaryReprEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"BinaryReprEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.binary_repr(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="binary report \\left("+worksheet[solveID].Format_showequation+"\\right)"


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.binary_repr(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="binary report \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the cholesky function for CADWOLF.
"""
def cholesky(thisItem, worksheet, inputText):

	print('In the cholesky function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cholesky", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CholeskyEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.linalg.cholesky(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="cholesky \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the det function for CADWOLF.
"""
def det(thisItem, worksheet, inputText):

	print('In the det function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "det", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DetEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.linalg.det(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="det \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the eig function for CADWOLF.
"""
def eig(thisItem, worksheet, inputText):

	print('In the eig function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "eig", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"EigEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"EigEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		wVals,vVals=np.linalg.eig(worksheet[solveID].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.real(wVals)
			worksheet[solveID].Format_showequation="eig \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			if worksheet[solveID2].fullMat[0,0]==1:
				worksheet[solveID].fullMat=np.real(wVals)

			if worksheet[solveID2].fullMat[0,0]==2:
				worksheet[solveID].fullMat=np.real(vVals)

			worksheet[solveID].Format_showequation="eig \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the eigh function for CADWOLF.
"""
def eigh(thisItem, worksheet, inputText):

	print('In the eigh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "eigh", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"EigHEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		fullMat=thisItem.combineRealImag(thisItem, worksheet[solveID].fullMat, worksheet[solveID].Solution_imag)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"EigHEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"EigHEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			wVals, vVals=np.linalg.eigh(worksheet[solveID].fullMat)
			worksheet[solveID].fullMat=wVals
			worksheet[solveID].Format_showequation="eigh \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:

			if worksheet[solveID2].fullMat[0,0]==1:	
				wVals, vVals=np.linalg.eigh(fullMat, "U")
			if worksheet[solveID2].fullMat[0,0]==2:
				wVals, vVals=np.linalg.eigh(fullMat, "L")

			worksheet[solveID].fullMat=wVals
			worksheet[solveID].Format_showequation="eigh \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:

			if worksheet[solveID2].fullMat[0,0]==1:	
				wVals, vVals=np.linalg.eigh(fullMat, "U")
			if worksheet[solveID2].fullMat[0,0]==2:
				wVals, vVals=np.linalg.eigh(fullMat, "L")

			if worksheet[solveID3].fullMat[0,0]==1:	
				worksheet[solveID].fullMat=wVals

			if worksheet[solveID3].fullMat[0,0]==2:
				worksheet[solveID].fullMat=vVals

			worksheet[solveID].Format_showequation="eigh \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the eigvals function for CADWOLF.
"""
def eigvals(thisItem, worksheet, inputText):

	print('In the eigvals function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "eigvals", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"EigValsEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.linalg.eigvals(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="eigvals \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID



"""
	This is the eigvalsh function for CADWOLF.
"""
def eigvalsh(thisItem, worksheet, inputText):

	print('In the eigvalsh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "eigvalsh", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"EigValsHEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		fullMat=thisItem.combineRealImag(thisItem, worksheet[solveID].fullMat, worksheet[solveID].Solution_imag)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"EigValsHEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.linalg.eigvalsh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="eigvalsh \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:

			if worksheet[solveID2].fullMat[0,0]==1:	
				worksheet[solveID].fullMat=np.linalg.eigvalsh(worksheet[solveID].fullMat, "U")
			if worksheet[solveID2].fullMat[0,0]==2:
				worksheet[solveID].fullMat=np.linalg.eigvalsh(worksheet[solveID].fullMat, "L")

			worksheet[solveID].Format_showequation="eigvalsh \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the inv function for CADWOLF.
"""
def inv(thisItem, worksheet, inputText):

	print('In the inv function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "inv", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InvEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.linalg.inv(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="inv \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the pinv function for CADWOLF.
"""
def pinv(thisItem, worksheet, inputText):

	print('In the pinv function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "pinv", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PInvEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LstSqEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.linalg.pinv(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="pinv \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.linalg.pinv(worksheet[solveID].fullMat, worksheet[solveID2].fullMat[[0][0]])
			worksheet[solveID].Format_showequation="pinv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the lstsq function for CADWOLF.
"""
def lstsq(thisItem, worksheet, inputText):

	print('In the lstsq function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "lstsq", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LstSqEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LstSqEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LstSqEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LstSqEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.linalg.lstsq(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="lstsq \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.linalg.lstsq(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="lstsq \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			x, res, rank, s=np.linalg.lstsq(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="lstsq \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"
			
			if worksheet[solveID3].fullMat[0,0]==1:
				worksheet[solveID].fullMat=x

			if worksheet[solveID3].fullMat[0,0]==2:
				worksheet[solveID].fullMat=res

			if worksheet[solveID3].fullMat[0,0]==3:
				worksheet[solveID].fullMat=rank

			if worksheet[solveID3].fullMat[0,0]==4:
				worksheet[solveID].fullMat=s

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the norm function for CADWOLF.
"""
def norm(thisItem, worksheet, inputText):

	print('In the norm function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "norm", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NormEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NormEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NormEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.linalg.norm(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="norm \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.linalg.norm(worksheet[solveID].fullMat, inputArray[1])
			worksheet[solveID].Format_showequation="norm \\left("+worksheet[solveID].Format_showequation+", "+inputArray[1]+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.linalg.norm(worksheet[solveID].fullMat, inputArray[1], worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="norm \\left("+worksheet[solveID].Format_showequation+", "+inputArray[1]+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if worksheet[solveID4].fullMat[0,0]==0:
				worksheet[solveID].fullMat=np.linalg.norm(worksheet[solveID].fullMat, inputArray[1], worksheet[solveID3].fullMat, False)
				worksheet[solveID].Format_showequation="norm \\left("+worksheet[solveID].Format_showequation+", "+inputArray[1]+", "+worksheet[solveID3].Format_showequation+", False\\right)"
			
			if worksheet[solveID4].fullMat[0,0]==1:
				worksheet[solveID].fullMat=np.linalg.norm(worksheet[solveID].fullMat, inputArray[1], worksheet[solveID3].fullMat, True)
				worksheet[solveID].Format_showequation="norm \\left("+worksheet[solveID].Format_showequation+", "+inputArray[1]+", "+worksheet[solveID3].Format_showequation+", True\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID






"""
	This is the solve function for CADWOLF.
"""
def solve(thisItem, worksheet, inputText):

	print('In the solve function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "solve", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SolveEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SolveEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].Format_showequation="solve \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].fullMat=np.linalg.solve(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the svd function for CADWOLF.
"""
def svd(thisItem, worksheet, inputText):

	print('In the svd function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "svd", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SVDEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"SolveEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"SolveEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.linalg.svd(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="svd \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			if worksheet[solveID2].fullMat[0,0]==0:
				worksheet[solveID].fullMat=np.linalg.svd(worksheet[solveID].fullMat, False)
				worksheet[solveID].Format_showequation="svd \\left("+worksheet[solveID].Format_showequation+", False\\right)"
			if worksheet[solveID2].fullMat[0,0]==1:
				worksheet[solveID].fullMat=np.linalg.svd(worksheet[solveID].fullMat, True)
				worksheet[solveID].Format_showequation="svd \\left("+worksheet[solveID].Format_showequation+", True\\right)"

		if len(inputArray)==3:

			if worksheet[solveID2].fullMat[0,0]==0 and worksheet[solveID3].fullMat[0,0]==0:
				worksheet[solveID].fullMat=np.linalg.svd(worksheet[solveID].fullMat, False, False)
				worksheet[solveID].Format_showequation="svd \\left("+worksheet[solveID].Format_showequation+", False, False\\right)"

			if worksheet[solveID2].fullMat[0,0]==1 and worksheet[solveID3].fullMat[0,0]==0:
				worksheet[solveID].fullMat=np.linalg.svd(worksheet[solveID].fullMat, True, False)
				worksheet[solveID].Format_showequation="svd \\left("+worksheet[solveID].Format_showequation+", True, False\\right)"

			if worksheet[solveID2].fullMat[0,0]==0 and worksheet[solveID3].fullMat[0,0]==1:
				worksheet[solveID].fullMat=np.linalg.svd(worksheet[solveID].fullMat, False, True)
				worksheet[solveID].Format_showequation="svd \\left("+worksheet[solveID].Format_showequation+", False, True\\right)"

			if worksheet[solveID2].fullMat[0,0]==1 and worksheet[solveID3].fullMat[0,0]==1:
				worksheet[solveID].fullMat=np.linalg.svd(worksheet[solveID].fullMat, True, True)
				worksheet[solveID].Format_showequation="svd \\left("+worksheet[solveID].Format_showequation+", True, True\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the fft function for CADWOLF.
"""
def fft(thisItem, worksheet, inputText):

	print('In the fft function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fft", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FFTEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FFTEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FFTEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		fullMat=thisItem.combineRealImag(thisItem, worksheet[solveID].fullMat, worksheet[solveID].Solution_imag)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.fft.fft(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="fft \\left("+worksheet[solveID].Format_showequation++"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.fft.fft(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="fft \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.fft.fft(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="fft \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.fft.fft(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, inputArray[3])
			worksheet[solveID].Format_showequation="fft \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the fft2 function for CADWOLF.
"""
def fft2(thisItem, worksheet, inputText):

	print('In the fft2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fft2", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FFT2Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FFT2Eq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FFT2Eq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.fft.fft2(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="fft2 \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.fft.fft2(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="fft2 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.fft.fft2(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="fft2 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.fft.fft2(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, inputArray[3])
			worksheet[solveID].Format_showequation="fft2 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+inputArray[3]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)
		return solveID




"""
	This is the fft2 function for CADWOLF.
"""
def fftn(thisItem, worksheet, inputText):

	print('In the fft2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fftn", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FFTNEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FFTNEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FFTNEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.fft.fftn(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="fftn \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.fft.fftn(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="fftn \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.fft.fftn(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="fftn \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+inputArray[3]+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.fft.fftn(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, inputArray[3])
			worksheet[solveID].Format_showequation="fftn \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+inputArray[3]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the ifft function for CADWOLF.
"""
def ifft(thisItem, worksheet, inputText):

	print('In the ifft function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ifft", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IFFTEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IFFTEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IFFTEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.fft.ifft(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="ifft \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.fft.ifft(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="ifft \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.fft.ifft(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="ifft \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.fft.ifft(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, inputArray[3])
			worksheet[solveID].Format_showequation="ifft \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+inputArray[3]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)
		return solveID




"""
	This is the ifft2 function for CADWOLF.
"""
def ifft2(thisItem, worksheet, inputText):

	print('In the ifft2 function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ifft2", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IFFT2Eq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IFFT2Eq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IFFT2Eq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.fft.ifft2(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="ifft2 \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.fft.ifft2(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="ifft2 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.fft.ifft2(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="ifft2 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.fft.ifft2(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, inputArray[3])
			worksheet[solveID].Format_showequation="ifft2 \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+inputArray[3]+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the ifftn function for CADWOLF.
"""
def ifftn(thisItem, worksheet, inputText):

	print('In the ifftn function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ifftn", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IFFTNEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IFFTNEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IFFTNEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.fft.ifftn(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="ifftn \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.fft.ifftn(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="ifftn \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.fft.ifftn(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="ifftn \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.fft.ifftn(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, inputArray[3])
			worksheet[solveID].Format_showequation="ifftn \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+inputArray[3]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the fv function for CADWOLF.
"""
def fv(thisItem, worksheet, inputText):

	print('In the fv function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fv", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FVEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FVEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FVEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FVEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FVEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)



		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.fv(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="fv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.fv(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="fv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the pv function for CADWOLF.
"""
def pv(thisItem, worksheet, inputText):

	print('In the pv function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "pv", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PVEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PVEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PVEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PVEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PVEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.pv(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="fv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.pv(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="fv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the npv function for CADWOLF.
"""
def npv(thisItem, worksheet, inputText):

	print('In the npv function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "npv", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NPVEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NPVEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.npv(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="npv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the pmt function for CADWOLF.
"""
def pmt(thisItem, worksheet, inputText):

	print('In the pmt function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "pmt", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PMTEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PMTEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PMTEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PMTEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PMTEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.pmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="pmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.pmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="pmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.pmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="pmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the pmt function for CADWOLF.
"""
def ppmt(thisItem, worksheet, inputText):

	print('In the ppmt function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ppmt", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PPMTEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PPMTEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PPMTEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PPMTEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PMTEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PMTEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)



		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.ppmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="ppmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.ppmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="ppmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==6:
			worksheet[solveID].fullMat=np.ppmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat, worksheet[solveID6].fullMat)
			worksheet[solveID].Format_showequation="ppmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the ipmt function for CADWOLF.
"""
def ipmt(thisItem, worksheet, inputText):

	print('In the ipmt function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ipmt", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IPMTEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IPMTEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IPMTEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IPMTEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IPMTEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IPMTEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)



		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.ipmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="ipmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.ipmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="ipmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==6:
			worksheet[solveID].fullMat=np.ipmt(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat, worksheet[solveID6].fullMat)
			worksheet[solveID].Format_showequation="ipmt \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the irr function for CADWOLF.
"""
def irr(thisItem, worksheet, inputText):

	print('In the irr function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "irr", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IRREq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.irr(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="irr \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)
		return solveID




"""
	This is the mirr function for CADWOLF.
"""
def mirr(thisItem, worksheet, inputText):

	print('In the mirr function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "mirr", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MirrEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MirrEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MirrEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.mirr(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
		worksheet[solveID].Format_showequation="mirr \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)


		return solveID




"""
	This is the nper function for CADWOLF.
"""
def nper(thisItem, worksheet, inputText):

	print('In the nper function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nper", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NPEREq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NPEREq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NPEREq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IPMTEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IPMTEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.nper(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="nper \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.nper(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="nper \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.nper(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="nper \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the rate function for CADWOLF.
"""
def rate(thisItem, worksheet, inputText):

	print('In the rate function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "rate", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RateEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RateEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RateEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RateEq="+inputArray[3]	}
		solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RateEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RateEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>6:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RateEq="+inputArray[6]	}
			solveID7=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>7:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RateEq="+inputArray[7]	}
			solveID8=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==4:
			worksheet[solveID].fullMat=np.rate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="rate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat=np.rate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="rate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==6:
			worksheet[solveID].fullMat=np.rate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat, worksheet[solveID6].fullMat)
			worksheet[solveID].Format_showequation="rate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+"\\right)"

		if len(inputArray)==7:
			worksheet[solveID].fullMat=np.rate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat, worksheet[solveID6].fullMat, worksheet[solveID7].fullMat)
			worksheet[solveID].Format_showequation="rate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+", "+worksheet[solveID7].Format_showequation+"\\right)"

		if len(inputArray)==8:
			worksheet[solveID].fullMat=np.rate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, worksheet[solveID4].fullMat, worksheet[solveID5].fullMat, worksheet[solveID6].fullMat, worksheet[solveID7].fullMat, worksheet[solveID8].fullMat)
			worksheet[solveID].Format_showequation="rate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+", "+worksheet[solveID7].Format_showequation+", "+worksheet[solveID8].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the dot function for CADWOLF.
"""
def dot(thisItem, worksheet, inputText):

	print('In the dot function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "dot", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DotEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DotEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.dot(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="dot \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the vdot function for CADWOLF.
"""
def vdot(thisItem, worksheet, inputText):

	print('In the vdot function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "vdot", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VDotEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VDotEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.vdot(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="vdot \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the inner function for CADWOLF.
"""
def inner(thisItem, worksheet, inputText):

	print('In the inner function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "inner", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InnerEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"InnerEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.inner(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="inner \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the tensordot function for CADWOLF.
"""
def tensordot(thisItem, worksheet, inputText):

	print('In the tensordot function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tensordot", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TensorDotEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TensorDotEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TensorDotEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.tensordot(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="tensordot \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat=np.tensordot(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="tensordot \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the einsum function for CADWOLF.
"""
def einsum(thisItem, worksheet, inputText):

	print('In the einsum function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "einsum", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"EinsumEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"EinsumEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.einsum(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="einsum \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the matrix_power function for CADWOLF.
"""
def matpower(thisItem, worksheet, inputText):

	print('In the matpower function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "matpower", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MatrixPowerEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MatrixPowerEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.linalg.matrix_power(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat[0,0]))
		worksheet[solveID].Format_showequation="matpower \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the kron function for CADWOLF.
"""
def kron(thisItem, worksheet, inputText):

	print('In the kron function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "kron", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"KronEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"KronEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.kron(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="kron \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the qr function for CADWOLF.
"""
def qr(thisItem, worksheet, inputText):

	print('In the qr function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "qr", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"QREq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.linalg.qr(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="qr \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.linalg.qr(worksheet[solveID].fullMat, inputArray[1])
			worksheet[solveID].Format_showequation="qr \\left("+worksheet[solveID].Format_showequation+", "+inputArray[1]+"\\right)"

		if len(inputArray)==3:
			q, r=np.linalg.qr(worksheet[solveID].fullMat, inputArray[1])
			worksheet[solveID].Format_showequation="qr \\left("+worksheet[solveID].Format_showequation+", "+inputArray[1]+", "+inputArray[2]+"\\right)"

			if inputArray[2]==1:
				worksheet[solveID].fullMat=q

			if inputArray[2]==2:
				worksheet[solveID].fullMat=r


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the isPosDef function for CADWOLF.
"""
def isPosDef(thisItem, worksheet, inputText):

	print('In the isPosDef function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "isPosDef", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"isPosDefEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		try:
			worksheet[solveID].fullMat=np.linalg.cholesky(worksheet[solveID].fullMat)

			worksheet[solveID].fullMat=np.ones((1,1))

		except:
			worksheet[solveID].fullMat=np.zeros((1,1))

		worksheet[solveID].Format_showequation="isPosDef \\left("+worksheet[solveID].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the cond function for CADWOLF.
"""
def cond(thisItem, worksheet, inputText):

	print('In the cond function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cond", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CondEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.linalg.cond(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="cond \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.linalg.cond(worksheet[solveID].fullMat, inputArray[1])
			worksheet[solveID].Format_showequation="cond \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the matrix_rank function for CADWOLF.
"""
def matrix_rank(thisItem, worksheet, inputText):

	print('In the matrix_rank function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "matrix_rank", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MatrixRankEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"MatrixRankEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat=np.linalg.matrix_rank(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="matrix rank \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat=np.linalg.matrix_rank(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat[0,0]))
			worksheet[solveID].Format_showequation="matrix rank \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the slogdet function for CADWOLF.
"""
def slogdet(thisItem, worksheet, inputText):

	print('In the slogdet function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "slogdet", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SlogDetEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			sign, logdet = np.linalg.slogdet(worksheet[solveID].fullMat)
			worksheet[solveID].fullMat=sign
			worksheet[solveID].Format_showequation="slogdet \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			sign, logdet = np.linalg.slogdet(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="slogdet \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

			if inputArray[1]==1:
				worksheet[solveID].fullMat=sign

			if inputArray[1]==2:
				worksheet[solveID].fullMat=logdet

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the trace function for CADWOLF.
"""
def trace(thisItem, worksheet, inputText):

	print('In the trace function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "trace", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TraceEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		fullMat=thisItem.combineRealImag(thisItem, worksheet[solveID].fullMat, worksheet[solveID].Solution_imag)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TraceEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TraceEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.trace(worksheet[solveID].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.trace(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat[0,0]))

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.trace(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat[0,0]), np.int(worksheet[solveID3].fullMat[0,0]))

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the tensorsolve function for CADWOLF.
"""
def tensorsolve(thisItem, worksheet, inputText):

	print('In the tensorsolve function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tensorsolve", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TensorSolveEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		fullMat1=thisItem.combineRealImag(thisItem, worksheet[solveID].fullMat, worksheet[solveID].Solution_imag)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TensorSolveEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		fullMat2=thisItem.combineRealImag(thisItem, worksheet[solveID2].fullMat, worksheet[solveID2].Solution_imag)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TraceEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.linalg.tensorsolve(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="tensorsolve \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.linalg.tensorsolve(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="tensorsolve \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the tensorinv function for CADWOLF.
"""
def tensorinv(thisItem, worksheet, inputText):

	print('In the tensorinv function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "tensorinv", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TensorInvEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		fullMat1=thisItem.combineRealImag(thisItem, worksheet[solveID].fullMat, worksheet[solveID].Solution_imag)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TensorInvEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.linalg.tensorinv(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="tensorinv \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.linalg.tensorinv(worksheet[solveID].fullMat, np.int(worksheet[solveID3].fullMat[0,0]))
			worksheet[solveID].Format_showequation="tensorinv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the rand function for CADWOLF.
"""
def rand(thisItem, worksheet, inputText):

	print('In the rand function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "rand", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		
		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.rand(worksheet[solveID].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.rand(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.rand(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.random.rand(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0], worksheet[solveID4].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat = np.random.rand(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0], worksheet[solveID4].fullMat[0,0], worksheet[solveID5].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==6:
			worksheet[solveID].fullMat = np.random.rand(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0], worksheet[solveID4].fullMat[0,0], worksheet[solveID5].fullMat[0,0], worksheet[solveID6].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the randn function for CADWOLF.
"""
def randn(thisItem, worksheet, inputText):

	print('In the randn function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "randn", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandNEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandNEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandNEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandNEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandNEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandNEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		
		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.randn(worksheet[solveID].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.randn(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.randn(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.random.randn(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0], worksheet[solveID4].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat = np.random.randn(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0], worksheet[solveID4].fullMat[0,0], worksheet[solveID5].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==6:
			worksheet[solveID].fullMat = np.random.randn(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], worksheet[solveID3].fullMat[0,0], worksheet[solveID4].fullMat[0,0], worksheet[solveID5].fullMat[0,0], worksheet[solveID6].fullMat[0,0])
			worksheet[solveID].Format_showequation="rand \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+", "+worksheet[solveID6].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the randint function for CADWOLF.
"""
def randint(thisItem, worksheet, inputText):

	print('In the randint function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "randint", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.randint(worksheet[solveID].fullMat[0,0])
			worksheet[solveID].Format_showequation="randint \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.randint(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0])
			worksheet[solveID].Format_showequation="randint \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.randint(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], inputTuple)
			worksheet[solveID].Format_showequation="randint \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the random_integer function for CADWOLF.
"""
def random_integers(thisItem, worksheet, inputText):

	print('In the random_integer function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "randint", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)
		
		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.random_integers(worksheet[solveID].fullMat[0,0])
			worksheet[solveID].Format_showequation="random integers \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.random_integers(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0])
			worksheet[solveID].Format_showequation="random integers \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.random_integers(worksheet[solveID].fullMat[0,0], worksheet[solveID2].fullMat[0,0], inputTuple)
			worksheet[solveID].Format_showequation="random integers \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the random function for CADWOLF.
"""
def random(thisItem, worksheet, inputText):

	print('In the random function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "randint", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID].fullMat)
		worksheet[solveID].fullMat = np.random.random(inputTuple)
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the choice function for CADWOLF.
"""
def choice(thisItem, worksheet, inputText):

	print('In the choice function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "randint", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)
			print(inputTuple)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.choice(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="choice \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.choice(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="choice \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[2]=="True":
				worksheet[solveID].fullMat = np.random.choice(worksheet[solveID].fullMat, inputTuple, True)
				worksheet[solveID].Format_showequation="choice \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", True\\right)"
			if inputArray[2]=="False":
				worksheet[solveID].fullMat = np.random.choice(worksheet[solveID].fullMat, inputTuple, False)
				worksheet[solveID].Format_showequation="choice \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", False\\right)"

		if len(inputArray)==4:
			if inputArray[2]=="True":
				worksheet[solveID].fullMat = np.random.choice(worksheet[solveID].fullMat, inputTuple, True, worksheet[solveID4].fullMat)
				worksheet[solveID].Format_showequation="choice \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", True, "+worksheet[solveID4].Format_showequation+"\\right)"
			if inputArray[2]=="False":
				worksheet[solveID].fullMat = np.random.choice(worksheet[solveID].fullMat, inputTuple, False, worksheet[solveID4].fullMat)
				worksheet[solveID].Format_showequation="choice \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", False, "+worksheet[solveID4].Format_showequation+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the shuffle function for CADWOLF.
"""
def shuffle(thisItem, worksheet, inputText):

	print('In the shuffle function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "shuffle", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat=np.random.shuffle(worksheet[solveID].fullMat.flatten())
		worksheet[solveID].Format_showequation="shuffle \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the permutation function for CADWOLF.
"""
def permutation(thisItem, worksheet, inputText):

	print('In the permutation function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "permutation", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		temp = worksheet[solveID].fullMat.flatten()
		worksheet[solveID].fullMat=np.random.permutation(worksheet[solveID].fullMat.flatten())
		worksheet[solveID].Format_showequation="permutation \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the beta function for CADWOLF.
"""
def beta(thisItem, worksheet, inputText):

	print('In the beta function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "beta", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.beta(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="beta \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.beta(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="beta \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the binomial function for CADWOLF.
"""
def binomial(thisItem, worksheet, inputText):

	print('In the binomial function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "binomial", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RandIntEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RandIntEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.binomial(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="binomial \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.binomial(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="binomial \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the chisquare function for CADWOLF.
"""
def chisquare(thisItem, worksheet, inputText):

	print('In the chisquare function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "chisquare", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ChisquareEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ChiSquareEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.chisquare(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="chisquare \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.chisquare(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="chisquare \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the dirichlet function for CADWOLF.
"""
def dirichlet(thisItem, worksheet, inputText):

	print('In the dirichlet function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "dirichlet", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DirichletEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"DirichletEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.dirichlet(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="dirichlet \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.dirichlet(worksheet[solveID].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="dirichlet \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the exponential function for CADWOLF.
"""
def exponential(thisItem, worksheet, inputText):

	print('In the exponential function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "exponentialt", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ExponentialEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ExponentialEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.exponential(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="exponential \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.exponential(worksheet[solveID].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="exponential \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the fdist function for CADWOLF.
"""
def fdist(thisItem, worksheet, inputText):

	print('In the fdist function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "fdist", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FDistEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FDistEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"FDistEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.f(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten())
			worksheet[solveID].Format_showequation="fdist \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.f(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="fdist \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the gamma function for CADWOLF.
"""
def gamma(thisItem, worksheet, inputText):

	print('In the gamma function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "gamma", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"GammaEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"GammaEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"GammaEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.gamma(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten())
			worksheet[solveID].Format_showequation="gamma \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.gamma(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="gamma \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the geometric function for CADWOLF.
"""
def geometric(thisItem, worksheet, inputText):

	print('In the geometric function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "geometric", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"GeometricEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"GeomtricEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.geometric(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="geometric \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.geometric(worksheet[solveID].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="geometric \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the gumbel function for CADWOLF.
"""
def gumbel(thisItem, worksheet, inputText):

	print('In the gumbel function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "gumbel", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"GumbelEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"GumbelEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"GumbelEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.gumbel(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="gumbel \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.gumbel(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten())
			worksheet[solveID].Format_showequation="gumbel \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.gumbel(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="gumbel \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the hypergeometric function for CADWOLF.
"""
def hypergeometric(thisItem, worksheet, inputText):

	print('In the hypergeometric function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "hypergeometric", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HypergeometricEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HypergeometricEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HypergeometricEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"HypergeometricEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID4].fullMat)
			print(inputTuple)


		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.hypergeometric(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten())
			worksheet[solveID].Format_showequation="hypergeometric \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.random.hypergeometric(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="hypergeometric \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the laplace function for CADWOLF.
"""
def laplace(thisItem, worksheet, inputText):

	print('In the laplace function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "laplace", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LaplaceEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LaplaceEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LaplaceEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)
			print(inputTuple)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.laplace(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="laplace \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.laplace(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten())
			worksheet[solveID].Format_showequation="laplace \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.laplace(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten())
			worksheet[solveID].Format_showequation="laplace \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the logistic function for CADWOLF.
"""
def logistic(thisItem, worksheet, inputText):

	print('In the logistic function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "logistic", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogisticEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LogisticEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LogisticEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.logistic(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="logistic \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.logistic(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten())
			worksheet[solveID].Format_showequation="logistic \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.logistic(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten())
			worksheet[solveID].Format_showequation="logistic \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the lognormal function for CADWOLF.
"""
def lognormal(thisItem, worksheet, inputText):

	print('In the lognormal function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "lognormal", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LognormalEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LognormalEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LognormalEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)
			print(inputTuple)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.lognormal(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="lognormal \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.lognormal(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten())
			worksheet[solveID].Format_showequation="lognormal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.lognormal(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten())
			worksheet[solveID].Format_showequation="lognormal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the logseries function for CADWOLF.
"""
def logseries(thisItem, worksheet, inputText):

	print('In the logseries function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "logseries", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"LogseriesEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"LogseriesEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.logseries(worksheet[solveID].fullMat.flatten())
			worksheet[solveID].Format_showequation="logseries \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.logseries(worksheet[solveID].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="logseries \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the multinomial function for CADWOLF.
"""
def multinomial(thisItem, worksheet, inputText):

	print('In the multinomial function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "multinomial", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MultinomialEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MultinomialEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"MultinomialEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.multinomial(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten())
			worksheet[solveID].Format_showequation="multinomial \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.multinomial(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten())
			worksheet[solveID].Format_showequation="multinomial \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the multivariate_normal function for CADWOLF.
"""
def multivariate_normal(thisItem, worksheet, inputText):

	print('In the multivariate_normal function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "multivariate_normal", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Multivariate_normalEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Multivariate_normalEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Multivariate_normalEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Multivariate_normalEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.multivariate_normal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="multivariate normal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.multivariate_normal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="multivariate normal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.random.multivariate_normal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple, inputArray[3])
			worksheet[solveID].Format_showequation="multivariate normal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			worksheet[solveID].fullMat = np.random.multivariate_normal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple, inputArray[3], worksheet[solveID5].fullMat)
			worksheet[solveID].Format_showequation="multivariate normal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+", "+worksheet[solveID5].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the negative_binomial function for CADWOLF.
"""
def negative_binomial(thisItem, worksheet, inputText):

	print('In the negative_binomial function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "negative_binomial", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Negative_binomialEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Negative_binomialEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Negative_binomialEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.negative_binomial(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="negative binomial \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.negative_binomial(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="negative binomial \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the noncentral_chisquare function for CADWOLF.
"""
def noncentral_chisquare(thisItem, worksheet, inputText):

	print('In the noncentral_chisquare function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "noncentral_chisquare", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Noncentral_chisquareEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Noncentral_chisquareEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Noncentral_chisquareEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.noncentral_chisquare(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="noncentral chisquare \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.noncentral_chisquare(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="noncentral chisquare \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the noncentral_f function for CADWOLF.
"""
def noncentral_f(thisItem, worksheet, inputText):

	print('In the noncentral_f function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "noncentral_f", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Noncentral_fEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Noncentral_fEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Noncentral_fEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Noncentral_fEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID4].fullMat)


		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.noncentral_f(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="noncentral f \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.random.noncentral_f(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="noncentral f \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the normal function for CADWOLF.
"""
def normal(thisItem, worksheet, inputText):

	print('In the normal function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "normal", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NormalEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NormalEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NormalEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.normal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="normal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.normal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="normal \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the pareto function for CADWOLF.
"""
def pareto(thisItem, worksheet, inputText):

	print('In the pareto function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "pareto", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ParetoEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ParetoEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.pareto(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="pareto \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.pareto(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="pareto \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the poisson function for CADWOLF.
"""
def poisson(thisItem, worksheet, inputText):

	print('In the poisson function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "poisson", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PoissonEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PoissonEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.poisson(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="poisson \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.poisson(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="poisson \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the rayleigh function for CADWOLF.
"""
def rayleigh(thisItem, worksheet, inputText):

	print('In the rayleigh function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "rayleigh", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RayleighEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"RayleighEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.rayleigh(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="rayleigh \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.rayleigh(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="rayleigh \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the standard_cauchy function for CADWOLF.
"""
def standard_cauchy(thisItem, worksheet, inputText):

	print('In the standard_cauchy function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "standard_cauchy", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"standard_cauchyEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID].fullMat)

		worksheet[solveID].fullMat = np.random.standard_cauchy(inputTuple)
		worksheet[solveID].Format_showequation="standard cauchy \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID




"""
	This is the standard_exponential function for CADWOLF.
"""
def standard_exponential(thisItem, worksheet, inputText):

	print('In the standard_exponential function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "standard_exponential", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Standard_exponentialEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID].fullMat)

		worksheet[solveID].fullMat = np.random.standard_exponential(inputTuple)
		worksheet[solveID].Format_showequation="standard exponential \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the standard_gamma function for CADWOLF.
"""
def standard_gamma(thisItem, worksheet, inputText):

	print('In the standard_gamma function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "standard_gamma", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Standard_gammaEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Standard_gammaEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.standard_gamma(worksheet[solveID].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.standard_gamma(worksheet[solveID].fullMat, inputTuple)

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the standard_normal function for CADWOLF.
"""
def standard_normal(thisItem, worksheet, inputText):

	print('In the standard_normal function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "standard_normal", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Standard_normalEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID].fullMat)

		worksheet[solveID].fullMat = np.random.standard_normal(inputTuple)
		worksheet[solveID].Format_showequation="standard normal \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the standard_t function for CADWOLF.
"""
def standard_t(thisItem, worksheet, inputText):

	print('In the standardt function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "standard_t", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Standard_tEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Standard_tEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.standard_t(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="standard t \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.standard_t(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="standard t \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the triangular function for CADWOLF.
"""
def triangular(thisItem, worksheet, inputText):

	print('In the triangular function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "triangular", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TriangularEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TriangularEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"TriangularEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"TriangularEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID4].fullMat)

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.triangular(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten())
			worksheet[solveID].Format_showequation="triangular \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.random.triangular(worksheet[solveID].fullMat.flatten(), worksheet[solveID2].fullMat.flatten(), worksheet[solveID3].fullMat.flatten(), inputTuple)
			worksheet[solveID].Format_showequation="triangular \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", "+worksheet[solveID4].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the uniform function for CADWOLF.
"""
def uniform(thisItem, worksheet, inputText):

	print('In the uniform function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "uniform", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"UniformEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"UniformEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"UniformEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.uniform(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="uniform \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.uniform(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="uniform \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the vonmises function for CADWOLF.
"""
def vonmises(thisItem, worksheet, inputText):

	print('In the vonmises function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "vonmises", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VonmisesEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VonmisesEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"VonmisesEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.vonmises(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="vonmises \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.vonmises(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="vonmises \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the wald function for CADWOLF.
"""
def wald(thisItem, worksheet, inputText):

	print('In the wald function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "wald", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"WaldEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"WaldEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"WaldEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID3].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.wald(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="wald \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.random.wald(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="wald \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the weibull function for CADWOLF.
"""
def weibull(thisItem, worksheet, inputText):

	print('In the weibull function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "weibull", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"WeibullEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"WeibullEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.weibull(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="weibull \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.weibull(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="weibull \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the zipf function for CADWOLF.
"""
def zipf(thisItem, worksheet, inputText):

	print('In the zipf function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "zipf", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ZipfEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ZipfEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.random.zipf(worksheet[solveID].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.random.zipf(worksheet[solveID].fullMat, inputTuple)

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the amin function for CADWOLF.
"""
def amin(thisItem, worksheet, inputText):

	print('In the amin function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "amin", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AminEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AminEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToIntTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AminEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			tempNum=np.amin(worksheet[solveID].fullMat)
			worksheet[solveID].fullMat=np.zeros((1,1))
			worksheet[solveID].fullMat[[0][0]]=tempNum
			worksheet[solveID].Format_showequation="amin \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			tempNums = np.amin(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
			worksheet[solveID].Format_showequation="amin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			tempNums = np.amin(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat)
			worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
			worksheet[solveID].Format_showequation="amin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]=="True":
				tempNums = np.amin(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, True)
				worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
				worksheet[solveID].Format_showequation="amin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", True\\right)"
			if inputArray[3]=="False":
				tempNums = np.amin(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, False)
				worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
				worksheet[solveID].Format_showequation="amin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", False\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the amax function for CADWOLF.
"""
def amax(thisItem, worksheet, inputText):

	print('In the amax function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "amax", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AmaxEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AmaxEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToIntTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AmaxEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			tempNum=np.amax(worksheet[solveID].fullMat)
			worksheet[solveID].fullMat=np.zeros((1,1))
			worksheet[solveID].fullMat[[0][0]]=tempNum
			worksheet[solveID].Format_showequation="amax \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			tempNums = np.amax(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
			worksheet[solveID].Format_showequation="amax \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			tempNums = np.amax(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat)
			worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
			worksheet[solveID].Format_showequation="amax \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]=="True":
				tempNums = np.amax(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, True)
				worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
				worksheet[solveID].Format_showequation="amax \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", True\\right)"
			if inputArray[3]=="False":
				tempNums = np.amax(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, False)
				worksheet[solveID].fullMat=tempNums.reshape(1, tempNums.shape[0])
				worksheet[solveID].Format_showequation="amax \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", False\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID







"""
	This is the maxu function for CADWOLF.
"""
def maxu(thisItem, worksheet, inputText):

	print('In the minu function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	baseString=''
	showeq=''
	num=''
	units=''
	quan=''
	dim=''
	nums=[]

	# Loop through the input array, scale the number by solving it, and check for consistent quantity
	for index, item in enumerate(inputArray):

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AminEq="+inputArray[index]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# Make sure that the quantity is consistent
		if baseString=='':
			baseString=worksheet[solveID].Units_base_string 
		else: 
			if baseString!=worksheet[solveID].Units_base_string:
				thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Max2", "", "")

		# Push the number(s) to the array to be solved
		if worksheet[solveID].Format_size=="1x1":
			nums.append(np.float(np.real(worksheet[solveID].fullMat[[0][0]])))
			showeq=showeq+", "+str(worksheet[solveID].Format_showequation)
			num=num+", "+str(np.float(np.real(worksheet[solveID].fullMat[[0][0]])))
			dim=dim+", 1x1"
			units=units+", "+worksheet[solveID].Units_units
			quan=quan+", "+worksheet[solveID].Units_quantity

		else:
			showeq=showeq+", "+str(worksheet[solveID].Format_showequation)
			dim=dim+", "+str(worksheet[solveID].Format_size)
			units=units+", "+str(worksheet[solveID].Units_units)
			quan=quan+", "+str(worksheet[solveID].Units_quantity)
			it = np.nditer(worksheet[solveID].fullMat, flags=['multi_index'])
			while not it.finished:
				nums.append(np.float(np.real(it[0])))
				num=num+", "+str(np.float(np.real(it[0])))
				it.iternext()

	showeq=re.sub('^\,','', showeq)
	num=re.sub('^\,','', num)
	dim=re.sub('^\,','', dim)
	units=re.sub('^\,','', units)
	quan=re.sub('^\,','', quan)


	# Apply the max function
	tempNum=np.amax(nums) 
	worksheet[solveID].fullMat=np.zeros((1,1))
	worksheet[solveID].fullMat[[0][0]]=tempNum
	worksheet[solveID].Models_numerical="amax\\left("+num+"\\right)";
	worksheet[solveID].Models_dimensions="amax\\left("+dim+"\\right)";
	worksheet[solveID].Models_quantities="amax\\left("+quan+"\\right)";
	worksheet[solveID].Models_units="amax\\left("+units+"\\right)";

	worksheet[solveID].Format_showequation="amax \\left("+showeq+"\\right)"
	worksheet[solveID].Format_showtype="builtin"
	worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID











"""
	This is the minu function for CADWOLF.
"""
def minu(thisItem, worksheet, inputText):

	print('In the minu function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	baseString=''
	showeq=''
	num=''
	units=''
	quan=''
	dim=''
	nums=[]

	# Loop through the input array, scale the number by solving it, and check for consistent quantity
	for index, item in enumerate(inputArray):

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AminEq="+inputArray[index]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# Make sure that the quantity is consistent
		if baseString=='':
			baseString=worksheet[solveID].Units_base_string 
		else: 
			if baseString!=worksheet[solveID].Units_base_string:
				thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Max2", "", "")

		# Push the number(s) to the array to be solved
		if worksheet[solveID].Format_size=="1x1":
			nums.append(np.float(np.real(worksheet[solveID].fullMat[[0][0]])))
			showeq=showeq+", "+str(worksheet[solveID].Format_showequation)
			num=num+", "+str(np.float(np.real(worksheet[solveID].fullMat[[0][0]])))
			dim=dim+", 1x1"
			units=units+", "+worksheet[solveID].Units_units
			quan=quan+", "+worksheet[solveID].Units_quantity

		else:
			showeq=showeq+", "+str(worksheet[solveID].Format_showequation)
			dim=dim+", "+str(worksheet[solveID].Format_size)
			units=units+", "+str(worksheet[solveID].Units_units)
			quan=quan+", "+str(worksheet[solveID].Units_quantity)
			it = np.nditer(worksheet[solveID].fullMat, flags=['multi_index'])
			while not it.finished:
				nums.append(np.float(np.real(it[0])))
				num=num+", "+str(np.float(np.real(it[0])))
				it.iternext()

	showeq=re.sub('^\,','', showeq)
	num=re.sub('^\,','', num)
	dim=re.sub('^\,','', dim)
	units=re.sub('^\,','', units)
	quan=re.sub('^\,','', quan)


	# Apply the max function
	tempNum=np.amin(nums) 
	worksheet[solveID].fullMat=np.zeros((1,1))
	worksheet[solveID].fullMat[[0][0]]=tempNum
	worksheet[solveID].Models_numerical="amin\\left("+num+"\\right)";
	worksheet[solveID].Models_dimensions="amin\\left("+dim+"\\right)";
	worksheet[solveID].Models_quantities="amin\\left("+quan+"\\right)";
	worksheet[solveID].Models_units="amin\\left("+units+"\\right)";

	worksheet[solveID].Format_showequation="amin \\left("+showeq+"\\right)"
	worksheet[solveID].Format_showtype="builtin"
	worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID










"""
	This is the nanamin function for CADWOLF.
"""
def nanamin(thisItem, worksheet, inputText):

	print('In the nanamin function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanamin", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"nanAminEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"nanAminEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"nanAminEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanamin(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="nanamin \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanamin(worksheet[solveID].fullMat, inputTuple)
			worksheet[solveID].Format_showequation="nanamin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.nanamin(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="nanamin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]=="True":
				worksheet[solveID].fullMat = np.nanamin(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, True)
				worksheet[solveID].Format_showequation="nanamin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", True\\right)"
			if inputArray[3]=="False":
				worksheet[solveID].fullMat = np.nanamin(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, False)
				worksheet[solveID].Format_showequation="nanamin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", False\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the nanamax function for CADWOLF.
"""
def nanamax(thisItem, worksheet, inputText):

	print('In the nanamax function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanamax", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"nanAmaxEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"nanAmaxEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			inputTuple=thisItem.arrayToTuple(thisItem, worksheet, worksheet[solveID2].fullMat)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"nanAmaxEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanamax(worksheet[solveID].fullMat)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanamax(worksheet[solveID].fullMat, inputTuple)

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.nanamax(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat)

		if len(inputArray)==4:
			if inputArray[3]=="True":
				worksheet[solveID].fullMat = np.nanamax(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, True)
			if inputArray[3]=="False":
				worksheet[solveID].fullMat = np.nanamax(worksheet[solveID].fullMat, inputTuple, worksheet[solveID3].fullMat, False)

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the ptp function for CADWOLF.
"""
def ptp(thisItem, worksheet, inputText):

	print('In the ptp function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "ptp", len(inputArray))


	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PtpEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PtpEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PtpEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.ptp(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="ptp \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.ptp(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="ptp \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.ptp(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="ptp \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the percentile function for CADWOLF. The order of inputs is changed
"""
def percentile(thisItem, worksheet, inputText):

	print('In the percentile function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "percentile", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PercentileEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# percentile
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PercentileEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis over which to compute
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PercentileEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# replace array - the array in which to place the results
		if len(inputArray)>3 and inputArray[3]!="Null":
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PercentileEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat))
			worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat, overwrite_input=inputArray[4])
				worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+", overwrite input="+inputArray[4]+"\\right)"

			if inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), overwrite_input=inputArray[4])
				worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", overwrite input="+inputArray[4]+"\\right)"


		if len(inputArray)==6:
			if inputArray[5]=="linear" or inputArray[5]=="lower" or inputArray[5]=="higher" or inputArray[5]=="midpoint" or inputArray[5]=="nearest":
				if inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
					worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat, overwrite_input=inputArray[4], interpolation=inputArray[5])
					worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+", overwrite input="+inputArray[4]+", interpolation="+inputArray[5]+"\\right)"

				if inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
					worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), overwrite_input=inputArray[4], interpolation=inputArray[5])
					worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", overwrite input="+inputArray[4]+", interpolation="+inputArray[5]+"\\right)"

		if len(inputArray)==7:
			if inputArray[5]=="linear" or inputArray[5]=="lower" or inputArray[5]=="higher" or inputArray[5]=="midpoint" or inputArray[5]=="nearest":
				if inputArray[3]!='Null' and ((inputArray[4]=="True" or inputArray[4]=="False")) and ((inputArray[6]=="True" or inputArray[6]=="False")):
					worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat, overwrite_input=inputArray[4], interpolation=inputArray[5], keepdims=inputArray[6])
					worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+", overwrite input="+inputArray[4]+", interpolation="+inputArray[5]+", keepdims="+inputArray[6]+"\\right)"

				if inputArray[3]=='Null' and ((inputArray[4]=="True" or inputArray[4]=="False")) and ((inputArray[6]=="True" or inputArray[6]=="False")):
					worksheet[solveID].fullMat = np.percentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), overwrite_input=inputArray[4], interpolation=inputArray[5], keepdims=inputArray[6])
					worksheet[solveID].Format_showequation="percentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", overwrite input="+inputArray[4]+", interpolation="+inputArray[5]+", keepdims="+inputArray[6]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the nanpercentile function for CADWOLF. The order of inputs is changed
"""
def nanpercentile(thisItem, worksheet, inputText):

	print('In the nanpercentile function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanpercentile", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NanPercentileEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# percentile
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NanPercentileEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis over which to compute
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NanPercentileEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# replace array - the array in which to place the results
		if len(inputArray)>3 and inputArray[3]!="Null":
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NanPercentileEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat))
			worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat, overwrite_input=inputArray[4])
				worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+", overwrite input="+inputArray[4]+"\\right)"

			if inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), overwrite_input=inputArray[4])
				worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", overwrite input="+inputArray[4]+"\\right)"


		if len(inputArray)==6:
			if inputArray[5]=="linear" or inputArray[5]=="lower" or inputArray[5]=="higher" or inputArray[5]=="midpoint" or inputArray[5]=="nearest":
				if inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
					worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat, overwrite_input=inputArray[4], interpolation=inputArray[5])
					worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+", overwrite input="+inputArray[4]+", interpolate="+inputArray[5]+"\\right)"

				if inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
					worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), overwrite_input=inputArray[4], interpolation=inputArray[5])
					worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", overwrite input="+inputArray[4]+", interpolate="+inputArray[5]+"\\right)"

		if len(inputArray)==7:
			if inputArray[5]=="linear" or inputArray[5]=="lower" or inputArray[5]=="higher" or inputArray[5]=="midpoint" or inputArray[5]=="nearest":
				if inputArray[3]!='Null' and ((inputArray[4]=="True" or inputArray[4]=="False")) and ((inputArray[6]=="True" or inputArray[6]=="False")):
					worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), out=worksheet[solveID4].fullMat, overwrite_input=inputArray[4], interpolation=inputArray[5], keepdims=inputArray[6])
					worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", out="+worksheet[solveID4].Format_showequation+", overwrite input="+inputArray[4]+", interpolate="+inputArray[5]+", keepdims="+inputArray[6]+"\\right)"

				if inputArray[3]=='Null' and ((inputArray[4]=="True" or inputArray[4]=="False")) and ((inputArray[6]=="True" or inputArray[6]=="False")):
					worksheet[solveID].fullMat = np.nanpercentile(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), overwrite_input=inputArray[4], interpolation=inputArray[5], keepdims=inputArray[6])
					worksheet[solveID].Format_showequation="nanpercentile \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", overwrite input="+inputArray[4]+", interpolate="+inputArray[5]+", keepdims="+inputArray[6]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the median function for CADWOLF. The order of inputs is changed
"""
def median(thisItem, worksheet, inputText):

	print('In the median function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "median", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MedianEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"MedianEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"MedianEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.median(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="median \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.median(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="median \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.median(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="median \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]!='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.median(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, overwrite_input=inputArray[3])
				worksheet[solveID].Format_showequation="median \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+", overwrite inoput="+inputArray[3]+"\\right)"
			if inputArray[3]=='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.median(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), overwrite_input=inputArray[3])
				worksheet[solveID].Format_showequation="median \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", overwrite inoput="+inputArray[3]+"\\right)"

		if len(inputArray)==5:
			if inputArray[3]!='Null' and (inputArray[3]=="True" or inputArray[3]=="False") and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.median(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, overwrite_input=inputArray[3], keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="median \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+", overwrite inoput="+inputArray[3]+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[3]=='Null' and (inputArray[3]=="True" or inputArray[3]=="False") and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.median(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), overwrite_input=inputArray[3], keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="median \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", overwrite inoput="+inputArray[3]+", keepdims="+inputArray[4]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the average function for CADWOLF. The order of inputs is changed
"""
def average(thisItem, worksheet, inputText):

	print('In the average function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "average", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AverageEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AverageEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# weights
		if len(inputArray)>2:
			if inputArray[2]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"AverageEq="+inputArray[2]	}
				solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.average(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="average \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.average(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="average \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.average(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), weights=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="average \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", weighs="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]!='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.average(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), weights=worksheet[solveID3].fullMat, returned=inputArray[3])
				worksheet[solveID].Format_showequation="average \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", weighs="+worksheet[solveID3].Format_showequation+", returned="+inputArray[3]+"\\right)"
			if inputArray[3]=='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.average(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), returned=inputArray[3])
				worksheet[solveID].Format_showequation="average \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", returned="+inputArray[3]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the mean function for CADWOLF. The order of inputs is changed
"""
def mean(thisItem, worksheet, inputText):

	print('In the mean function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "mean", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MeanEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"MeanEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			if inputArray[2]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"MeanEq="+inputArray[2]	}
				solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.mean(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="mean \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.mean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="mean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.mean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="mean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]!='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.mean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, keepdims=inputArray[3])
				worksheet[solveID].Format_showequation="mean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[3]+"\\right)"
			if inputArray[3]=='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.mean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), keepdims=inputArray[3])
				worksheet[solveID].Format_showequation="mean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[3]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the std function for CADWOLF. The order of inputs is changed
"""
def std(thisItem, worksheet, inputText):

	print('In the std function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "std", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"StdEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"StdEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			if inputArray[2]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"StdEq="+inputArray[2]	}
				solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# ddof
		if len(inputArray)>3:
			if inputArray[3]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"StdEq="+inputArray[3]	}
				solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[2]!='Null':
				worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"
			if inputArray[2]=='Null':
				worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[2]!='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddofs=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]!='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.std(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="std \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[4]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the var function for CADWOLF. The order of inputs is changed
"""
def var(thisItem, worksheet, inputText):

	print('In the var function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "var", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"VarEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"VarEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			if inputArray[2]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"VarEq="+inputArray[2]	}
				solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# ddof
		if len(inputArray)>3:
			if inputArray[3]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"VarEq="+inputArray[3]	}
				solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[2]!='Null':
				worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"
			if inputArray[2]=='Null':
				worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[2]!='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddofs=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]!='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.var(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="var \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[4]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the nanmedian function for CADWOLF. The order of inputs is changed
"""
def nanmedian(thisItem, worksheet, inputText):

	print('In the nanmedian function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanmedian", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NanMedianEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NanMedianEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NanMedianEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanmedian(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="nanmedian \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanmedian(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="nanmedian \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.nanmedian(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="nanmedian \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]!='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.nanmedian(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, overwrite_input=inputArray[3])
				worksheet[solveID].Format_showequation="nanmedian \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+", overwrite input="+inputArray[3]+"\\right)"
			if inputArray[3]=='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.nanmedian(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), overwrite_input=inputArray[3])
				worksheet[solveID].Format_showequation="nanmedian \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", overwrite input="+inputArray[3]+"\\right)"

		if len(inputArray)==5:
			if inputArray[3]!='Null' and (inputArray[3]=="True" or inputArray[3]=="False") and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanmedian(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, overwrite_input=inputArray[3], keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="nanmedian \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+", overwrite input="+inputArray[3]+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[3]=='Null' and (inputArray[3]=="True" or inputArray[3]=="False") and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanmedian(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), overwrite_input=inputArray[3], keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="nanmedian \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", overwrite input="+inputArray[3]+", keepdims="+inputArray[4]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the nanmean function for CADWOLF. The order of inputs is changed
"""
def nanmean(thisItem, worksheet, inputText):

	print('In the nanmean function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanmean", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NanMeanEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NanMeanEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			if inputArray[2]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"NanMeanEq="+inputArray[2]	}
				solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanmean(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="nanmean \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanmean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="nanmean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.nanmean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="nanmean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]!='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.nanmean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, keepdims=inputArray[3])
				worksheet[solveID].Format_showequation="nanmean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", keepdims="+inputArray[3]+"\\right)"
			if inputArray[3]=='Null' and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.nanmean(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), keepdims=inputArray[3])
				worksheet[solveID].Format_showequation="nanmean \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[3]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the nanstd function for CADWOLF. The order of inputs is changed
"""
def nanstd(thisItem, worksheet, inputText):

	print('In the nanstd function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanstd", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NanStdEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NanStdEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			if inputArray[2]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"NanStdEq="+inputArray[2]	}
				solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# ddof
		if len(inputArray)>3:
			if inputArray[3]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"NanStdEq="+inputArray[3]	}
				solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[2]!='Null':
				worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"
			if inputArray[2]=='Null':
				worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[2]!='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddofs=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]!='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanstd(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="diag \\nanstd("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[4]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the nanvar function for CADWOLF. The order of inputs is changed
"""
def nanvar(thisItem, worksheet, inputText):

	print('In the nanvar function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanvar", len(inputArray))


	if flag==0:

		# array 
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NanVarEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"NanVarEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			if inputArray[2]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"NanVarEq="+inputArray[2]	}
				solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# ddof
		if len(inputArray)>3:
			if inputArray[3]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"NanVarEq="+inputArray[3]	}
				solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[2]!='Null':
				worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"
			if inputArray[2]=='Null':
				worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[2]!='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, ddof=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]!='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), ddofs=np.int(worksheet[solveID4].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", ddof="+worksheet[solveID4].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]!='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+", keepdims="+inputArray[4]+"\\right)"
			if inputArray[2]=='Null' and inputArray[3]=='Null' and (inputArray[4]=="True" or inputArray[4]=="False"):
				worksheet[solveID].fullMat = np.nanvar(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat), keepdims=inputArray[4])
				worksheet[solveID].Format_showequation="nanvar \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[4]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the corrcoef function for CADWOLF. The order of inputs is changed
"""
def corrcoef(thisItem, worksheet, inputText):

	print('In the corrcoef function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "corrcoef", len(inputArray))


	if flag==0:

		# x
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CorrcoefEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# y
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CorrcoefEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# rowvar
		# ddof
		if len(inputArray)>3:
			if inputArray[3]!="Null":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"CorrcoefEq="+inputArray[3]	}
				solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)



		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.corrcoef(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="corrcoef \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.corrcoef(worksheet[solveID].fullMat, y=worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="corrcoef \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[2]=="True" or inputArray[2]=="False":
				worksheet[solveID].fullMat = np.corrcoef(worksheet[solveID].fullMat, y=worksheet[solveID2].fullMat, rowvar=inputArray[2])
				worksheet[solveID].Format_showequation="corrcoef \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", rowvar="+inputArray[2]+"\\right)"

		if len(inputArray)==4:
			if inputArray[2]=="True" or inputArray[2]=="False":
				worksheet[solveID].fullMat = np.corrcoef(worksheet[solveID].fullMat, y=worksheet[solveID2].fullMat, rowvar=inputArray[2], ddof=np.int(worksheet[solveID4].fullMat))
				worksheet[solveID].Format_showequation="corrcoef \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", rowvar="+inputArray[2]+", ddof="+worksheet[solveID4].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the correlate function for CADWOLF. The order of inputs is changed
"""
def correlate(thisItem, worksheet, inputText):

	print('In the correlate function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "correlate", len(inputArray))


	if flag==0:

		# x
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CorrelateEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# y
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CorrelateEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.correlate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="correlate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[2]=="valid" or inputArray[2]=="same" or inputArray[2]=="full":
				worksheet[solveID].fullMat = np.correlate(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, mode=inputArray[2])
				worksheet[solveID].Format_showequation="correlate \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", mode="+inputArray[2]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the cov function for CADWOLF. The order of inputs is changed
"""
def cov(thisItem, worksheet, inputText):

	print('In the cov function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "cov", len(inputArray))


	if flag==0:

		# m
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"CovEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# y
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CovEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CovEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CovEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>6:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"CovEq="+inputArray[6]	}
			solveID7=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.cov(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="cov \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.cov(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="cov \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[2]=="True" or inputArray[2]=="False":
				worksheet[solveID].fullMat = np.cov(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, rowvar=inputArray[2])
				worksheet[solveID].Format_showequation="cov \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", rowvar="+inputArray[2]+"\\right)"

		if len(inputArray)==4:
			if (inputArray[2]=="True" or inputArray[2]=="False") and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.cov(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, rowvar=inputArray[2], bias=inputArray[3])
				worksheet[solveID].Format_showequation="cov \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", rowvar="+inputArray[2]+", bias="+inputArray[3]+"\\right)"

		if len(inputArray)==5:
			if (inputArray[2]=="True" or inputArray[2]=="False") and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.cov(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, rowvar=inputArray[2], bias=inputArray[3], ddof=np.int(worksheet[solveID5].fullMat))
				worksheet[solveID].Format_showequation="cov \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", rowvar="+inputArray[2]+", bias="+inputArray[3]+", ddof="+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if (inputArray[2]=="True" or inputArray[2]=="False") and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.cov(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, rowvar=inputArray[2], bias=inputArray[3], ddof=np.int(worksheet[solveID5].fullMat), fweights=worksheet[solveID6].fullMat)
				worksheet[solveID].Format_showequation="cov \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", rowvar="+inputArray[2]+", bias="+inputArray[3]+", ddof="+worksheet[solveID5].Format_showequation+", fweights="+worksheet[solveID6].Format_showequation+"\\right)"

		if len(inputArray)==6:
			if (inputArray[2]=="True" or inputArray[2]=="False") and (inputArray[3]=="True" or inputArray[3]=="False"):
				worksheet[solveID].fullMat = np.cov(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, rowvar=inputArray[2], bias=inputArray[3], ddof=np.int(worksheet[solveID5].fullMat), fweights=worksheet[solveID6].fullMat, aweights=worksheet[solveID7].fullMat)
				worksheet[solveID].Format_showequation="cov \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", rowvar="+inputArray[2]+", bias="+inputArray[3]+", ddof="+worksheet[solveID5].Format_showequation+", fweights="+worksheet[solveID6].Format_showequation+", aweights="+worksheet[solveID7].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the histogram function for CADWOLF. The order of inputs is changed
"""
def histogram(thisItem, worksheet, inputText):

	print('In the histogram function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "histogram", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HistogramEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# bins
		if len(inputArray)>1:
			if inputArray[1]!="Null" and inputArray[1]!="auto" and inputArray[1]!="fd" and inputArray[1]!="doane" and inputArray[1]!="scott" and inputArray[1]!="rice" and inputArray[1]!="sturges" and inputArray[1]!="sqrt":
				eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
						'Format_showtype':"InnerFunction",
						'Original_id':thisItem.Original_id, 
						'equation':"HistogramEq="+inputArray[1]	}
				solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# range
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"HistogramEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		# weights
		if len(inputArray)>4:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"HistogramEq="+inputArray[4]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)



		if len(inputArray)==1:
			hist, binEdges = np.histogram(worksheet[solveID].fullMat)

		if len(inputArray)==2:
			if inputArray[1]=="auto" or inputArray[1]=="fd" or inputArray[1]=="doane" or inputArray[1]=="scott" or inputArray[1]=="rice" or inputArray[1]=="sturges" or inputArray[1]=="sqrt":
				hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=inputArray[1])
				worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+inputArray[1]+"\\right)"
			else:
				hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat)
				worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+inputArray[1]+"\\right)"

		if len(inputArray)==3:
			if inputArray[1]=="auto" or inputArray[1]=="fd" or inputArray[1]=="doane" or inputArray[1]=="scott" or inputArray[1]=="rice" or inputArray[1]=="sturges" or inputArray[1]=="sqrt":
				hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=inputArray[1], range=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+inputArray[1]+", range="+worksheet[solveID3].Format_showequation+"\\right)"
			elif inputArray[1]=="Null":
				hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+"\\right)"
			else:
				hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]=="True" or inputArray[3]=="False":
				if inputArray[1]=="auto" or inputArray[1]=="fd" or inputArray[1]=="doane" or inputArray[1]=="scott" or inputArray[1]=="rice" or inputArray[1]=="sturges" or inputArray[1]=="sqrt":
					hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=inputArray[1], range=worksheet[solveID3].fullMat, normed=inputArray[3])
					worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+inputArray[1]+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+"\\right)"
				elif inputArray[1]=="Null":
					hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3])
					worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+"\\right)"
				else:
					hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3])
					worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+"\\right)"

		if len(inputArray)==5:
			if inputArray[3]=="True" or inputArray[3]=="False":
				if inputArray[2]!="Null":
					if inputArray[1]!="Null":
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
					else:
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
				else:
					if inputArray[1]!="Null":
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
					else:
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
			elif inputArray[3]=="Null":
				if inputArray[2]!="Null":
					if inputArray[1]!="Null":
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
					else:
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
				else:
					if inputArray[1]!="Null":
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
					else:
						hist, binEdges = np.histogram(worksheet[solveID].fullMat, weights=worksheet[solveID5].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==6:
			if inputArray[4]!="Null" and (inputArray[5]=="True" or inputArray[5]=="False"):
				if inputArray[3]=="True" or inputArray[3]=="False" or inputArray[3]=="Null":
					if inputArray[2]!="Null":
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
					else:
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
				elif inputArray[3]=="Null":
					if inputArray[2]!="Null":
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
					else:
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", density="+inputArray[5]+"\\right)"
			elif inputArray[4]=="Null" and (inputArray[5]=="True" or inputArray[5]=="False" or inputArray[5]=="Null"):
				if inputArray[3]=="True" or inputArray[3]=="False" or inputArray[3]=="Null":
					if inputArray[2]!="Null":
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
					else:
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, normed=inputArray[3], density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, normed=inputArray[3], density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
				elif inputArray[3]=="Null":
					if inputArray[2]!="Null":
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", density="+inputArray[5]+"\\right)"
					else:
						if inputArray[1]!="Null":
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat,  density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							hist, binEdges = np.histogram(worksheet[solveID].fullMat, density=inputArray[5])
							worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", density="+inputArray[5]+"\\right)"


		if len(inputArray)==7:
			if inputArray[5]!="Null":
				if inputArray[4]!="Null" and (inputArray[5]=="True" or inputArray[5]=="False" or inputArray[5]=="Null"):
					if inputArray[3]=="True" or inputArray[3]=="False":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
					elif inputArray[3]=="Null":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, weights=worksheet[solveID5].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+", density="+inputArray[5]+"\\right)"
				elif inputArray[4]=="Null" and (inputArray[5]=="True" or inputArray[5]=="False" or inputArray[5]=="Null"):
					if inputArray[3]=="True" or inputArray[3]=="False":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, normed=inputArray[3], density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, normed=inputArray[3], density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", normed="+inputArray[3]+", density="+inputArray[5]+"\\right)"
					elif inputArray[3]=="Null":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", density="+inputArray[5]+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat,  density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", density="+inputArray[5]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, density=inputArray[5])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", density="+inputArray[5]+"\\right)"
			else:
				if inputArray[4]!="Null" and (inputArray[5]=="True" or inputArray[5]=="False" or inputArray[5]=="Null"):
					if inputArray[3]=="True" or inputArray[3]=="False":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, normed=inputArray[3], weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", normed="+inputArray[3]+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
					elif inputArray[3]=="Null":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, weights=worksheet[solveID5].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", weights="+worksheet[solveID5].Format_showequation+"\\right)"
				elif inputArray[4]=="Null" and (inputArray[5]=="True" or inputArray[5]=="False" or inputArray[5]=="Null"):
					if inputArray[3]=="True" or inputArray[3]=="False":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat, normed=inputArray[3])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+", normed="+inputArray[3]+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, normed=inputArray[3])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", normed="+inputArray[3]+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, normed=inputArray[3])
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", normed="+inputArray[3]+"\\right)"
					elif inputArray[3]=="Null":
						if inputArray[2]!="Null":
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat, range=worksheet[solveID3].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID3].Format_showequation+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, range=worksheet[solveID3].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", range="+worksheet[solveID3].Format_showequation+"\\right)"
						else:
							if inputArray[1]!="Null":
								hist, binEdges = np.histogram(worksheet[solveID].fullMat, bins=worksheet[solveID2].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", bins="+worksheet[solveID2].Format_showequation+"\\right)"
							else:
								hist, binEdges = np.histogram(worksheet[solveID].fullMat)
								worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+"\\right)"
		

		if inputArray[6]=="1":
			worksheet[solveID].fullMat=binEdges
		else:
			worksheet[solveID].fullMat=hist

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID





"""
	This is the histogram2d function for CADWOLF. The order of inputs is changed
"""
def histogram2d(thisItem, worksheet, inputText):

	print('In the histogram2d function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "histogram2d", len(inputArray))


	if flag==0:

		# x
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HistogramEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# y
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"HistogramEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# bins
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"HistogramEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# range
		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"HistogramEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# weights
		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"HistogramEq="+inputArray[5]	}
			solveID6=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)



		if len(inputArray)==2:
			hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat)
			worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+"\\right)"
		
		if len(inputArray)==4:
			if inputArray[2]=="Null":
				hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat)
				worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID4].Format_showequation+"\\right)"
			else:
				hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat)
				worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[2]=="Null":
				if inputArray[3]=="Null":
					hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, normed=inputArray[4])
					worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", normed="+inputArray[4]+"\\right)"
				else:
					hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4])
					worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+"\\right)"
			else:
				if inputArray[3]=="Null":
					hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, normed=inputArray[4])
					worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", normed="+inputArray[4]+"\\right)"
				else:
					hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4])
					worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+"\\right)"



		if len(inputArray)==6:
			if inputArray[4]=="Null":
				if inputArray[2]=="Null":
					if inputArray[3]=="Null":
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
					else:
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat, weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
				else:
					if inputArray[3]=="Null":
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
					else:
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat, weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
			else:
				if inputArray[2]=="Null":
					if inputArray[3]=="Null":
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
					else:
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
				else:
					if inputArray[3]=="Null":
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
					else:
						hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
						worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"



		if len(inputArray)==7:
			if inputArray[5]=="Null":
				if inputArray[4]=="Null":
					if inputArray[2]=="Null":
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID4].Format_showequation+"\\right)"
					else:
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+"\\right)"
				else:
					if inputArray[2]=="Null":
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, normed=inputArray[4])
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", normed="+inputArray[4]+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4])
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+"\\right)"
					else:
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, normed=inputArray[4])
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", normed="+inputArray[4]+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4])
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+"\\right)"
			else:
				if inputArray[4]=="Null":
					if inputArray[2]=="Null":
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat, weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequatio+", range="+worksheet[solveID4].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
					else:
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat, weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
				else:
					if inputArray[2]=="Null":
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
					else:
						if inputArray[3]=="Null":
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"
						else:
							hist, xEdges, yEdges = np.histogram2d(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, bins=worksheet[solveID3].fullMat, range=worksheet[solveID4].fullMat, normed=inputArray[4], weights=worksheet[solveID6].fullMat)
							worksheet[solveID].Format_showequation="histogram2d \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", bins="+worksheet[solveID3].Format_showequation+", range="+worksheet[solveID4].Format_showequation+", normed="+inputArray[4]+", weights="+worksheet[solveID6].Format_showequation+"\\right)"



		if inputArray[6]=="2":
			worksheet[solveID].fullMat=yEdges
		elif inputArray[6]=="1":
			worksheet[solveID].fullMat=xEdges
		else:
			worksheet[solveID].fullMat=hist

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the bincount function for CADWOLF. The order of inputs is changed
"""
def bincount(thisItem, worksheet, inputText):

	print('In the bincount function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "bincount", len(inputArray))


	if flag==0:

		# x
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"BincountEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# weights
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"BincountEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# minlength
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"BincountEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.bincount(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="bincount \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.bincount(worksheet[solveID].fullMat, weights=worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="bincount \\left("+worksheet[solveID].Format_showequation+", weights="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[1]=="Null":
				worksheet[solveID].fullMat = np.bincount(worksheet[solveID].fullMat, minlength=np.int(worksheet[solveID3].fullMat))
				worksheet[solveID].Format_showequation="bincount \\left("+worksheet[solveID].Format_showequation+", minlength"+worksheet[solveID3].Format_showequation+"\\right)"
			else:
				worksheet[solveID].fullMat = np.bincount(worksheet[solveID].fullMat, weights=worksheet[solveID2].fullMat, minlength=np.int(worksheet[solveID3].fullMat))
				worksheet[solveID].Format_showequation="bincount \\left("+worksheet[solveID].Format_showequation+", weights="+worksheet[solveID2].Format_showequation+", minlength="+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the digitize function for CADWOLF. The order of inputs is changed
"""
def digitize(thisItem, worksheet, inputText):

	print('In the digitize function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "digitize", len(inputArray))


	if flag==0:

		# x
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DigitizeEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# bins
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"DigitizeEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.digitize(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="digitize \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[2]=="True" or inputArray[2]=="False":
				worksheet[solveID].fullMat = np.digitize(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, right=inputArray[2])
				worksheet[solveID].Format_showequation="digitize \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", right="+inputArray[2]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the sort function for CADWOLF. The order of inputs is changed
"""
def sort(thisItem, worksheet, inputText):

	print('In the sort function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sort", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"SortEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"SortEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# order
		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"SortEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.sort(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="sort \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.sort(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="sort \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[2]=="quicksort" or inputArray[2]=="mergesort" or inputArray[2]=="heapsort":
				if inputArray[1]=="Null":
					worksheet[solveID].fullMat = np.sort(worksheet[solveID].fullMat, kind=inputArray[2])
					worksheet[solveID].Format_showequation="sort \\left("+worksheet[solveID].Format_showequation+", kind="+inputArray[2]+"\\right)"
				else:
					worksheet[solveID].fullMat = np.sort(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat), kind=inputArray[2])
					worksheet[solveID].Format_showequation="sort \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+", kind="+inputArray[2]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the argsort function for CADWOLF. The order of inputs is changed
"""
def argsort(thisItem, worksheet, inputText):

	print('In the argsort function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "argsort", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ArgSortEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ArgSortEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.argsort(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="argsort \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.argsort(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="argsort \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[2]=="quicksort" or inputArray[2]=="mergesort" or inputArray[2]=="heapsort":
				if inputArray[1]=="Null":
					worksheet[solveID].fullMat = np.argsort(worksheet[solveID].fullMat, kind=inputArray[2])
					worksheet[solveID].Format_showequation="argsort \\left("+worksheet[solveID].Format_showequation+", kind="+inputArray[2]+"\\right)"
				else:
					worksheet[solveID].fullMat = np.argsort(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat), kind=inputArray[2])
					worksheet[solveID].Format_showequation="argsort \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+", kind="+inputArray[2]+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the msort function for CADWOLF. The order of inputs is changed
"""
def msort(thisItem, worksheet, inputText):

	print('In the msort function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "msort", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"MSortEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.msort(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="msort \\left("+worksheet[solveID].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the sort_complex function for CADWOLF. The order of inputs is changed
"""
def sort_complex(thisItem, worksheet, inputText):

	print('In the sort_complex function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "sort_complex", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Sort_complexEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		fullMat=thisItem.combineRealImag(thisItem, worksheet[solveID].fullMat, worksheet[solveID].Solution_imag)

		worksheet[solveID].fullMat = np.sort_complex(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="sort complex \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the partition function for CADWOLF. The order of inputs is changed
"""
def partition(thisItem, worksheet, inputText):

	print('In the partition function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "partition", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PartitionEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# kth
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PartitionEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PartitionEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.partition(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			worksheet[solveID].Format_showequation="partition \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			worksheet[solveID].fullMat = np.partition(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat))
			worksheet[solveID].Format_showequation="partition \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the argmax function for CADWOLF. The order of inputs is changed
"""
def argmax(thisItem, worksheet, inputText):

	print('In the argmax function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "argmax", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ArgmaxEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ArgmaxEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ArgmaxEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.argmax(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="argmax \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.argmax(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="argmax \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[1]=="Null":
				worksheet[solveID].fullMat = np.argmax(worksheet[solveID].fullMat, out=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="argmax \\left("+worksheet[solveID].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"
			else:
				worksheet[solveID].fullMat = np.argmax(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="argmax \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the nanargmax function for CADWOLF. The order of inputs is changed
"""
def nanargmax(thisItem, worksheet, inputText):

	print('In the nanargmax function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanargmax", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"nanArgmaxEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"nanArgmaxEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanargmax(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="nanargmax \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanargmax(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="nanargmax \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the argmin function for CADWOLF. The order of inputs is changed
"""
def argmin(thisItem, worksheet, inputText):

	print('In the argmin function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "argmin", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"ArgminEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ArgminEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"ArgminEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.argmin(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="argmin \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.argmin(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="argmin \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[1]=="Null":
				worksheet[solveID].fullMat = np.argmin(worksheet[solveID].fullMat, out=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="argmin \\left("+worksheet[solveID].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"
			else:
				worksheet[solveID].fullMat = np.argmin(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="argmin \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID



"""
	This is the nanargmin function for CADWOLF. The order of inputs is changed
"""
def nanargmin(thisItem, worksheet, inputText):

	print('In the nanargmin function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nanargmin", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"nanArgminEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"nanArgminEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.nanargmin(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="nanargmin \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.nanargmin(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="nanargmin \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

		return solveID


"""
	This is the argwhere function for CADWOLF. The order of inputs is changed
"""
def argwhere(thisItem, worksheet, inputText):

	print('In the argwhere function with an input of '+inputText)

	newArray=re.split('\>|\<|\= ',inputText)
	arrayName=re.sub('^\(','',newArray[0])
	condText=re.sub('\)$','',newArray[1])
	print(arrayName)
	print(condText)

	eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
			'Format_showtype':"InnerFunction",
			'Original_id':thisItem.Original_id, 
			'equation':"argWhereEq="+arrayName	}
	solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

	eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
			'Format_showtype':"InnerFunction",
			'Original_id':thisItem.Original_id, 
			'equation':"argWhereEq="+condText	}
	solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

	if ">" in inputText: 
		worksheet[solveID].fullMat = np.argwhere(worksheet[solveID].fullMat>worksheet[solveID2].fullMat)

	if "<" in inputText: 
		worksheet[solveID].fullMat = np.argwhere(worksheet[solveID].fullMat<worksheet[solveI2].fullMat)

	worksheet[solveID].Format_showequation="argwhere \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
	worksheet[solveID].Format_showtype="builtin"
	worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the nonzero function for CADWOLF. The order of inputs is changed
"""
def nonzero(thisItem, worksheet, inputText):

	print('In the nonzero function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "nonzero", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"NonZeroEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.nonzero(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="nonzero \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the flatnonzero function for CADWOLF. The order of inputs is changed
"""
def flatnonzero(thisItem, worksheet, inputText):

	print('In the flatnonzero function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "flatnonzero", len(inputArray))


	if flag==0:

		# a
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"FlatNonZeroEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.flatnonzero(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="flatnonzero \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the count_nonzero function for CADWOLF. The order of inputs is changed
"""
def count_nonzero(thisItem, worksheet, inputText):

	print('In the count_nonzero function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "count_nonzero", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"Count_nonzeroEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"Count_nonzeroEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.count_nonzero(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="count nonzero \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.count_nonzero(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="count nonzero \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the polyval function for CADWOLF. The order of inputs is changed
"""
def polyval(thisItem, worksheet, inputText):

	print('In the polyval function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polyval", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyvalEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyvalEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.polyval(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="polyval \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID




"""
	This is the poly function for CADWOLF. The order of inputs is changed
"""
def poly(thisItem, worksheet, inputText):

	print('In the poly function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "poly", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.poly(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="poly \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the roots function for CADWOLF. The order of inputs is changed
"""
def roots(thisItem, worksheet, inputText):

	print('In the roots function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "roots", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"RootsEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.roots(worksheet[solveID].fullMat)
		worksheet[solveID].Format_showequation="roots \\left("+worksheet[solveID].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID




"""
	This is the polyfit function for CADWOLF. The order of inputs is changed
"""
def polyfit(thisItem, worksheet, inputText):

	print('In the polyfit function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polyfit", len(inputArray))

	if flag==0:

		# x
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyfitEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# y
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyfitEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# polynomial degree
		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyfitEq="+inputArray[2]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# rcond
		if len(inputArray)>3:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PolyfitEq="+inputArray[3]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# weights
		if len(inputArray)>5:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PolyfitEq="+inputArray[5]	}
			solveID5=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==3:
			p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat.flatten()))
			worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat)
			worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+"\\right)"

		if len(inputArray)==5:
			if inputArray[3]=="Null":
				p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4])
				worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+"\\right)"
			elif inputArray[3]=="True" or inputArray[3]=="False":
				p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4])
				worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+"\\right)"

		if len(inputArray)==6:
			if inputArray[4]=="Null":
				if inputArray[3]=="Null":
					p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat)
					worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+"\\right)"
				elif inputArray[3]=="True" or inputArray[3]=="False":
					p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat)
					worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+"\\right)"
			else:
				if inputArray[3]=="Null":
					p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat)
					worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+"\\right)"
				elif inputArray[3]=="True" or inputArray[3]=="False":
					p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat)
					worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+"\\right)"

		if len(inputArray)==7:
			if inputArray[5]=="Null":
				if inputArray[4]=="Null":
					if inputArray[3]=="Null":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"
					elif inputArray[3]=="True" or inputArray[3]=="False":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"
				else:
					if inputArray[3]=="Null":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"
					elif inputArray[3]=="True" or inputArray[3]=="False":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"

			elif inputArray[6]=="True" or inputArray[6]=="False":
				if inputArray[4]=="Null":
					if inputArray[3]=="Null":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+", cov="+inputArray[6]+"\\right)"
					elif inputArray[3]=="True" or inputArray[3]=="False":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"
				else:
					if inputArray[3]=="Null":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+", cov="+inputArray[6]+"\\right)"
					elif inputArray[3]=="True" or inputArray[3]=="False":
						p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
						worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+", cov="+inputArray[6]+"\\right)"


		if len(inputArray)==8:
			if inputArray[6]=="Null":
				if inputArray[5]=="Null":
					if inputArray[4]=="Null":
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4])
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4])
					else:
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4])
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4])

				elif inputArray[6]=="True" or inputArray[6]=="False":
					if inputArray[4]=="Null":
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat)
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat)
					else:
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat)
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat)
			else:
				if inputArray[5]=="Null":
					if inputArray[4]=="Null":
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"
					else:
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", cov="+inputArray[6]+"\\right)"

				elif inputArray[6]=="True" or inputArray[6]=="False":
					if inputArray[4]=="Null":
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+", cov="+inputArray[6]+"\\right)"
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+", cov="+inputArray[6]+"\\right)"
					else:
						if inputArray[3]=="Null":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+", cov="+inputArray[6]+"\\right)"
						elif inputArray[3]=="True" or inputArray[3]=="False":
							p = np.polyfit(worksheet[solveID].fullMat, worksheet[solveID2].fullMat, np.int(worksheet[solveID3].fullMat), rcond=worksheet[solveID4].fullMat, full=inputArray[4], w=worksheet[solveID5].fullMat, cov=inputArray[6])
							worksheet[solveID].Format_showequation="polyfit \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+", "+worksheet[solveID3].Format_showequation+", rcond="+worksheet[solveID4].Format_showequation+", full="+inputArray[4]+", w="+worksheet[solveID5].Format_showequation+", cov="+inputArray[6]+"\\right)"

		if len(inputArray)==8:
			if inputArray[8]==1:
				worksheet[solveID].fullMat=v
			else:
				worksheet[solveID].fullMat=p
		else:
			worksheet[solveID].fullMat=p

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID





"""
	This is the polyder function for CADWOLF. The order of inputs is changed
"""
def polyder(thisItem, worksheet, inputText):

	print('In the polyder function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polyder", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyderEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PolyderEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.polyder(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="polyder \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.polyder(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="polyder \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"


		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the polyint function for CADWOLF. The order of inputs is changed
"""
def polyint(thisItem, worksheet, inputText):

	print('In the polyint function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polyint", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyintEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"PolyintEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.polyint(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="polyint \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.polyint(worksheet[solveID].fullMat, np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="polyint \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the polyadd function for CADWOLF. The order of inputs is changed
"""
def polyadd(thisItem, worksheet, inputText):

	print('In the polyadd function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polyadd", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyAddEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyAddEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.polyadd(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="polyadd \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the polydiv function for CADWOLF. The order of inputs is changed
"""
def polydiv(thisItem, worksheet, inputText):

	print('In the polydiv function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polydiv", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyDivEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyDivEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.polydiv(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="polydiv \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID




"""
	This is the polymul function for CADWOLF. The order of inputs is changed
"""
def polymul(thisItem, worksheet, inputText):

	print('In the polymul function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polymul", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyMulEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolyMulEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.polymul(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="polymul \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID


"""
	This is the polysub function for CADWOLF. The order of inputs is changed
"""
def polysub(thisItem, worksheet, inputText):

	print('In the polysub function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "polysub", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolySubEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"PolySubEq="+inputArray[1]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		worksheet[solveID].fullMat = np.polysub(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
		worksheet[solveID].Format_showequation="polysub \\left("+worksheet[solveID].Format_showequation+", "+worksheet[solveID2].Format_showequation+"\\right)"
		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	This is the all function for CADWOLF. The order of inputs is changed
"""
def all(thisItem, worksheet, inputText):

	print('In the all function with an input of '+inputText)

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "all", len(inputArray))

	if flag==0:

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"AllEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# axis
		if len(inputArray)>1:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AllEq="+inputArray[1]	}
			solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		# out
		if len(inputArray)>2:
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"AllEq="+inputArray[2]	}
			solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		if len(inputArray)==1:
			worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat)
			worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+"\\right)"

		if len(inputArray)==2:
			worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat))
			worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+"\\right)"

		if len(inputArray)==3:
			if inputArray[1]=="Null":
				worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat, out=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"
			else:
				worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat)
				worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		if len(inputArray)==4:
			if inputArray[3]=="True" or inputArray[3]=="False":
				if inputArray[2]=="Null":
					if inputArray[1]=="Null":
						worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat, keepdims=inputArray[3])
						worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+", keepdim="+inputArray[3]+"\\right)"
					else:
						worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat), keepdims=inputArray[3])
						worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+", axis="+worksheet[solveID2].Format_showequation+", keepdims="+inputArray[3]+"\\right)"
				else:
					if inputArray[1]=="Null":
						worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat, out=worksheet[solveID3].fullMat, keepdims=inputArray[3])
						worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+", keepdims="+inputArray[3]+", out="+worksheet[solveID3].Format_showequation+"\\right)"
					else:
						worksheet[solveID].fullMat = np.all(worksheet[solveID].fullMat, axis=np.int(worksheet[solveID2].fullMat), out=worksheet[solveID3].fullMat, keepdims=inputArray[3])
						worksheet[solveID].Format_showequation="all \\left("+worksheet[solveID].Format_showequation+", keepdims="+inputArray[3]+", out="+worksheet[solveID3].Format_showequation+"\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID



"""
	The built in if else statement
"""
def conditional(thisItem, worksheet, inputText):

	print('In the ifelse function')

	inputArray = thisItem.inputToArray(thisItem, inputText)
	flag=thisItem.checkInputs(thisItem, worksheet, "all", len(inputArray))

	if flag==0:

		if inputArray[1]=="&lt;": inputArray[1]="<"
		if inputArray[1]=="&lt=;":inputArray[1]="<="
		if inputArray[1]=="&gt;": inputArray[1]=">"
		if inputArray[1]=="&gt=;": inputArray[1]=">="

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IfElseEq="+inputArray[0]	}
		solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

		if inputArray[1]!="==" and inputArray[1]!="!=" and inputArray[1]!=">" and inputArray[1]!="<" and inputArray[1]!=">=" and inputArray[1]!="<=":	
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "IfElse3", "", "")

		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IfElseEq="+inputArray[2]	}
		solveID2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
				'Format_showtype':"InnerFunction",
				'Original_id':thisItem.Original_id, 
				'equation':"IfElseEq="+inputArray[3]	}
		solveID3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)


		try:
			inputArray[4]
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order,
					'Format_showtype':"InnerFunction",
					'Original_id':thisItem.Original_id, 
					'equation':"IfElseEq="+inputArray[4]	}
			solveID4=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
		except:
			test=1


		testFlag=0
		if inputArray[1]=="==":
			if np.array_equal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat):
				testFlag=1

		if inputArray[1]=="!=":
			if np.array_equal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat):
				testFlag=0
			else:
				testFlag=1

		if inputArray[1]=="<":
			temp=np.less(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			if np.all(temp):
				testFlag=1

		if inputArray[1]==">":
			temp=np.greater(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			if np.all(temp):
				testFlag=1

		if inputArray[1]=="<=":
			temp=np.less_equal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			if np.all(temp):
				testFlag=1

		if inputArray[1]==">=":
			temp=np.greater_equal(worksheet[solveID].fullMat, worksheet[solveID2].fullMat)
			if np.all(temp):
				testFlag=1

		# If the condition was true, set the return value to the third entry
		if testflag==1:
			worksheet[solveID].fullMat=worksheet[solveID3].fullMat
			worksheet[solveID].Units_units=worksheet[solveID3].Units_units

		elif len(inputArray)>4:
			worksheet[solveID].fullMat=worksheet[solveID4].fullMat
			worksheet[solveID].Units_units=worksheet[solveID4].Units_units

		else:
			worksheet[solveID].fullMat=np.zeros((1,1))
			worksheet[solveID].Units_units=''

		if len(inputArray)>4:
			worksheet[solveID].Format_showequation="\\left( \\text{if} \\left( \\hspace{0.2em}"+str(worksheet[solveID].Format_showequation)+""+str(inputArray[1])+""+str(worksheet[solveID2].Format_showequation)+"\\right) \\left("+str(worksheet[solveID3].Format_showequation)+"\\right) \\text{else} \\left( "+str(worksheet[solveID4].Format_showequation)+"\\right)\\hspace{0.2em}\\right)"

		elif len(inputArray)>3:
			worksheet[solveID].Format_showequation="\\left( \\text{if} \\left( \\hspace{0.2em}"+str(worksheet[solveID].Format_showequation)+""+str(inputArray[1])+""+str(worksheet[solveID2].Format_showequation)+"\\right) \\left("+str(worksheet[solveID3].Format_showequation)+"\\right) \\hspace{0.2em}\\right)"

		worksheet[solveID].Format_showtype="builtin"
		worksheet[solveID].Format_size=getNumpySize(worksheet[solveID].fullMat)

	return solveID


"""
	This function is called early on in the equation solution process. First, it parses the 
	right side of the entered equation into a variable array where the variables, the +, -,
	*, and other items are set into an array.

	Then, the code goes through the array and checks to see if there are any entries that
	have both a number and some text. If this is the case, those two items are split up
	and the units are placed into a separate entry behind the numbers. This is done so that
	the code can identify the units later and place them with the number value.

"""

def getVariables(thisItem):
	print('In getVariables function with a right side of '+thisItem.Format_right)

	thisItem.Solution_variable_array=thisItem.splitText(thisItem.Format_right)

	re1=re.compile("^[0-9\.]+[a-zA-Z\/\*\-]+$")
	re2=re.compile("^[0-9\.]+")
	re3=re.compile("[a-zA-Z\/\*\-]+$")
	for i, item in enumerate(thisItem.Solution_variable_array):
		if re1.search(thisItem.Solution_variable_array[i]):
			temp=re2.search(thisItem.Solution_variable_array[i])
			number=temp.group(0)
			temp=re3.search(thisItem.Solution_variable_array[i])
			unit=temp.group(0)
			thisItem.Solution_variable_array[i]=number
			
			# If there are units, insert them
			if len(unit)>0:
				if i<len(thisItem.Solution_variable_array)-2:
					thisItem.Solution_variable_array.insert(i+1,unit)
				else:
					# Likely a negative
					thisItem.Solution_variable_array.insert(i+1,unit)

	print('At the end of get variables, the array is ...')
	print(thisItem.Solution_variable_array)

"""
	This function is used to get a unique ID for any new item.

"""
import random
def getID(type, fileNum, worksheet):
	print('In getID function')
	file = "File"+str(fileNum)
	tempFlag=0

	if type=="Equation":
		while tempFlag==0:
			tempID=file+'var'+str(random.randint(0, 999999))
			try:
				worksheet[tempID]
			except KeyError:
				tempFlag=1



	if type=="ForLoop":
		while tempFlag==0:
			tempID=file+'forLoop'+str(random.randint(0, 999999))
			try:
				worksheet[tempID]
			except KeyError:
				tempFlag=1


	if type=="WhileLoop":
		while tempFlag==0:
			tempID=file+'whileLoop'+str(random.randint(0, 999999))
			try:
				worksheet[tempID]
			except KeyError:
				tempFlag=1


	if type=="IfElseStatement":
		while tempFlag==0:
			tempID=file+'IfElse'+str(random.randint(0, 999999))
			try:
				worksheet[tempID]
			except KeyError:
				tempFlag=1


	if type=="Table":
		while tempFlag==0:
			tempID=file+'Table'+str(random.randint(0, 999999))
			try:
				worksheet[tempID]
			except KeyError:
				tempFlag=1


	return tempID;

"""
	This function does a number of checks on the equation and makes sure that it is legitimate
	These checks include :	
		making sure that the equation has matching parenthesis
		making sure that the equation has matching square brackets
		making sure that the name doesn't conflict with constants
		making sure that the equation has a name
		making sure that there is an equation

"""


def checkString(thisItem):
	print('In checkString function with a name of '+thisItem.Format_name)

	pcounter=0
	bcounter=0
	for index in thisItem.Solution_variable_array: 
		test=index
		if test=="(": pcounter=pcounter+1
		if test==")": pcounter=pcounter-1
		if test=="[": bcounter=bcounter+1
		if test=="]": bcounter=bcounter-1

	
	# Make sure that the opening closing brackets and parenthesis match up
	if pcounter>0 or pcounter<0:
		thisItem.Set_Error(thisItem.Original_id, worksheet, "Format4", pcounter, "NA")
	if bcounter>0 or bcounter<0:
		thisItem.Set_Error(thisItem.Original_id, worksheet, "Format5", pcounter, "NA")


	# Make sure that the equation is not a top with a name of TempEq
	if thisItem.Format_name=="TempEq" and thisItem.Format_showtype=="top":
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format6", "NA", "NA")


	# Make sure that the name does not match a constant
	for ConstantName in cadwolfConstants:
		if ConstantName==thisItem.Format_name:
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format1", "NA", "NA")

	#Make sure that the name does not match a unit
	for unit in cadwolfScaleUnits:
		if thisItem.Format_name==unit:
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format12", "NA", "NA")


	# Make sure that the name was longer than 1 character
	if len(thisItem.Format_name)<1:
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format13", "NA", "NA")


	# Make sure that the name contains only letters, numbers, understores. Brckets are allowed for multiple outputs so I shave them off
	tempName=re.sub('^\[','',thisItem.Format_name)
	tempName=re.sub('\]$','',tempName)
	tempName=re.sub("[a-zA-Z0-9\_\,\s]+", '', tempName)
	print('tempName is '+str(tempName)+' - '+str(len(tempName)))
	if len(tempName)>0:
		print('Something other than letters, numbers, underscore')
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format13", "NA", "NA")


	# Make sure that the name has letters in it
	tempName=re.search('[a-zA-Z]+',thisItem.Format_name)
	if tempName is None:
		print('No letters')
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format13", "NA", "NA")

	# Make sure that the entered equation had a name
	if thisItem.Format_name=="" or thisItem.Format_name==" ":
		thisItem.setError(thisItem, worksheet, this.Original_id, "Format7", "NA", "NA")

	
	# Make sure that the entered equation had an equation on the right
	if thisItem.Format_equation=="" or thisItem.Format_equation==" ": 
		thisItem.setError(thisItem, worksheet, this.Original_id, "Format6", "NA", "NA")

"""


	The process of splitting an equation into its variables also splits units from numbers and splits units at division, multiple,
	and power signs. This function looks at those split items and determines whether or not they were meant to be combined. If so,
	they are placed together.

	Step 1 : For each item in the array, if it matches any of the base units, then set the key array for that entry to one.	
	Step 2 : If the item is a division or multiply or power, turn it on	
	Step 3 : Look for parenthesis surrounding the units	
	Step 4 : Repeat step 2 now that the parenthesis have been set
	Step 5 : Combine units adjacent to each other and deletes the old spots.

"""

def recombineUnits(thisItem):
	print('In recombine units function')

	print(thisItem.Solution_variable_array)

	id=thisItem.Format_id

	thisItem.Solution_key_array=list(range(len(thisItem.Solution_variable_array)))


	# Set the default key array
	for index, item in enumerate(thisItem.Solution_variable_array): 
		thisItem.Solution_key_array[index]=0	


	# Set the indexes in the key array to 1 where the content matches a unit
	for index, item in enumerate(thisItem.Solution_variable_array): 
		for i, sU in enumerate(cadwolfScaleUnits): 
			if cadwolfScaleUnits[i]['unit']==item:
				thisItem.Solution_key_array[index]=1
				print("------------------------ Got unit - "+str(item)+" ----------------------------")


	# Check the mathematical operatives along with numerical items
	for index, item in enumerate(thisItem.Solution_variable_array): 
		if thisItem.Solution_variable_array[index]=="*" or thisItem.Solution_variable_array=="/":
			if thisItem.Solution_key_array[index-1]==1 and thisItem.Solution_key_array[index+1]==1:
				thisItem.Solution_key_array[index]=1

		if thisItem.Solution_variable_array[index]=="^":
			if str.isnumeric(thisItem.Solution_variable_array[index+1]) and thisItem.Solution_key_array[index-1]==1:
				thisItem.Solution_key_array[index]=1
				thisItem.Solution_key_array[index+1]=1



	# Make sure all items in parenthesis are included
	for index, item in enumerate(thisItem.Solution_variable_array): 
		if thisItem.Solution_variable_array[index]=="(" and thisItem.Solution_key_array[index+1]==1 and thisItem.Solution_key_array[index]==0:
			flag=1
			for a in range(index,-1,-1):
				if thisItem.Solution_variable_array[a]=="(" and flag==1:
					thisItem.Solution_key_array[a]=1
				else:
					flag=0
		if thisItem.Solution_variable_array[index]==")" and thisItem.Solution_key_array[index-1]==1 and thisItem.Solution_key_array[index]==0:
			flag=1
			for index2, item2 in enumerate(thisItem.Solution_variable_array): 
				if thisItem.Solution_variable_array[index2]=="(" and flag==1:
					thisItem.Solution_key_array[index2]=1
				else:
					flag=0


	
	# Go back through the mathematical operatives
	for index, item in enumerate(thisItem.Solution_variable_array): 
		if thisItem.Solution_variable_array[index]=="*" or thisItem.Solution_key_array[index]=="/":
			if thisItem.Solution_key_array[index-1]==1 and thisItem.Solution_key_array[index+1]==1:
				thisItem.Solution_key_array[index]=1

		if thisItem.Solution_variable_array[index]=="^":
			if str.isnumeric(thisItem.Solution_variable_array[index+1]) and thisItem.Solution_key_array[index-1]==1:
				thisItem.Solution_key_array[index]=1
				thisItem.Solution_key_array[index+1]=1


	"""
	for index, item in enumerate(thisItem.Solution_variable_array): 
		re1=re.compile("^[0-9,.]+\s+[0-9,a-z,A-Z,.,\^,\\,\/,{,},\*]+")
		test=re1.match(thisItem.Solution_variable_array[index])
		if test!="None":
			thisItem.Solution_key_array[index-1]=0
	"""

	# 
	for index, item in enumerate(thisItem.Solution_variable_array): 
		if thisItem.Solution_variable_array[index]=="/" and thisItem.Solution_key_array[index-1]==1 and thisItem.Solution_key_array[index+1]==1:
			thisItem.Solution_key_array[index]=1


	# 
	for index, item in enumerate(thisItem.Solution_variable_array): 
		if thisItem.Solution_variable_array[index]=="/" and thisItem.Solution_key_array[index-1]=="1" and thisItem.Solution_key_array[index+1]==1:
			thisItem.Solution_key_array[index]=1
			thisItem.Solution_key_array[index-1]=1


	# Step back through the array and delete the duplicate items
	for index in range(len(thisItem.Solution_variable_array)-1,-1,-1):
		if thisItem.Solution_key_array[index]==1 and thisItem.Solution_key_array[index-1]==1:
			thisItem.Solution_variable_array[index-1]=thisItem.Solution_variable_array[index-1]+""+thisItem.Solution_variable_array[index];
			del thisItem.Solution_variable_array[index];
			del thisItem.Solution_key_array[index];

	print(thisItem.Solution_variable_array)

"""
	This function goes through the variable array and finds entries where the user is calling a previous function with inputs. Once
	found, it pulls out the string containing the variables and sends them to a function that returns an object with the name - value
	pairs of the inputs for that string. The code then calls the solver for that equation with those inputs. Finally, the function 
	call is replaced with the result of the equation. The other parts of the input string are deleted from the parent equation.
	Along with this function is one that it uses which creates the objects for the inputs.		

"""

def parseInputs(thisItem, worksheet):
	print('In parse inputs function')
	saLength=len(thisItem.Solution_variable_array)



	# Loop through the var index and get the location of the current item
	for tempIndex, tempItem in enumerate(worksheet):
		try:
			thisItem.Format_id
		except:
			if thisItem.Format_id==worksheet[tempItem].Format_id:
				sheetLoc=worksheet[tempItem].order
				sheetEquation=worksheet[tempItem].equation


	# Loop through the array and 
	for varIndex, varItem in enumerate(thisItem.Solution_variable_array): 
		thisloc=0
		for sheetIndex, sheetItem in enumerate(worksheet): 
			saLength=len(thisItem.Solution_variable_array)
			if varIndex<saLength-1:
				try:
					worksheet[sheetItem].component_type_id
					if worksheet[sheetItem].component_type_id==3:
						if thisItem.Solution_variable_array[varIndex]==worksheet[sheetItem].Format_name and thisItem.Solution_variable_array[varIndex+1]=="(": 
							if worksheet[sheetItem].order>thisloc and worksheet[sheetItem].order<sheetLoc:
								flag=0;	
								op=0; 
								inner_text=''; 
								thisindex=a+1; 
								Inputs={}; 
								thisloc=sheetLoc;
								while flag==0 and thisindex<=saLength:
									inner_text=inner_text+thisItem.Solution_variable_array[thisindex]; 
									temptext=inner_text;
									
									if thisItem.Solution_variable_array[thisindex]=="(": 
										op=op+1;
									
									if thisItem.Solution_variable_array[thisindex]==")":
										op=op-1; 
										
										if op==0: 
											flag=1;		
											re1=re.compile("^\(")
											re2=re.compile("^\)$")
											inner_text=re1.sub(inner_text)
											inner_text=re2.sub(inner_text)
											Inputs=thisItem.Input_Object(inner_text)
											
											eqobj={	"Page_position":worksheet[this.Format_id].order, 
													"Format_showtype":"InnerFunction",	 
													"Solution_Inputs":Inputs, 
													"Original_id":this.Original_id, 
													"equation":"tempEq="+sheetEquation
													}
											tempID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
											worksheet[tempID].Format_showequation=thisItem.Solution_variable_array[a]+'('+inner_text+')';
											thisItem.Solution_variable_array[a]=tempID

									thisItem.Solution_variable_array[thisindex]="deleteme"
									thisindex=thisindex+1;

								for tempIndex, tempItem in enumerate(worksheet):
									if thisItem.Solution_variable_array[tempindex] == "deleteme":
										del thisItem.Solution_variable_array[tempIndex]
										del thisItem.Solution_key_array[tempIndex]
										tempIndex=tempIndex-1
				except:
					print()



def inputObject(input_string, re):
	print('In input object function')
	Inputs={}
	input_array=input_string.split(';')
	b=0
	spliteq=''
	varname=''
	number=''
	for inputIndex, inputItem in enumerate(input_array):
		if input_array[inputIndex]!=" ":
			reIO1=re.compile("^\s+|\s+$")
			tempSplit=reIO1.sub("", input_array[inputIndex])
			spliteq=tempSplit.split('=');
			varname=reIO1.sub(spliteq[0])
			number=reIO1.sub(spliteq[1])
			Inputs[varname]=number

	return Inputs; 




"""
	This function looks to see if there is a list of inputs for the equation and if there is, it replaces those values. This only
	happens when the equation in question was originally called as a subequation and is now being solved already properly formatted.

"""

def replaceInputs(thisItem):
	print('In replace inputs function')

	for inpIndex, inpItem in enumerate(thisItem.Solution_Inputs): 
		for solIndex, solItem in enumerate(thisItem.Solution_variable_array):
			re1=re.compile("^\-")
			rep=re1.sub("", thisItem.Solution_variable_array[solIndex])
			if thisItem.Solution_variable_array[solIndex]==inpItem or rep==inpItem:
				thisItem.Solution_variable_array[solIndex]=thisItem.Solution_Inputs[inpIndex];


"""

	This file holds two functions which identify and solve any built in functions. The first function flags all of the 
	built in functions. The second removes those cadwolffunctions.

	The first function steps through the variable array and flags any built-in functions. A built-in function is one 
	that is downloaded as part of the CADWOLF software. When an entry in the variable array matches the text of a built-in
	function and there is a parenthesis after that word, then the algorithm steps through and merges all of the inputs 
	between the parenthesis.

	The second function takes the variable array that has been merged so that all the inputs to a built-in function are 
	set in the entry just after the name of the function. The algorithm calls each of those cadwolffunctions one by one and 
	sends them the inputs.


	This needs to be updated so that the cadwolffunctions are called appropriately


"""


def flagBuiltInEquations(thisItem, worksheet):
	print('In flag built in equations function')

	varLength=len(thisItem.Solution_variable_array)


	# Go through the variable array, identify the cadwolffunctions, and then pull the name and associated inputs into on entry
	for index, item in enumerate(thisItem.Solution_variable_array): 
		for funIndex, funItem in enumerate(cadwolfFunctions):
			if thisItem.Solution_variable_array[index]==funItem:
				funFound=cadwolfFunctions[funItem]
				sum=0
				thisText=''
				index2=index+1
				testFlag=0
				while testFlag==0 and index2<varLength:
					thisText=thisText+thisItem.Solution_variable_array[index2]
					if thisItem.Solution_variable_array[index2]=="(":
						sum=sum+1
					if thisItem.Solution_variable_array[index2]==")": 
						sum=sum-1;	
						if sum==0:
							testFlag=1
					if index2>=varLength+1:
						testFlag=1
					thisItem.Solution_variable_array[index2]='deleteme'
					index2=index2+1
				thisItem.Solution_variable_array[index]=funItem
				thisItem.Solution_variable_array[index+1]=thisText


	# Go back through the array and delete the labeled items
	for tempIndex in range(len(thisItem.Solution_variable_array)-1, 0, -1):
		if thisItem.Solution_variable_array[tempIndex]=='deleteme' or thisItem.Solution_variable_array[tempIndex]=='':
			del thisItem.Solution_variable_array[tempIndex]
			del thisItem.Solution_key_array[tempIndex]





def removeBuiltInEquations(thisItem, pos, worksheet):
	print('In remove built in equations function')

	varLength=len(thisItem.Solution_variable_array)
	flag=0


	if pos<varLength:
		for funIndex, funItem in enumerate(cadwolfFunctions):
			if thisItem.Solution_variable_array[pos]==funItem:
				functionFound=cadwolfFunctions[funItem]
				flag=1
				if cadwolfFunctions[funItem]=="parseDate": 
					test=0
#					self[thisItem.Format_id][functionFound](this.Format_right, this.Format_id, pos, callback);	 				
				else:
					test=0
					print("The function found is "+str(functionFound)+" and I am calling "+str(funItem))
					print("The input to the function is "+thisItem.Solution_variable_array[pos+1])
					thisItem.Solution_variable_array[pos]=globals()[functionFound](thisItem, worksheet, str(thisItem.Solution_variable_array[pos+1]))
					del thisItem.Solution_variable_array[pos+1]

		if flag==0:
			thisItem.removeBuiltInEqs(thisItem, pos+1, worksheet)



"""

	The user can enter Force=ma for an equation. Later, they can call that result by entering "Force" into another equation or they
	can enter "Force2=Force(a=9.81m/s^2)+10" and call for the result of the force equation with the acceleration set to the entered
	value plus some additional math. This function looks for any of those subequations. When those functions are found, a separate
	function is called to solve that equation with the substituted value. The text of the subequation is then replaced with the
	equation object that contains the result of that equation with the inputs in question.

"""


def removeSubEquations(thisItem, worksheet):
	print('In the remove sub equations function')

	varLength=len(thisItem.Solution_variable_array)


	for index, item in enumerate(thisItem.Solution_variable_array): 
		for sheetIndex, sheetItem in enumerate(worksheet):
			saLength=len(thisItem.Solution_variable_array)
			if index<saLength-1:
				if worksheet[sheetItem].component_type_id==3:
					if thisItem.Solution_variable_array[index]==worksheet[sheetItem].Format_name and thisItem.Solution_variable_array[index+1]=="(":
						sum=0; 
						thisText=worksheet[sheetItem].Format_name;
						index2=index+1; 
						testFlag=0; 
						while testFlag==0 and index2<=varLength: 
							thisText=thisText+thisItem.Solution_variable_array[index2]
							if thisItem.Solution_variable_array[index2]=="(": 
								sum=sum+1; 
							elif thisItem.Solution_variable_array[index2]==")": 
								sum=sum-1
								if sum==0:
									testflag=1 
							thisItem.Solution_variable_array[index2]='deleteme'
							index2=index2+1
						
							eqobj={	Page_position:DOM_Object[thisItem.Format_id]['order'], 
									Format_showtype:"subequation",  
									Page_parentid:thisItem.Page_parentid, 
									Page_topparentid:thisItem.Page_topparentid, 
									Original_id:thisItem.Format_id, 
									equation:thisText }
						# newid=CreateEq(thisItem.fileid, 1, eqobj);
						thisItem.Solution_variable_array[index]=newid;
						thisItem.Solution_temps.push(newid);

	for index, item in enumerate(thisItem.Solution_variable_array): 
		if thisItem.Solution_variable_array[index] == 'deleteme':
			del thisItem.Solution_variable_array[index]; 
			del thisItem.Solution_key_array[index]; 
			i=i-1


"""
	These set of functions deal with using files as functions. There are a total of 4 functions that identify the function,
	solve the inputs that are going to the function, pull the function text from the solution array and then replace that
	text with an equation that holds the results of the function.

"""


"""
	This is the function called to find any Files used as functions. It goes through the solution array and compares each remaining
	item to the list of files as functions on this page. If it finds one, it then steps through the solution array and pulls in any
	items that were intended to be inputs to the function into a string. The string is then parsed and the space occupied by the
	function call is replaced with the ID of the item created by solving the function.
"""



def removeFAFs(thisItem, worksheet):
	print('In the remove FAFs function')

	varLength=len(thisItem.Solution_variable_array)

	for index, item in enumerate(thisItem.Solution_variable_array): 
		if thisItem.Solution_variable_array[index]=="(":
			for funIndex, funItem in enumerate(cadwolfImportedFunctions): 
				#print("I am comparing "+str(cadwolfImportedFunctions[funIndex]['functionName'])+' to '+str(thisItem.Solution_variable_array[index-1]))
				if cadwolfImportedFunctions[funIndex]['functionName']==thisItem.Solution_variable_array[index-1]: 
					print('Match')
					fafFlag=1
					thisText=''
					index2=index+1
					flag=0
					thisSum=1
					inputText=''
					thisItem.Solution_variable_array[index]='deleteme'
					while flag==0 and index2<varLength:
						if thisItem.Solution_variable_array[index2]=="(":
							thisSum=thisSum+1
						elif thisItem.Solution_variable_array[index2]==")":
							thisSum=thisSum-1
							if thisSum==0:
								testFlag=1 
							else:
								inputText=inputText+thisItem.Solution_variable_array[index2]
						else:
							inputText=inputText+thisItem.Solution_variable_array[index2]
						thisItem.Solution_variable_array[index2]="deleteme"
						index2=index2+1
					inputs=thisItem.inputArray(thisItem, inputText)
					for tempIndex, tempItem in enumerate(thisItem.Solution_variable_array): 
						if thisItem.Solution_variable_array[tempIndex] == 'deleteme':  
							del thisItem.Solution_variable_array[tempIndex] 
							del thisItem.Solution_key_array[tempIndex]
							index=index-1

					thisItem.solveFAFs(thisItem, worksheet, cadwolfImportedFunctions[funIndex]['functionName'], inputs, index-1)

	for index in range(len(thisItem.Solution_variable_array)-1,-1,-1):
		if thisItem.Solution_variable_array[index] == 'deleteme':
			del thisItem.Solution_variable_array[index]



"""
	This function solves for the inputs to the function. It does this by looping through the input array from the previous function,
	solving each of those equations, and then placing the final values into the array slot. It then calls the solve function.

	Note that this code is simply solving the inputs given and storing those values in the function inputs array so that those values
	can be used to solved the equation in the next step. There is no intent to store these equations on the worksheet variable. Also
	note that these input values are determined by the variables on this worksheet (file) and not on the values of the file from which
	that equation comes.
"""

def solveFAFs(thisItem, worksheet, funName, inputs, solVarIndex):
	
	print('In the solve FAFs function')

	print('The function name is '+str(funName)+' and the inputs are '+str(inputs))

	for funIndex, funItem in enumerate(cadwolfImportedFunctions):
		if cadwolfImportedFunctions[funIndex]['functionName']==funName:
			
			# For each input given to the function, solve it and then place the results in the input
			for inpIndex, inpItem in enumerate(inputs):
				eqObj={ "Page_position":thisItem.order,
						"Format_showtype":"InnerFunction", 
						"Original_id":thisItem.Original_id, 
						"equation":"Temp="+inputs[inpIndex]  }
				print('I am solving the input '+str(inputs[inpIndex])+' from the solveFAFs function')
				id1=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['fullMat']=copy.copy(worksheet[id1].fullMat)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['real']=copy.copy(worksheet[id1].Solution_real)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['imag']=copy.copy(worksheet[id1].Solution_imag)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['size']=copy.copy(worksheet[id1].Format_size)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['units']=copy.copy(worksheet[id1].Units_units)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['showEq']=copy.copy(worksheet[id1].Format_showequation)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['dimModel']=copy.copy(worksheet[id1].Models_dimensions)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['unitModel']=copy.copy(worksheet[id1].Models_units)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['numModel']=copy.copy(worksheet[id1].Models_numerical)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['quanModel']=copy.copy(worksheet[id1].Models_quantities)
				cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['showEq']=copy.copy(worksheet[id1].Format_showequation)
				for tempIndex, tempItem in worksheet[id1].Dependents:
					worksheet[this.Original_id]['Dependents'][tempItem]='1'

				print('For the input '+str(inpIndex)+' - '+str(cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['name'])+', the size is '+str(cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['size'])+' the answer is '+str(cadwolfImportedFunctions[funIndex]['functionInputs'][inpIndex]['fullMat'][[0][0]]))

			thisItem.solveFAFItems(thisItem, worksheet, funName, 0, solVarIndex)



"""

	This function steps through each item in the file being used as a function. If that item is an equation, it is tested to see if
	the name matches an input. A new equation is created and if the item name matches an input, then its value is set. If not, then
	the equation is solved. If the item is a loop or a statement then the block is run.

"""

def solveFAFItems(thisItem, worksheet, funName, pos, solVarIndex):
	
	print('In the solve FAFs Items function')


	for funIndex, funItem in enumerate(cadwolfImportedFunctions):
		if cadwolfImportedFunctions[funIndex]['functionName']==funName:

			if pos<len(cadwolfImportedFunctions[funIndex]['fileItems']):
				if cadwolfImportedFunctions[funIndex]['fileItems'][pos]['component_type_id']==3:
					inputFlag=0

					# Copy the data from the 
					tempData=cadwolfImportedFunctions[funIndex]['fileItems'][pos]['content']['Equation']
					tempData['Format_equation']=tempData['newEquation']
					tempData['Page_position']=cadwolfImportedFunctions[funIndex]['fileItems'][pos]['order']
					del(tempData['Original_id'])
					tempID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, tempData)
					cadwolfImportedFunctions[funIndex]['fileItems'][pos]['assocID']=tempID
					for inputIndex, inputItem in enumerate(cadwolfImportedFunctions[funIndex]['functionInputs']):
						if cadwolfImportedFunctions[funIndex]['fileItems'][pos]['content']['Equation']['Format_name']==cadwolfImportedFunctions[funIndex]['functionInputs'][inputIndex]['name']:
							worksheet[tempID].fullMat=cadwolfImportedFunctions[funIndex]['functionInputs'][inputIndex]['fullMat']
							worksheet[tempID].Solution_real=cadwolfImportedFunctions[funIndex]['functionInputs'][inputIndex]['real'] 
							worksheet[tempID].Solution_imag=cadwolfImportedFunctions[funIndex]['functionInputs'][inputIndex]['imag'] 
							worksheet[tempID].Units_units=cadwolfImportedFunctions[funIndex]['functionInputs'][inputIndex]['units']  
							worksheet[tempID].Format_size=cadwolfImportedFunctions[funIndex]['functionInputs'][inputIndex]['size']
							worksheet[tempID].fileid=cadwolfImportedFunctions[funIndex]['fileID']
							worksheet[tempID].Format_name=cadwolfImportedFunctions[funIndex]['fileItems'][pos]['content']['Equation']['Format_name']
							inputFlag=1
					if inputFlag==0:
						worksheet[tempID].solveEq(tempData['Format_equation'], worksheet, 'SolveEquation')
						thisItem.solveFAFItems(thisItem, worksheet, funName, pos+1, solVarIndex) 
					else:
						thisItem.solveFAFItems(thisItem, worksheet, funName, pos+1, solVarIndex) 


			else:
				thisItem.returnFAF(thisItem, worksheet, funName, solVarIndex)

		# There needs to be a lot of stuff added for solving structures





"""
   
	This is the final code called when dealing with files used as functions. The code simply goes through the outputs and then finds the 
	corresponding item with that name and returns that ID. If there are multiple returns, the connected IDs are set. 

"""

def returnFAF(thisItem, worksheet, funName, solVarIndex):
	print('In the return FAFs Items function')


	name_array=[]
	flag=0
	returnID=''	   
	thisItem.connected_ids={}


	for funIndex in range(0, len(cadwolfImportedFunctions), 1):

		if cadwolfImportedFunctions[funIndex]['functionName']==funName:

			
			# If there is only one output, set the return ID to that ID
			if len(cadwolfImportedFunctions[funIndex]['functionOutputs'])==1:

				for b in range(0, len(cadwolfImportedFunctions[funIndex]['fileItems']), 1):
					if cadwolfImportedFunctions[funIndex]['functionOutputs'][0].name==cadwolfImportedFunctions[funIndex]['fileItems'][b]['content']['Equation']['Format_name']:
						returnID=cadwolfImportedFunctions[funIndex]['fileItems'][b]['assocID']

			# Multiple return values necessitate the associated IDs being set
			else:
				name_array=re.sub('^\[','', thisItem.Format_left)
				name_array=re.sub('\]$','', name_array)
				name_array=name_array.split(',')

				for b in range(0, len(name_array), 1):
					name_array[b]=re.sub('\s', '', name_array[b])

				for b in range(0, len(cadwolfImportedFunctions[funIndex]['functionOutputs']), 1):
					for c in range(0, len(cadwolfImportedFunctions[funIndex]['fileItems']), 1):
						if cadwolfImportedFunctions[funIndex]['functionOutputs'][b]['name']==cadwolfImportedFunctions[funIndex]['fileItems'][c]['content']['Equation']['Format_name']:
							thisItem.connected_ids[cadwolfImportedFunctions[funIndex]['fileItems'][c]['assocID']]=1
							if flag==0:
								flag=1
								returnID=cadwolfImportedFunctions[funIndex]['fileItems'][c]['assocID']


			# Build out the show equation
			worksheet[returnID].Format_showequation=funName+'\\left('
			for b in range(0, len(cadwolfImportedFunctions[funIndex]['functionInputs']), 1):
				if b>0:
					worksheet[returnID].Format_showequation=str(worksheet[returnID].Format_showequation)+', '+str(cadwolfImportedFunctions[funIndex]['functionInputs'][b]['showEq'])
				else:
					worksheet[returnID].Format_showequation=str(worksheet[returnID].Format_showequation)+''+str(cadwolfImportedFunctions[funIndex]['functionInputs'][b]['showEq'])
			
			worksheet[returnID].Format_showequation=str(worksheet[returnID].Format_showequation)+'\\right)'


			worksheet[returnID].fullMat=thisItem.objectToNumpy(worksheet[returnID].Solution_real, worksheet[returnID].Solution_imag)
			worksheet[returnID].getSize(worksheet[returnID], worksheet)
			thisItem.Solution_variable_array[solVarIndex]=returnID


"""
	This function replaces any items in the variable array that match previously declared variables. This is done by
	scrolling through the DOM Object that was sent to the solver and finding the name that matches. The DOM object sent
	will only contain the last occurence of the variable name.
"""


def replaceVariables(thisItem, worksheet):
	print('In the replace variables function')


	re1=re.compile("^\-")
	for index, item in enumerate(thisItem.Solution_variable_array):


		thisText=re1.sub("", thisItem.Solution_variable_array[index])
		#thisText=re.search('[0-9-.\[\]\;\,]+', thisItem.Solution_variable_array[index])

		thisEqId=thisItem.matchClosestEquation(thisItem, worksheet, thisText, worksheet[thisItem.itemid].order, thisItem.itemid, index, 1)


"""
	Replace any imported cad parts. This is done by matching the name given to each part to the user input.	It then parses
	text entered by the user to see which property the user wants. Only specific options are allowed.

	NOTE - this really needs to be looked at again once I address the worksheet / DOM_OBJECT / self issue
"""


def replaceCAD(thisItem, worksheet):
	print('In the replace CAD function')

	varLength=len(thisItem.Solution_variable_array)
	thisID=thisItem.Format_id

	for index, item in enumerate(thisItem.Solution_variable_array):

		nameArray = thisItem.Solution_variable_array[index].split('.')

		if len(nameArray)>1:

			for cadIndex, cadItem in enumerate(cadwolfCadParts):

				if cadwolfCadParts[cadIndex]['eqname']==nameArray[0]:
					
					eqObj= {	Page_position:worksheet[thisID]['order'],
								Format_showtype:"InnerFunction",
								equation:"Temp=0"	}
					id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
					worksheet[id].Format_showequation=thisItem.Solution_variable_array[index] 
					partId = cadwolfCadParts[cadIndex]['part_data']['partId'];					


					if nameArray[1]=="mass":
						worksheet[id].fullMat=np.zeros([[1][1]])
						worksheet[id].fullmat[[0][0]]=cadwolfCadParts[a]['mass_data']['bodies'][partId]['mass'][1]; 
						worksheet[id]['Units_units']='kg'
						worksheet[id]['Units_quantity']='mass'
						worksheet[id]['Format_size']='1x1'


					if nameArray[1]=="volume":
						worksheet[id].fullMat=np.zeros([[1][1]])
						worksheet[id].fullmat[[0][0]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['volume'][1]
						worksheet[id]['Units_units'] = 'm^3'
						worksheet[id]['Units_quantity'] = 'volume'
						worksheet[id]['Format_size']='1x1'


					if nameArray[1]=="surface":
						worksheet[id].fullMat=np.zeros([[1][1]])
						worksheet[id].fullmat[[0][0]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['periphery'][1]
						worksheet[id]['Units_units'] = 'm^2'
						worksheet[id]['Units_quantity'] = 'area' 
						worksheet[id]['Format_size']="1x1"


					if nameArray[1]=="weight":
						worksheet[id].fullMat=np.zeros([[1][1]])
						worksheet[id].fullmat[[0][0]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['weight_N']; 
						worksheet[id]['Units_units'] = 'N'; 
						worksheet[id]['Units_quantity'] = 'force'; 
						worksheet[id]['Format_size']="1x1";


					if nameArray[1]=="inertia":
						worksheet[id].fullMat=np.zeros([[1][9]])
						worksheet[id].fullmat[[0][0]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][0]
						worksheet[id].fullMat[[0][1]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][1]
						worksheet[id].fullMat[[0][2]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][2]
						worksheet[id].fullMat[[0][3]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][3]
						worksheet[id].fullMat[[0][4]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][4]
						worksheet[id].fullMat[[0][5]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][5]
						worksheet[id].fullMat[[0][6]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][6]
						worksheet[id].fullMat[[0][7]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][7]
						worksheet[id].fullMat[[0][8]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['inertia'][8]
						worksheet[id]['Units_units'] = 'kg*m^2'
						worksheet[id]['Units_quantity'] = 'inertia'
						worksheet[id]['Format_size']="1x9"


					if nameArray[1]=="principalInertia" or nameArray[1]=="principalinertia":
						worksheet[id].fullMat=np.zeros([[1][3]])
						worksheet[id].fullMat[[0][0]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalInertia'][0]
						worksheet[id].fullMat[[0][1]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalInertia'][1]
						worksheet[id].fullMat[[0][2]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalInertia'][2]
						worksheet[id]['Units_units'] = 'kg*m^2'
						worksheet[id]['Units_quantity'] = 'inertia'
						worksheet[id]['Format_size']="1x3"


					if nameArray[1]=="centroid":
						worksheet[id].fullMat=np.zeros([[1][3]])
						worksheet[id].fullMat[[0][0]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['centroid'][0]
						worksheet[id].fullMat[[0][1]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['centroid'][1]
						worksheet[id].fullMat[[0][2]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['centroid'][2]
						worksheet[id]['Units_units']='m'
						worksheet[id]['Units_quantity']='length' 
						worksheet[id]['Format_size']="1x3"


					if nameArray[1]=="principalAxes" or nameArray[1]=="principalaxes":
						worksheet[id].fullMat=np.zeros([[1][9]])
						worksheet[id].fullmat[[0][0]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][0]['x']
						worksheet[id].fullMat[[0][1]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][0]['y']
						worksheet[id].fullMat[[0][2]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][0]['z']
						worksheet[id].fullMat[[0][3]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][1]['x']
						worksheet[id].fullMat[[0][4]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][1]['y']
						worksheet[id].fullMat[[0][5]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][1]['z']
						worksheet[id].fullMat[[0][6]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][2]['x']
						worksheet[id].fullMat[[0][7]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][2]['y']
						worksheet[id].fullMat[[0][8]] = cadwolfCadParts[a]['mass_data']['bodies'][partId]['principalAxes'][2]['z']
						worksheet[id]['Units_units'] = 'kg*m^2'
						worksheet[id]['Units_quantity'] = 'inertia'
						worksheet[id]['Format_size']="1x9"


					if nameArray[1]=="density":
						worksheet[id].fullMat=np.zeros([[1][1]])
						worksheet[id].fullmat[[0][0]] = cadwolfCadParts[a]['material_data']['material']['properties'][0]['value']
						worksheet[id]['Units_units'] = cadwolfCadParts[a]['material_data']['material']['properties'][0]['units']
						worksheet[id]['Units_quantity'] = 'density'
						worksheet[id]['Format_size']="1x1"


					worksheet[id].Units_multiplier=1;	 
					thisItem.Solution_temps.push(id);
					thisItem.Solution_variable_array[index]=id;
					worksheet[id]['imag']={};



"""
	This function replaces any items that match a constant. This is done by looping through the constants object and 
	comparing the name of each item to all items in the variable array.	When there is a match, a new object is set in
	in place of the constant within the array. The values of that object are set to the values of the constant.
"""

def replaceConstants(thisItem, worksheet):
	print('In the replace Constants function')

	for index, item in enumerate(thisItem.Solution_variable_array):

		for constIndex, constItem in enumerate(cadwolfConstants):

			if cadwolfConstants[constIndex]['name']==thisItem.Solution_variable_array[index]:
				eqObj={	"Page_position":thisItem.order,
						"Format_showtype":"InnerFunction",
						"equation":"Temp=0"	}
				id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
				worksheet[id].Format_showequation=constItem['showvalue']
				worksheet[id].fullMat=np.zeros((1,1), dtype=complex)
				worksheet[id].fullMat[[0][0]]=np.float(constItem['value'])
				worksheet[id].Units_units=constItem['units']
				worksheet[id].Units_multiplier=1 
				worksheet[id].Format_size="1x1"
				worksheet[id].Format_showtype="constant"
				thisItem.Solution_temps.append(id)
				thisItem.Solution_variable_array[index]=id


"""
	This function finds and replaces any matrix components

"""


def replaceMatrixPieces(thisItem, worksheet):
	print('In the replace matrix pieces function')

	varLength=len(thisItem.Solution_variable_array)
	index2=0
	matrixText=''
	re4=re.compile(":")
	indObj={}
	ansObj={}
	flag=0


	for index, item in enumerate(thisItem.Solution_variable_array):

		if thisItem.Solution_variable_array[index]=='[' and index>0:

			thisEq=thisItem.matchClosestEquation(thisItem, worksheet, thisItem.Solution_variable_array[index-1], worksheet[thisItem.Format_id].order, thisItem.Format_id, index, 0)
			if thisEq!=0:

				# Step through the variable array and compile the entirety of the matrix indices
				while flag==0 and index2<varLength-1:
					matrixText=matrixText+thisItem.Solution_variable_array[index2]
					if (thisItem.Solution_variable_array[index2]=="]" and thisItem.Solution_variable_array[index2+1]!="[") or index2>=varLength:
						flag=1
					thisItem.Solution_variable_array[index2]='deleteme'
					index2=index2+1
				if thisItem.Solution_variable_array[index2]==']':
					matrixText=matrixText+"]"
					thisItem.Solution_variable_array[index2]='deleteme'

				sizes=worksheet[thisEq].Format_size.split('x')

				# Split the indices
				for indIndex, indItem in enumerate(re.findall('\[[0-9,a-z,A-Z,\:,\.,\-]+\]', matrixText)):
					indObj[indIndex]={}
					ansObj[indIndex]={}
					thisIndex=indItem.replace("[", "")
					thisIndex=thisIndex.replace("]", "")
					test=re4.search(thisIndex)
					
					# Only a semicolon
					if test is not None and len(thisIndex)==1:
						indObj[indIndex]['0']=":"
						indObj[indIndex]['1']=":"
					
					# Two Numbers and semicolons
					elif test:
						ends=thisIndex.split(":")
						indObj[indIndex]['0']=ends[0]
						indObj[indIndex]['1']=ends[1]
					
					# First value is set and second needs to be solved
					else:
						indObj[indIndex]['0']=thisIndex
						indObj[indIndex]['1']='&'


				# Loop through the indices object and set the start and stop indices for the matrix
				for indIndex, indItem in enumerate(indObj):

					# If we are looking for all values for this index
					if indObj[indIndex]['0']==':' and indObj[indIndex]['1']==':':
						ansObj[indIndex]['0']=0
						ansObj[indIndex]['1']=sizes[indIndex]-1

					# If the value needs to be solved for
					elif indObj[indIndex]['1']=='&':
						eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
								"Format_showtype":"InnerFunction", 
								"Page_parentid":thisItem.Page_parentid,
								"Page_topparentid":thisItem.Page_topparentid, 
								"Original_id":thisItem.Format_id, 
								"equation":"TempEq="+indObj[indIndex]['0']	}
						id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)	
						ansObj[indIndex]['0']=np.asscalar(np.real(worksheet[id].fullMat[[0][0]]))
						ansObj[indIndex]['1']=np.asscalar(np.real(worksheet[id].fullMat[[0][0]]))
						del worksheet[id]
					
					# Both values need to be solved for
					else:
						eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
								"Format_showtype":"InnerFunction", 
								"Page_parentid":this.Page_parentid,
								"Page_topparentid":thisItem.Page_topparentid, 
								"Original_id":thisItem.Format_id, 
								"equation":"TempEq="+indObj[indIndex]['0']	}
						id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
						thisItem.Solution_temps.append(id)
						ansObj[indIndex]['0']=np.asscalar(np.real(worksheet[id].fullMat[[0][0]]))
						del worksheet[id]
						eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
								"Format_showtype":"InnerFunction", 
								"Page_parentid":thisItem.Page_parentid,
								"Page_topparentid":thisItem.Page_topparentid, 
								"Original_id":thisItem.Format_id, 
								"equation":"TempEq="+indObj[indIndex]['1']	}
						id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
						worksheet[id].Format_showequation=indObj[indIndex]['1']
						thisItem.Solution_temps.append(id)
						ansObj[indIndex]['1']=np.asscalar(np.real(worksheet[id].fullMat[[0][0]]))
						del worksheet[id]

				# Create the equation to be placed into the variable array
				eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
						"Format_showtype":"matrixcomponent", 
						"Page_parentid":thisItem.Page_parentid,
						"Page_topparentid":thisItem.Page_topparentid, 
						"Original_id":thisItem.Format_id, 
						"equation":"TempEq=0"	}
				id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
				thisItem.Solution_temps.append(id)

				# Create the base full mat to be populated
				matSize=[0] * len(ansObj)
				for ansIndex, ansItem in enumerate(ansObj):
					matSize[ansIndex]=np.int_(ansObj[ansIndex]['1'])-np.int_(ansObj[ansIndex]['0'])+1
				print('The matSize is '+str(matSize))
				worksheet[id].fullMat=np.zeros(tuple(matSize), dtype=complex)

				# Loop through the entire array from which we are pulling data
				it = np.nditer(worksheet[thisEq].fullMat, flags=['multi_index'])
				while not it.finished:

					flag=0
					key=''

					# Split the index of each item to create a key
					keyList=re.sub('\(', '', str(it.multi_index))
					keyList=re.sub('\)', '', keyList)
					keyList=re.sub('\s', '', keyList)
					splitKey=keyList.split(',')
					
					# For each key, check to see that it is within the boundaries of what we are looking for
					for splitIndex, splitItem in enumerate(splitKey):
						if np.float_(splitKey[splitIndex])>=np.float_(ansObj[splitIndex]['0']) and np.float_(splitKey[splitIndex])<=np.float_(ansObj[splitIndex]['1']):
							test=1
						else:
							flag=1

					if flag==0:
						key=[0] * len(splitKey)
						for splitIndex, splitItem in enumerate(splitKey):
							key[splitIndex]=np.int_(splitKey[splitIndex])-np.int_(ansObj[splitIndex]['0'])
						worksheet[id].fullMat.itemset(tuple(key), it[0])

					it.iternext()



				thisItem.getSize(thisItem, worksheet)
				#newid=SquashMatrix(id)
				worksheet[id].Format_showequation=matrixText
				thisItem.Solution_temps.append(id)
				thisItem.Solution_variable_array[index-1]=id


	for index, item in enumerate(thisItem.Solution_variable_array):
		if thisItem.Solution_variable_array[index] == 'deleteme':
			del thisItem.Solution_variable_array[index]
			del thisItem.Solution_key_array[index]



"""
	This function looks at the variable array and replaces any vectors with an object that contains the appropriate numbers. A vector	\
	is entered through the use of two or three numbers along with semicolons such as 0:10 or 0:1:10. The first number is the beginning	\
	the second is the increment value and the third is the final value.	

	To accomplish this, the code tests to see if there are colons and then collects all of the text within the opening and closing brackets
	if it exists. It then parses that text to see if there are 2 or three entries. If there are two entries that are both table elements,
	then the solution is pulled by stepping through the table. If only one element is from a table or neither is, then the numbers are 
	taken by solving the entered items and stepping through at either 1 or the increment value entered.

	The text from the initial variable array is then replaced with the equation that contains the vector
"""

def replaceVectors(thisItem, worksheet, re):
	print('In the replace vectors function')

	varLength=len(thisItem.Solution_variable_array)
	vectorText=''
	re1=re.compile("^\s+|\s+$")

	# Loop through the solution variable array
	for index, item in enumerate(thisItem.Solution_variable_array):

    	# Find the colon that indicates a vector may be being created here
		if thisItem.Solution_variable_array[index]==":":
			startIndex=0
			stopIndex=len(thisItem.Solution_variable_array)-1
			sum=0

			# Step back and find where the vector started
			for a in range(index,-1,-1):
				temp=thisItem.Solution_variable_array[a]
				if temp=="[":
					startIndex=a
					break

			# Step forward and find where the vector text ends
			for tempIndex, tempItem in enumerate(thisItem.Solution_variable_array):
				temp=thisItem.Solution_variable_array[tempIndex]
				if temp=="]":
					stopIndex=tempIndex
					break


			# Grab all of the text within those parenthesis. This is the text used to create the vector
			vectorText=''
			for a in range(startIndex, stopIndex, 1):
				vectorText=vectorText+thisItem.Solution_variable_array[a]
				vector=vectorText.replace("[","")
				vector=vector.replace("]","")  
				parameters=vector.split(':')
				params=[0] * len(parameters)


			# remove any empty space from the parameters
			for parIndex, parItem in enumerate(parameters):
				parameters[parIndex] = re1.sub("", parameters[parIndex])
			
			
			# Create equations for each entry in the vector
			eqObj={	'Page_position':worksheet[thisItem.Format_id]['order'], 
					'Format_showtype':"InnerFunction", 
					'Original_id':thisItem.Original_id, 
					'equation':"TempEq="+parameters[0]	}
			id1=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)

			params[0]=worksheet[id1].fullMat[[0][0]]
			
			eqObj={	'Page_position':worksheet[thisItem.Format_id]['order'], 
					'Format_showtype':"InnerFunction", 
					'Original_id':thisItem.Original_id, 
					'equation':"TempEq="+parameters[1]	}
			id2=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
			params[1]=worksheet[id2].fullMat[[0][0]]

			if len(parameters)==3:
				eqObj={	'Page_position':worksheet[thisItem.Format_id]['order'], 
						'Format_showtype':"InnerFunction", 
						'Original_id':thisItem.Original_id, 
						'equation':"TempEq="+parameters[2]	}
				id3=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)
				params[2]=worksheet[id3].fullMat[[0][0]]


			# Create an equation to hold the vector
			eqObj={	'Page_position':worksheet[thisItem.Format_id]['order'], 
					'Format_showtype':"vector", 
					'Original_id':thisItem.Original_id, 
					'equation':"TempEq=0"	}
			id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
			

			# Create the show equation for the vector
			if len(parameters)==3:
				worksheet[id].Format_showequation="["+worksheet[id1].Format_showequation+":"+worksheet[id2].Format_showequation+":"+worksheet[id3].Format_showequation+"]"
			if len(parameters)==2:
				worksheet[id].Format_showequation="["+worksheet[id1].Format_showequation+":"+worksheet[id2].Format_showequation+"]"


			# If there are three parameters, step through the equation and set the appropriate values
			if len(params)==3:
				vecSize=1+np.int_(np.floor((np.float_(params[2])-np.float_(params[0]))/(np.float_(params[1]))))
				worksheet[id].fullMat=np.zeros((1,np.asscalar(vecSize)))
				counter=0
				for a in np.linspace(np.float_(params[0]), np.float_(params[2]), num=np.asscalar(vecSize), endpoint=True):
					worksheet[id].fullMat.itemset((0,counter), np.float_(params[0])+(np.float_(params[1])*counter))
					counter=counter+1

			

			elif len(params)==2:

				# Test both entries to see if one or more is a table cell
				re2=re.compile("^#Table")
				re3=re.compile("^#")
				flag1=0
				flag2=0
				if re2.match(parameters[0]):
					temp=re3.sub("", parameters[0])
					parameters[0]="#File"+this.fileid+temp
					flag1=1
				if re2.match(parameters[1]):
					temp=re3.sub("", parameters[1])
					parameters[1]="#File"+this.fileid+temp
					flag2=1

				# If both items are table cells, then we are stepping through a table and not creating a vector
				if flag1==1 and flag2==1:

					flag=0
					counter=0
					tempData=parameters[0].split(".")
					tableName=re3.sub("", tempData)
					c1=tempData[1].replace("$", "")
					c1=ord(c1)-65
					r1=tempData[2].replace("$","")

					tempdata=parameters[1].split(".")
					c2=(tempdata[1].replace("$",""))
					c2=ord(c2)-65
					r2=tempData[2].replace("$","")

					# Test the row and column numbers to make sure that they make sense
					if c1==c2 and r1!=r2:
						flag=1
						thisItem.setError(thisItem.Format_id, worksheet, "Vector1")

					if c1==c2 and r1>r2:
						flag=1
						thisItem.setError(thisItem.Format_id, worksheet, "Vector2")

					# If the numbers are OK
					if (c1==c2):
						for a in range(r1, r2, 1):
							key='0-'+counter
							worksheet[id].fullMat[key]=worksheet[tableName]['data'][a][c1]['real']
							worksheet[thisItem.Original_id]['Dependents'][tableName+'.'+tempData[1]+'.'+a]='1'
							counter=counter+1

					else:
						for a in range(c1, c2, 1):
							key='0-'+counter
							worksheet[id].fullMat[key]=worksheet[tableName]['data'][r1][a]['real']
							counter=counter+1
							worksheet[thisItem.Original_id]['Dependents'][tableName+'.'+ord(65+a)+'.'+r1]='1'

					worksheet[thisItem.Format_id]['Dependents'][tempData[0].replace('#','')]='1'

				
				# If only one item is a table name, then we are simply using that index as a number
				else: 
					counter=0
					vecSize=1+np.int_(np.floor((np.float_(params[1])-np.float_(params[0]))))
					worksheet[id].fullMat=np.zeros((1,np.asscalar(vecSize)))
					for a in np.linspace(np.float_(params[0]), np.float_(params[1]), num=np.asscalar(vecSize), endpoint=True):
						worksheet[id].fullMat.itemset((0,counter), np.float_(params[0])+counter)
						counter=counter+1


			worksheet[id].Format_size="1x"+str(counter)
			thisItem.Solution_variable_array[startIndex]=id;

			try:
				thisItem.Solution_key_array[stopIndex+1]
				if thisItem.Solution_key_array[stopIndex+1] == '1': 
					worksheet[id].Units_units=thisItem.Solution_variable_array[stopindex+1]; 
					worksheet[id].Format_showequation=worksheet[id].Format_showequation+" "+worksheet[id].Units_units
					del thisItem.Solution_variable_array[stopIndex+1]
					del thisItem.Solution_key_array[stopIndex+1]
			except:
				print()

			for a in range(stopIndex, startIndex, -1):
				del thisItem.Solution_variable_array[a] 
				del thisItem.Solution_key_array[a]

			del worksheet[id1]
			del worksheet[id2]
			if len(parameters)==3:
				del worksheet[id3]
					

				

"""

	Users are allowed to enter a matrix by hand. This function replaces those hand entered variables with temporary names and stores the values in temporary equation objects.
	The token for the equation is put in its place. This is done so that when the PostFix is created, the token can be handled and not the input item.

"""

def replaceMatrices(thisItem, worksheet, re):
	print('In the replace matrices function')

	varLength=len(thisItem.Solution_variable_array)


	for index, item in enumerate(thisItem.Solution_variable_array):
		if thisItem.Solution_variable_array[index]=="":
			del thisItem.Solution_variable_array[index]
		if thisItem.Solution_variable_array[index]==" ":
			del thisItem.Solution_variable_array[index]



	for index, item in enumerate(thisItem.Solution_variable_array):

		if thisItem.Solution_variable_array[index]=="[":
			
			matrixText=''
			flag=0
			index2=index
			sum=0
			showEquation='['
			varLength=len(thisItem.Solution_variable_array)


			# Step through the solution array and add everything in brackets into the the matrix text
			while flag==0 and index2<=varLength:
				matrixText=matrixText+thisItem.Solution_variable_array[index2]
				if thisItem.Solution_variable_array[index2]=="[":
					sum=sum+1
				elif thisItem.Solution_variable_array[index2]=="]":
					sum=sum-1
					if sum<1:
						flag=1
				
				thisItem.Solution_variable_array[index2]='deleteme'
				index2=index2+1

			# Format the matrix text and create the equation
			print("The matrix text is "+matrixText)
			matrixText=matrixText.replace(";;",';');
			matrixText=matrixText.replace(',,',',');
			matrixText=matrixText.replace(',;,',';');
			eqObj={	'Page_position':worksheet[thisItem.Format_id].order, 
					'Format_showtype':'InnerFunction', 
					'Original_id':thisItem.Original_id, 
					'equation':'MatEq='+matrixText,
					'Format_name':'Matrix', 
					'Format_showequation':matrixText, 
					'Format_showtype':'matrix'	} 
			id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj);
			thisItem.Solution_temps.append(id);
			matrixText=matrixText.replace(']','');
			matrixText=matrixText.replace('[','');



			# If the text has a second row, format the matrix appropriately
			re1=re.compile(";")
			if re1.search(matrixText):
				arrayText=matrixText.split(';')
				temp=arrayText[0].split(',')
				rows=len(arrayText)
				columns=len(temp)
				rA=np.zeros((rows, columns))
				iA=np.zeros((rows, columns))
				rowText=[0]*len(arrayText)

				for rowIndex, rowItem in enumerate(arrayText):
					rowText[rowIndex]=arrayText[rowIndex].split(',')
					for colIndex, colItem in enumerate(rowText[rowIndex]):

						# If the text is a number, simply place it in the matrix
						if rowText[rowIndex][colIndex].isnumeric():
							#rowText[rowIndex][colIndex]
							rA[rowIndex, colIndex]=rowText[rowIndex][colIndex]
							iA[rowIndex, colIndex]=0
							if colIndex==len(rowText):
								showEquation=showEquation+''+rowText[rowIndex][colIndex]+';'
							else:
								showEquation=showEquation+''+rowText[rowIndex][colIndex]+','

						else:
							# If the item is not a number, but is a know equation -  from a previous replace
							try:
								worksheet[rowText[rowIndex][colIndex]]
								rA[rowIndex, colIndex]=worksheet[rowText[rowIndex][colIndex]].fullMat[[0][0]]
								if colIndex==len(rowText):
									showEquation=showEquation+''+worksheet[rowText[colIndex]].Format_showequation+';'
								else:
									showEquation=showEquation+''+worksheet[rowText[colIndex]].Format_showequation+','

							# If the item is text, then it needs to be solved
							except:
								eqObj={	'Page_position':worksheet[thisItem.Format_id].order, 
										'Format_showtype':"InnerFunction", 
										'Format_name':"TempEq",
										'Original_id':thisItem.Original_id, 
										'equation':"TempEq="+rowText[rowIndex][colIndex]	}
								id1=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj);
								rA[rowIndex, colIndex]=worksheet[id1].fullMat[[0][0]]
								worksheet[thisItem.Original_id].Solution_temps.append(id1)
								if colIndex==len(rowText):
									showEquation=showEquation+''+worksheet[id1].Format_showequation+';'
								else:
									showEquation=showEquation+''+worksheet[id1].Format_showequation+','


				worksheet[id].fullMat=rA
				worksheet[id].Format_size=str(len(arrayText))+"x"+str(len(rowText));
				worksheet[id].Format_numinds=2;

			# If the text has no ";" and is only a single row, format the text
			else:
				arrayText=matrixText.split(',')
				worksheet[id].fullMat=np.zeros((1,len(arrayText)), dtype=complex)
				for rowIndex, rowItem in enumerate(arrayText):
					key1=0
					key2=rowIndex

					try:
						worksheet[arrayText[rowIndex]]
						worksheet[id].fullMat[[key1][key2]]=worksheet[arrayText[rowIndex]].fullMat[[0][0]]
						showEquation=showEquation+''+worksheet[arrayText[rowIndex]].Format_showequation+','

					except:

						# If the text is a number, simply place it in the matrix
						thisText = cadwolfNumTest.match(thisItem.Solution_variable_array[index])
						if thisText!=None:
							worksheet[id].fullMat[[key1][key2]]=float(arrayText[rowIndex])
							#worksheet[id].fullMat=np.append(worksheet[id].fullMat, float(arrayText[rowIndex]))

#							worksheet[id].fullMat[[key1, key2]]=float(arrayText[rowIndex])
#							worksheet[id].Solution_imag[[key1, key2]]=0
							showEquation=showEquation+''+arrayText[rowIndex]+','


						# If the item is text, then it needs to be solved
						else:
							eqObj={	'Page_position':worksheet[thisItem.Format_id].order, 
									'Format_showtype':"InnerFunction", 
									'Format_name':"MatEq",
									'Original_id':thisItem.Original_id, 
									'equation':"MatEq="+arrayText[rowIndex]	}
							id1=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj);
							worksheet[id].fullMat.itemset((key1, key2), worksheet[id1].fullMat[[0][0]])
							worksheet[thisItem.Original_id].Solution_temps.append(id1)
							showEquation=showEquation+''+worksheet[id1].Format_showequation+','

				worksheet[id].Format_size='1x'+str(len(arrayText))
				worksheet[id].Format_numinds=1;


			showEquation=re.sub(',$', '', showEquation)
			showEquation=re.sub(';$', '', showEquation)
			worksheet[id].Format_showequation=showEquation+']'
			thisItem.showArray(worksheet[id])
			thisItem.Solution_variable_array[index]=id

	
			if thisItem.Solution_key_array[index+1] == '1':
				worksheet[id]['Units_units']=thisItem.Solution_variable_array[index+1]
				worksheet[id]['Format_showequation']=worksheet[id]['Format_showequation']+" "+worksheet[id]['Units_units']
				del thisItem.Solution_variable_array[index+1]
				del thisItem.Solution_key_array[index+1]

			for tempIndex in range(len(thisItem.Solution_variable_array)-1, 0, -1):
				if thisItem.Solution_variable_array[tempIndex]=='deleteme':
					del thisItem.Solution_variable_array[tempIndex]
					del thisItem.Solution_key_array[tempIndex]




	for tempIndex in range(len(thisItem.Solution_variable_array)-1, 0, -1):
		if thisItem.Solution_variable_array[tempIndex]=='deleteme':
			del thisItem.Solution_variable_array[tempIndex]
			del thisItem.Solution_key_array[tempIndex]






"""
	This function replaces numbers in the variable array with objects. If the items after the numbers are units, then they
	are set as the units for that number and deleted from the array.
"""

def replaceNumbers(thisItem, worksheet, re):

	print('In the replace numbers function')

	varLength=len(thisItem.Solution_variable_array)

	for index, item in enumerate(thisItem.Solution_variable_array):

		testString = cadwolfNumTest.match(thisItem.Solution_variable_array[index])
		if testString!=None and len(item)>0:
			rA=np.zeros((1,1))
			iA=np.zeros((1,1))
			full=np.zeros((1,1), dtype=complex)
			eqObj={	'Page_position':worksheet[thisItem.Original_id].order,
					'Format_showtype':"number",
					'Original_id':thisItem.Format_id,
					'Format_name':"NumEq",
					'equation':"NumEq="+thisItem.Solution_variable_array[index]	}
			id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
			thisItem.Solution_temps.append(id)
			rA[0,0]=thisItem.Solution_variable_array[index]
			full[[0][0]]=np.float(thisItem.Solution_variable_array[index])
			worksheet[id].Solution_real=rA
			worksheet[id].Solution_imag=iA
			worksheet[id].fullMat=full
			#print("The number is "+str(thisItem.Solution_variable_array[index])+' - '+str(worksheet[id].Solution_real)+' - '+str(worksheet[id].Solution_real[0,0]))
			worksheet[id].Format_showequation=thisItem.Solution_variable_array[index]
			worksheet[id].Models_units='NA'
			worksheet[id].Models_quantities='NA'
			worksheet[id].Models_dimensions="1x1"
			worksheet[id].Format_size="1x1"
			del thisItem.Solution_variable_array[index]
			thisItem.Solution_variable_array.insert(index, id)



			try:
				thisItem.Solution_key_array[index+1]

				if thisItem.Solution_key_array[index+1]=='1' or thisItem.Solution_key_array[index+1]==1:
					worksheet[id].Units_units=copy.copy(thisItem.Solution_variable_array[index+1])
					worksheet[id].Format_showequation=worksheet[id].Format_showequation+copy.copy(thisItem.Solution_variable_array[index+1])
					print('The units are '+str(worksheet[id].Units_units))
					worksheet[id].Models_units=worksheet[id].Units_units
					#worksheet[id].Format_showequation=worksheet[id].Format_showequation+" "+thisItem.showFraction(worksheet[id].Units_units)
					del(thisItem.Solution_variable_array[index+1]) 
					del(thisItem.Solution_key_array[index+1])
			except:
				print()


"""

	This function replaces all table entries with the appropriate value. The tables are sent to this solver as an object
	with indices that match their row and column index. This function merely pulls that number out and sets it as the 
	value of the object that is replaced in the variable array.
"""


def replaceTables(thisItem, worksheet, re):

	print('In the replace tables function')

	varLength=len(thisItem.Solution_variable_array)
	re1=re.compile("^#Table")
	re2=re.compile("^\#File[0-9]+Table[0-9]+")

	for index, item in enumerate(thisItem.Solution_variable_array):
    	
    	# If the text starts with just a table name, fix it to have this file number there too
		if re1.search(thisItem.Solution_variable_array[index]):
			tempData=thisItem.Solution_variable_array[index].split(".")
			temp=tempData[0].replace('#')
			thisItem.Solution_variable_array[index]="#File"+thisItem.fileid+temp+'.'+tempdata[1]+'.'+tempdata[2]
			print("I fixed "+str(thisItem.Solution_variable_array[index]))

		# Now that the table name has been fixed, check the text and pull table data
		if re2.search(thisItem.Solution_variable_array[index]):
			print("I matched "+str(thisItem.Solution_variable_array[index])+" as a table")
			dependent=copy.deepcopy(re.sub('#','', thisItem.Solution_variable_array[index]))
			tempData=thisItem.Solution_variable_array[index].split(".")
			tableName=re.sub('#', '', tempData[0])
			print("The table name is "+str(tableName))
			colNumber=tempData[1].replace("$","")
			colNumber=ord(colNumber)-65
			rowNumber=tempData[2].replace("$","")
			eqObj={	"Page_position":worksheet[thisItem.Format_id].order,
					"Format_showtype":"InnerFunction",
					"equation":"Temp=0"	}
			id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
			worksheet[id].fullMat=np.zeros((1,1), dtype=complex)
			print('The row number and col number are '+str(rowNumber)+' - '+str(colNumber))
			worksheet[id].fullMat[[0][0]]=worksheet[tableName].content['data'][np.int_(rowNumber)][np.int_(colNumber)]['real']+(worksheet[tableName].content['data'][np.int_(rowNumber)][np.int_(colNumber)]['imag']*1j)
			worksheet[id].Units_units=worksheet[tableName].content['data'][np.int_(rowNumber)][np.int_(colNumber)]['units']
			worksheet[id].Format_name=thisItem.Solution_variable_array[index].replace('#','')
			worksheet[id].Format_showtype="table"
			worksheet[id].Format_showequation=thisItem.Solution_variable_array[index].replace('#','')
			thisItem.Solution_temps.append(worksheet[id]['Format_id'])
			thisItem.Solution_variable_array[index]=id
			worksheet[thisItem.Original_id].Dependents[dependent]='1'
"""

	This is the function that checks to see if the section of the variable array has an imaginary part.

"""

def checkImaginary(thisItem, worksheet):
	print('In check imaginary function')

	for index, item in enumerate(thisItem.Solution_variable_array):

		if thisItem.Solution_variable_array[index]=="i":
			
			# Take the real part of the current solution and place it in the imaginary part
			thisEq=thisItem.Solution_variable_array[index-1]
			worksheet[thisEq].fullMat[[0][0]]=worksheet[thisEq].fullMat[[0][0]]*1j
			worksheet[thisEq].Format_showequation=str(np.float(np.imag(worksheet[thisEq].fullMat[0,0])))+" i";

			# If the previous item is subtraction or addition and the item before that is an equation
			try:
				worksheet[thisItem.Solution_variable_array[index-3]]
				if thisItem.Solution_variable_array[index-2]=="+" or thisItem.Solution_variable_array[index-2]=="-":
					min2=thisItem.Solution_variable_array[index-2]
					min3=thisItem.Solution_variable_array[index-3]
					if min2=="-":
						worksheet[min3].fullMat[[0][0]]=np.add(worksheet[min3].fullMat[[0][0]],-1*worksheet[thisEq].fullMat[[0][0]])
					else:
						worksheet[min3].fullMat[[0][0]]=np.add(worksheet[min3].fullMat[[0][0]],worksheet[thisEq].fullMat[[0][0]])
					del thisItem.Solution_variable_array[index]
					del thisItem.Solution_variable_array[index-1]
					del thisItem.Solution_variable_array[index-2]
					worksheet[min3].showSolution(worksheet[min3], worksheet)
					worksheet[min3].Format_showequation=str(np.float(np.real(worksheet[min3].fullMat[[0][0]])))+''+str(min2)+''+str(np.float(np.imag(worksheet[thisEq].fullMat[[0][0]])))+" i"
				else:
					del thisItem.Solution_variable_array[index]
					worksheet[min3].showSolution(worksheet[min3], worksheet)

			except:
				print("")



"""
	This function looks for any independent negative signs and accounts for them. This is done for four cases - a negative at the 
	beginning, a negative beforea variable or number, plus a negative, and a negative before a parenthesis.
"""


def checkNegatives(thisItem, worksheet):
	print('In check negatives function')

	for index, item in enumerate(thisItem.Solution_variable_array):
		if index < len(thisItem.Solution_variable_array)-1:
			v1=thisItem.Solution_variable_array[index];
			v2=thisItem.Solution_variable_array[index+1];
			if index>0:
				v3=thisItem.Solution_variable_array[index-1]
			else:
				v3='#'

			try:
				worksheet[v2]

				if v1=="-" and index==0:
					eqObj={	'Page_position':worksheet[thisItem.Format_id].order, 
							'Format_showtype':"FirstNeg",  
							'Page_parentid':thisItem.Page_parentid, 
							'Page_topparentid':thisItem.Page_topparentid, 
							'Original_id':thisItem.Format_id, 
							'equation':"CheckNeg=-1", 
							'Format_showequation':"here\-", 
							'Format_size':"1x1", 
							'Format_name':"CheckNeg", 
							'Format_showvalue':"FirstNeg"	}
					newID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
					worksheet[newID].fullMat=np.zeros((1,1))
					worksheet[newID].Format_showequation="-"
					worksheet[newID].fullMat[[0][0]]=-1
					thisItem.Solution_variable_array[index]=newID
					thisItem.Solution_variable_array.insert(index+1, "*")


				elif v1=="-" and (v3=="+" or v3=="-" or v3=="//" or v3=="*" or v3=="(" or v3=="[" or v3=="#"):
					eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
							'Format_showtype':"FirstNeg",  
							'Page_parentid':thisItem.Page_parentid, 
							'Page_topparentid':thisItem.Page_topparentid, 
							'Original_id':thisItem.Format_id, 
							'equation':"TempEq=-1", 
							'Format_showequation':"here\-", 
							'Format_size':"1x1", 
							'Format_name':"CheckNeg",
							'Format_showvalue':"Negative"	}
					newID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
					worksheet[newID].fullMat=np.zeros((1,1))
					worksheet[newID].Format_showequation="-"
					worksheet[newID].fullMat[[0][0]]=-1
					thisItem.Solution_variable_array[index]=newID
					thisItem.Solution_variable_array.insert(index+1, "*")

				elif v1=="-" and v3=="+":
					del thisItem.Solution_variable_array[index-1]

				elif (v1=="-" and v2=="(" and index==0) or (v1=="-" and v2=="(" and (v3=="(" or v3==")")):

					eqObj={	Page_position:worksheet[thisItem.Format_id].order, 
							'Format_showtype':"FirstNeg",  
							'Page_parentid':thisItem.Page_parentid, 
							'Page_topparentid':thisItem.Page_topparentid, 
							'Original_id':thisItem.Format_id, 
							'equation':"TempEq=-1", 
							'Format_showequation':"here\-", 
							'Format_size':"1x1",
							'Format_name':"CheckNeg",
							'Format_showvalue':"Negative"	}
					newID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
					worksheet[newID].fullMat=np.zeros((1,1))
					worksheet[newID].fullMat[[0][0]]=-1
					worksheet[newID].Format_showequation="-"
					thisItem.Solution_variable_array[index]=newID
					thisItem.Solution_variable_array.insert(index+1, "*")
			except:
				print("")


"""

	This function checks to make sure that all the items in the variable array have either been replaced by an object or
	are mathematical operations or parenthesis. If that is not the case, then the equation is flagged as an error.

"""



def checkEquation(thisItem, worksheet):

	print('In check equation function')

	for index, item in enumerate(thisItem.Solution_variable_array):

		test=thisItem.Solution_variable_array[index]

		try:
			worksheet[item]
		except:
			if test!="+" and test!="-" and test!="*" and test!="/" and test!="" and test!="(" and test!=")" and test!="":
				thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format2", test, "NA")

		if thisItem.Errors_flag==1 or worksheet[thisItem.Original_id].Errors_flag==1:

			if cadwolfEventType=="solvePlotData":
				eventErrorFlag=1; 
				eventError=worksheet[thisItem.Original_id].Errors_errors
				thisItem.passPlotData(plotObject, PlotID, DataID, 'all')
			else:
				thisItem.Format_showequation="Error"
				thisItem.showEquation(thisItem, worksheet)
				thisItem.returnEquation(thisItem, worksheet, cadwolfEventType)





"""
	This function looks at the units for each equation object in an equation. It parses out the units in question and
	converts the entered units into an array that holds the base units. These base units are later used in multiplication
	and division of complex objects.
	The overall process used to handle units starts with this function and follows the following process.
	1. The units are parsed out into an array which holds each unit and math symbol independently
	2. Each part of the unit array is changed into its metric, unscaled, base unit.
	3. These units are then further decomposed. This is done by taking complex units such as Newtons and breaking them
		down into base units such as kg*m/s^2. This creates the base array and string.
	4. The base array and string are used in mathematical operations to manipulate the units
	5. After all the math has been performed on the equation, the base units are recomposed into any more complex units
		that they may represent.
"""

def unitArray(thisItem, worksheet, re):
	print('In the unit array function')

	varLength=len(thisItem.Solution_variable_array)

	for index, item in enumerate(thisItem.Solution_variable_array):

		try:
			worksheet[thisItem.Solution_variable_array[index]]

			try:
				worksheet[thisItem.Solution_variable_array[index]].Units_units
			except:
				worksheet[thisItem.Solution_variable_array[index]].Units_units=''

			thisTemp=worksheet[thisItem.Solution_variable_array[index]].Units_units
			thisTemp=str(thisTemp).replace("{","?{?")
			thisTemp=str(thisTemp).replace("}","?}?")
			thisTemp=str(thisTemp).replace("(","?(?")
			thisTemp=str(thisTemp).replace(")","?)?")
			thisTemp=str(thisTemp).replace("/","?/?")
			thisTemp=str(thisTemp).replace("*","?*?")
			thisTemp=str(thisTemp).replace("^","?^?")
			thisTemp=str(thisTemp).replace("??","?")

			unitArray=thisTemp.split("?")
			worksheet[thisItem.Solution_variable_array[index]].Units_unit_array=unitArray


		except:
			print("")


"""
	This function finds the metric equivalent of the units entered for each individual component of the equation. It then converts the number for 
	that component accordingly. It then looks to see if there are any powers and records that information to be used in the creation of the base array.

	Step 1: Creating the power array 
	For each of the items in the unit array, if you come across a division sign, flip the sign for each unit beneath the sign. This is needed 
	for manually entered units such as kg*m/s^2 instead of N.

	Step 2: Converting the numbers and units to their metric equivalents 
	Look at each item in the units array and see if it is a known unit. If it is, pull the scaled and converted numbers. If the item that 
	follows the unit is a power sign, then increase the power array by the appropriate amount.

	Step 3: Taking care of powers
	This takes care of the case where there is a (m^2)^3

"""



def scaleUnits(thisItem, worksheet, re):
	print('In the scale units function')

	varLength=len(thisItem.Solution_variable_array)

	print('* '+str(thisItem.Solution_variable_array))

	for index, item in enumerate(thisItem.Solution_variable_array):

		try:
			worksheet[thisItem.Solution_variable_array[index]]

			for unitIndex, unitItem in enumerate(worksheet[thisItem.Solution_variable_array[index]].Units_base_array):
				worksheet[thisItem.Solution_variable_array[index]].Units_base_array[unitItem]=np.int_(worksheet[thisItem.Solution_variable_array[index]].Units_base_array[unitItem])

			#print('The number and units are '+str(worksheet[thisItem.Solution_variable_array[index]].fullMat)+' - '+str(worksheet[thisItem.Solution_variable_array[index]].Units_units))
			#print(worksheet[thisItem.Solution_variable_array[index]].Units_unit_array)
			#print(worksheet[thisItem.Solution_variable_array[index]].Units_base_array)

			thisID=worksheet[thisItem.Solution_variable_array[index]].itemid
			unitArray=worksheet[thisItem.Solution_variable_array[index]].Units_unit_array

			scaledArray=copy.copy(unitArray)
			convArray=copy.copy(unitArray)
			powerArray=copy.copy(unitArray)
			signArray=copy.copy(unitArray)
			status=1

			# This sets the status which is related to being above or below a division
			for unitIndex in range(0, len(unitArray), 1):
				powerArray[unitIndex]=copy.copy(status)
				if unitArray[unitIndex]=="/":
					status=status*-1
					thisIndex=copy.copy(unitIndex)

					flag=0
					while thisIndex+1<=len(unitArray) and flag==0:
						powerArray[thisIndex]=copy.copy(status)
						if unitArray[thisIndex]==")":
							flag=1
						thisIndex=thisIndex+1


			# Set up the conversion factor
			worksheet[thisItem.Solution_variable_array[index]].Units_power_array=copy.copy(powerArray)
			tempFlag=0
			unitIndex=0
			for unitIndex in range(0, len(unitArray), 1):
				flag=0

				for scaleIndex, scaleItem in enumerate(cadwolfScaleUnits):

					if unitArray[unitIndex]==cadwolfScaleUnits[scaleIndex]['unit']:

						if cadwolfScaleUnits[scaleIndex]['unit']=="C" or cadwolfScaleUnits[scaleIndex]['unit']=="F" or cadwolfScaleUnits[scaleIndex]['unit']=="R":
							scaledArray[unitIndex]=cadwolfScaleUnits[scaleIndex]['unit']
							tempFlag=1
						else:
							scaledArray[unitIndex]=cadwolfScaleUnits[scaleIndex]['conv_factor']

						convArray[unitIndex]=cadwolfScaleUnits[scaleIndex]['conv_unit']
						convUnit=cadwolfScaleUnits[scaleIndex]['conv_unit']
						worksheet[thisItem.Solution_variable_array[index]].Units_units=convUnit
						worksheet[thisItem.Solution_variable_array[index]].Units_conv_units=scaleIndex;
						worksheet[thisItem.Solution_variable_array[index]].Units_quantity=cadwolfScaleUnits[scaleIndex]['quantity'];
						worksheet[thisItem.Solution_variable_array[index]].Units_multiplier=cadwolfScaleUnits[scaleIndex]['conv_factor'];
						try:
							unitArray[unitIndex+1]
							if unitArray[unitIndex+1]=="^":
								powerArray[unitIndex]=unitArray[unitIndex+2]*powerArray[unitIndex]
								worksheet[thisItem.Solution_variable_array[index]].Units_units=str(worksheet[thisItem.Solution_variable_array[index]].Units_units)+'^'+str(np.asscalar(unitArray[unitIndex+2]))
						except:
							test=1							
						
						worksheet[thisItem.Solution_variable_array[index]].Units_power_array=powerArray
						signArray[unitIndex]=powerArray[unitIndex];


			#print('The conversion factor is '+str(worksheet[thisItem.Solution_variable_array[index]].Units_multiplier))
			
			# Build up the equation to be solved to get the conversion factor
			equation=''
			replace=''
			for scaleIndex in range(0, len(scaledArray), 1):
				try:
					scaledArray[scaleIndex+1]
					if scaledArray[scaleIndex+1]=="^":
						x=scaledArray[scaleIndex]
						y=scaledArray[scaleIndex+2];
						if scaledArray[scaleIndex]=="C" or scaledArray[scaleIndex]=="F" or scaledArray[scaleIndex]=="K" or scaledArray[scaleIndex]=="R":
							thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format11", "", "")
						else:
							replace=x**y
						scaledArray[scaleIndex]=replace
						scaledArray[scaleIndex+1]=''
						scaledArray[scaleIndex+2]=''
					equation=str(equation)+''+str(scaledArray[scaleIndex])
				except:
					equation=str(equation)+''+str(scaledArray[scaleIndex])


			if equation=="":
				equation="1"

			if re.search('\^', equation):
				tempEq=re.sub('\(', '', equation)
				tempEq=re.sub('\)', '', tempEq)
				tempEq=tempEq.split('^')
				equation="math.pow("+str(tempEq[0])+','+str(tempEq[1])+')'

			if equation!="NA=C" and equation!="NA=F" and equation!="NA=K" and equation!="NA=R" and tempFlag==0:
				worksheet[thisItem.Solution_variable_array[index]].Units_multiplier=eval(equation)

			elif tempFlag==1:
				thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format11", "", "")


			worksheet[thisItem.Solution_variable_array[index]].Units_scaled_array=copy.copy(scaledArray)
			worksheet[thisItem.Solution_variable_array[index]].Units_conv_array=copy.copy(convArray)
			number=np.float_(np.real(worksheet[thisItem.Solution_variable_array[index]].fullMat[[0,0]]))

			if equation=="NA=C":
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.add(273.15, worksheet[thisItem.Solution_variable_array[index]].fullMat)
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.multiply(worksheet[thisItem.Solution_variable_array[index]].Units_multiplier, worksheet[thisItem.Solution_variable_array[index]].fullMat)
			
			elif equation=="NA=F":
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.add(459.67, worksheet[thisItem.Solution_variable_array[index]].fullMat)
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.multiply(5/9, worksheet[thisItem.Solution_variable_array[index]].fullMat)
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.multiply(worksheet[thisItem.Solution_variable_array[index]].Units_multiplier, worksheet[thisItem.Solution_variable_array[index]].fullMat)

			elif equation=="NA=R":
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.multiply(0.555555555555, worksheet[thisItem.Solution_variable_array[index]].fullMat)
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.multiply(worksheet[thisItem.Solution_variable_array[index]].Units_multiplier, worksheet[thisItem.Solution_variable_array[index]].fullMat)

			elif equation=="NA=K":			 
				worksheet[thisItem.Solution_variable_array[index]].fullMat=np.multiply(worksheet[thisItem.Solution_variable_array[index]].Units_multiplier, worksheet[thisItem.Solution_variable_array[index]].fullMat)

			else:
				if worksheet[thisItem.Solution_variable_array[index]].Units_multiplier!=1:
					worksheet[thisItem.Solution_variable_array[index]].fullMat=np.multiply(worksheet[thisItem.Solution_variable_array[index]].Units_multiplier, worksheet[thisItem.Solution_variable_array[index]].fullMat)

		except:
			print()

	print('- '+str(thisItem.Solution_variable_array))


"""
	This function looks at the units for an object and looks for complex units in the base array. For example, a N would be decomposed in 1 kg, 
	1 m, and -2 s.This is done so that if the user enters "kg*m/s^2" for units instead of "N", then the code will still know that those are the 
	same units. It then creates the base array.

	Step 1: Initiate the new base array to zero everywhere

	Step 2: For each individual unit in the unit array, compare it to the complex units in the parseUnits object. If it matches, then increase
	the base units for the corresponding complex unit by an amount equal to those base units by the power of the complex unit.

	For example, if you come across N^2, then the units added to the base array are 2 kg, 2 m, and -4 s.

	Step 3 : For each individual unit in the unit array, compare it to the units in the scaled array.

"""

def decomposeUnits(thisItem, worksheet):

	print('In the decompose units function')

	varLength=len(thisItem.Solution_variable_array)

	for index, item in enumerate(thisItem.Solution_variable_array):



		try:
			worksheet[item]

		except:
			print("I didnt get "+str(thisItem.Solution_variable_array))

		else:
			unitArray=worksheet[thisItem.Solution_variable_array[index]].Units_conv_array
			powerArray=worksheet[thisItem.Solution_variable_array[index]].Units_power_array
			newArray={}

			for unitIndex in range(0, len(cadwolfUnitList), 1):
				newArray[cadwolfUnitList[unitIndex]]=0


			for unitIndex in range(0, len(unitArray), 1):
				for parseIndex, parseItem in enumerate(cadwolfParseUnits):
					if unitArray[unitIndex]==cadwolfParseUnits[parseIndex]['base_unit']:
						for unitListIndex in range(0, len(cadwolfUnitList), 1):
							cu=cadwolfUnitList[unitListIndex]
							newArray[cu]=np.asscalar(np.int_(np.float(cadwolfParseUnits[parseIndex][cu])*np.float(powerArray[unitIndex])+np.float(newArray[cu])))


			worksheet[thisItem.Solution_variable_array[index]].Units_base_array=newArray



"""
	This function looks at the base array object for each equation item and creates units when adding and subtracting numbers.
"""


def getBaseString(thisItem, worksheet):

	print('In the get base string function')

	varLength=len(thisItem.Solution_variable_array)

	for index, item in enumerate(thisItem.Solution_variable_array):

		thisModel=''

		try:
			worksheet[thisItem.Solution_variable_array[index]]

			for unitIndex in range(0, len(cadwolfUnitList)-1, 1):
				
				testItem=worksheet[thisItem.Solution_variable_array[index]].Units_base_array[cadwolfUnitList[unitIndex]]
				if testItem==NaN:
					thisModel=thisModel+'0' 
				else:
					thisModel=thisModel+testItem

			worksheet[thisItem.Solution_variable_array[index]].Units_base_string=thisModel

		except:
			print()


"""
	Solving an equation involves the five functions below. The primary function is the UpdateEquation one, which is called 
	anytime an equation is changed or a variable is changed that the equation uses. This function calls the function above 
	to parse the equation by separating the variables within the equation, obtaining their values and units from the variable 
	table, and then creating the numerical, unit, and full model by calling those functions.

	Once those functions are called, these functions are called to solve the equation. First, the ConvertToPost function is 
	called to take the infix notation of the equation and make the postfix style equation. This function creates both a 
	numerical postfix and a postfix with units. The function holding the precedence of the operators is called from this 
	function. Then the function to solve the postfix equation is used. This function simply performs the numerical operations 
	that is defined by the symbol or words like sin or cos. 

	This function is one of the primary ones used to solve equations. It converts the entered equation from an infix 
	notation to an postfix one. This is a common tactic used in solving this sort of problem. This is accomplished by parsing 
	the equation into an array with each element contaning a variable, an operator, or a parenthesis. Once this is done, 
	the algorithm simply goes through each item in the array and places it into the proper postfix format.

"""




def convertToPostFix(thisItem, worksheet):

	print('In the convert to post function')

	varLength=len(thisItem.Solution_variable_array)
	stack=[]
	stackUnits=[]
	postFix=[]
	postFixUnits=[]
	stackpop=''
	stackpopUnits=''

	for index, item in enumerate(thisItem.Solution_variable_array):

		test=thisItem.Solution_variable_array[index]

		if test=='+' or test=='-' or test=='*' or test=='/' or test=='//' or test=='^' or test=='#':
			
			try:
				stackpop=stack.pop()
				stack.append(stackpop)
				while len(stack)!=0 and thisItem.thisOperatorPrecedence(stackpop)>=thisItem.thisOperatorPrecedence(test):
					# postFix[len(postFix)]=stack.pop()
					postFix.append(stack.pop())
					stackpop=stack.pop() 
					stack.append(stackpop)

			except:
				print()

			stack.append(test)

		elif test=='(':
			stack.append(test)


		elif test==')':
			test=0
			stackpop=stack.pop()
			while stackpop!='(' and test==0:
				try:
					postFix.append(stackpop)
					stackpop=stack.pop()
				except:
					test=1

		else:
			postFix.append(test)
#			postFix[len(postFix)]=test

		print(str(postFix))


	try:
		stackpop=stack.pop()
		while stackpop:
			postFix.append(stackpop)  
			stackpop=stack.pop()
	except:
		print()

	thisItem.Solution_PostFix=postFix

	for postIndex in range(len(thisItem.Solution_PostFix)-1, 0, -1):
		if thisItem.Solution_PostFix[postIndex]=='':
			del thisItem.Solution_PostFix[postIndex]





"""
	This function solves the post fix string created above from the infix equation. This is done by pulling numbers from the string until
	an operator is reached. At that time the most recent two numbers are pulled and the operator in question is performed for functions
	in which one parameter is required, only one is pulled.	

"""

def solvePostFix(thisItem, worksheet):

	print('In the solve post function')

	postFix=thisItem.Solution_PostFix
	stack=[]

	if len(postFix)<2:
		
		print("Post fix had a length of less than 2")
		try:
			worksheet[postFix[0]]
			thisItem.Solution_real=worksheet[postFix[0]].Solution_real
			thisItem.Solution_imag=worksheet[postFix[0]].Solution_imag
			thisItem.fullMat=worksheet[postFix[0]].fullMat
			thisItem.Solution_convsol=worksheet[postFix[0]].Solution_convsol
			thisItem.Solution_realdefault=worksheet[postFix[0]].Solution_realdefault
			thisItem.Solution_imagdefault=worksheet[postFix[0]].Solution_imagdefault
			thisItem.Format_numinds=worksheet[postFix[0]].Format_numinds
			thisItem.Format_size=worksheet[postFix[0]].Format_size
			thisItem.Units_units=worksheet[postFix[0]].Units_units
			thisItem.Units_conv_units=worksheet[postFix[0]].Units_conv_units
			thisItem.Units_multiplier=worksheet[postFix[0]].Units_multiplier
			thisItem.Units_quantity=worksheet[postFix[0]].Units_quantity
			thisItem.Units_base_array=worksheet[postFix[0]].Units_base_array
			
		except:
			print()


	else:

		# Loop through the post fix and create the stack
		for postIndex in range(0, len(postFix), 1):
			if thisItem.Errors_flag==0:
				if postFix[postIndex]=="-" or postFix[postIndex]=="+" or postFix[postIndex]=="*" or postFix[postIndex]=="#" or postFix[postIndex]=="/" or postFix[postIndex]=="//":
					stackpop1=stack.pop()
					stackpop2=stack.pop()
					temp=postFix[postIndex]
					solution=thisItem.solveMath(thisItem, temp, stackpop1, stackpop2, thisItem.Format_id, worksheet)
					stack.append(solution)
					if solution=="Error":
						break
				else:
					stack.append(postFix[postIndex])

		
		try:
			worksheet[solution]
			if thisItem.Format_type!=3 and thisItem.Errors_flag==0:
				thisItem.Units_units=worksheet[solution].Units_units
				thisItem.Units_base_array=worksheet[solution].Units_base_array
				thisItem.Units_quantity=worksheet[solution].Units_quantity
				thisItem.Format_size=worksheet[solution].Format_size
				thisItem.Format_numinds=worksheet[solution].Format_numinds
				thisItem.Solution_real=worksheet[solution].Solution_real
				thisItem.Solution_imag=worksheet[solution].Solution_imag
				thisItem.fullMat=worksheet[solution].fullMat
				thisItem.Solution_realdefault=worksheet[solution].Solution_realdefault
				thisItem.Solution_imagdefault=worksheet[solution].Solution_imagdefault

				print('-The base array is ...')
				print(str(worksheet[solution].Units_base_array))


			elif thisItem.Format_type==3 and thisItem.Errors_flag==0:
				thisItem.fullMat=worksheet[solution].fullMat
				thisItem.Solution_real=worksheet[solution].Solution_real
				thisItem.Solution_imag=worksheet[solution].Solution_imag

		except:
			print()
"""
	This function takes the base array and determines the units from that. This is necessary because users may add Newtons to
	kg * meters per seconds squared. Users may also multiply kg by meters by seconds square.  Before that happens, the units 
	are decomposed into the base units, the math is done, and then the base array is looked at here to determine the final units.

	Step 1: Create a string from the current base array

	Step 2: Go through the parse array of complex units and create a string from those base units as well. Compare that
	string to the base string of the final equation. Note that regular units like s for seconds are included in the parse
	object. That means that normal units are indeed found here.

	Step 3: If the base string did not match any of the known complex units, an algorithm builds the display units from the 
	remaining base array. This should be updated to allow for complex units to be pulled out and still build the remaining
	items. Perhaps creating a base array and then subtracting the known complex units?
"""


def recomposeUnits(thisItem, worksheet):

	print('In the recompose units function')
	thisModel=''
	baseModel=''

	# Go through the base array and build a model for the base string
	for k in cadwolfUnitList:
		print(thisItem.Units_base_array[k])
		if thisItem.Units_base_array[k]=="NaN":
			thisModel=str(thisModel)+'0'	
			baseModel=str(baseModel)+str(k)
		else:
			thisModel=str(thisModel)+str(np.int(thisItem.Units_base_array[k]))
			baseModel=str(baseModel)+str(k)	

	# Test if the units base string matches any of the known complex units like Newtons, etc
	flag=0;
	for parseIndex, parseItem in enumerate(cadwolfParseUnits):
		testModel=''
		for unitIndex, unitItem in enumerate(cadwolfUnitList):
			
			try: 
				cadwolfParseUnits[parseIndex][cadwolfUnitList[k]]
				testModel=str(testModel)+str(cadwolfParseUnits[parseIndex][cadwolfUnitList[k]])
			except:
				testModel=testModel+str('0')


		if thisModel==testModel and thisModel!='00000000':
			flag=1
			thisItem.Units_units=cadwolfParseUnits[parseIndex]['base_unit']
			thisItem.Units_quantity=cadwolfParseUnits[parseIndex]['quantity']


	# If the units do not match a known complex item
	if flag==0:
		#units='('
		units=''
		flag0=0
		flag1=0
		flag2=0
		
		# Loop through the unit list and build the units
		for k in cadwolfUnitList:
			if thisItem.Units_base_array[k]==1:
				if flag0==0:
					units=str(units)+''+str(k)
					flag0=1
				else: 
					units=str(units)+'*'+str(k)
			
			if thisItem.Units_base_array[k]>1:
				if flag0==0:
					units=str(units)+''+str(k)+'^'+str(thisItem.Units_base_array[k])
					flag0=1;
				else:
					units=str(units)+'*'+str(k)+'^'+str(thisItem.Units_base_array[k])
			flag1=1


		"""
		if units=="(":
			units=''
		else:
			units=str(units)+')'
		"""

		for k in cadwolfUnitList:
			# Place negative units on the lower end of the divide
			if thisItem.Units_base_array[k]==-1:							 
				if flag0==0:
					units='1/('+str(k)
					flag2=1
				else:
					if flag2==1:
						units=str(units)+'*'+str(k)
					else: 
						units=str(units)+'/('+str(k)
						flag2=1

			
			# Place multiple lowered units
			if thisItem.Units_base_array[k]<-1:
				if flag0==0:
					units='1/('+k+'^'+thisItem.Units_base_array[k].toString().replace('-','') 
					flag2=1;
				else:
					if flag2==1: 
						units=str(units)+'*'+str(k)+'^'+str(thisItem.Units_base_array[k]).replace("-", "")
					else:
						units=str(units)+'/('+str(k)+'^'+str(thisItem.Units_base_array[k]).replace("-", "")
						flag2=1

		
		if units!='' and flag2==1:
			units=str(units)+')'


		#units=units.replace(/^\*/,'');
		#units=units.replace(/^\//,'');
		thisItem.Units_units=units


	thisItem.Models_quantities=thisItem.Units_quantity




"""
	This program looks at the object array and formats the fractions to be shown in MathJax. This is done by stepping through the 
	object array and finding any division signs. For the ones found, it looks for any parenthesis on either side and matches those.
	It then inserts the formatting for MathJax
"""



def formatFractions(thisItem, worksheet):

	print('In the format fractions function')

	varLength=len(thisItem.Solution_variable_array)

	for index, item in enumerate(thisItem.Solution_variable_array):

		openCount=0
		closeCount=0

		if item=="/":

			# Replace the divide sign with the brackets splitting numerator and denomenator
			thisItem.Solution_variable_array[index]="}{"

			# If the numerator was contained in a parenthesis, replace that with a bracket
			if thisItem.Solution_variable_array[index-1]==")":
				thisItem.Solution_variable_array[index]=thisItem.Solution_variable_array[index].replace("}","")
				thisItem.Solution_variable_array[index-1]="}"
				closePar=0
				flag=0
				tempIndex=index-2

				# Step back through the numerator and replace the starting parenthesis with a bracket
				while flag==0 and tempIndex>=0:
					if thisItem.Solution_variable_array[tempIndex]=="(" and closePar==0:
						flag=1
						thisItem.Solution_variable_array[tempIndex]="\\frac{"

					elif thisItem.Solution_variable_array[tempIndex]=="(":
						closePar=closePar-1

					elif thisItem.Solution_variable_array[tempIndex]==")":
						closePar=closePar+1

					tempIndex=tempIndex-1

			# If no parenthesis, just place the items before and after in the num and den
			else:
				if index<2: 
					thisItem.Solution_variable_array.insert(0, "\\frac{")
					index=index+1
				else: 
					thisItem.Solution_variable_array.insert(index-1, "\\frac{"); 
					index=index+1

			# If the den was contained in a parenthesis, replace that with the bracket
			if thisItem.Solution_variable_array[index+1]=="(":
				thisItem.Solution_variable_array[index]=thisItem.Solution_variable_array[index].replace('{',''); 
				thisItem.Solution_variable_array[index+1]="{";
				closePar=0
				flag=0
				tempIndex=index+2;
				
				while flag==0 and tempIndex<len(thisItem.Solution_variable_array):
					print(thisItem.Solution_variable_array[tempIndex])
					if thisItem.Solution_variable_array[tempIndex]==")" and closePar==0:
						flag=1
						thisItem.Solution_variable_array[tempIndex]="}"
					elif thisItem.Solution_variable_array[tempIndex]==")":
						closePar=closePar-1
					elif thisItem.Solution_variable_array[tempIndex]=="(":
						closePar=closePar+1
					tempIndex=tempIndex+1

			else:
				thisItem.Solution_variable_array.insert(index+2, "}") 


"""
    This function is called to solve the case where a certain index of matrix is solved for. This is the case where the equation is
	Matrix1[1][2]=5. It is not the case where the equation is test=Matrix1[1][2]. To accomplish the task, the program has three steps. 
    1.  Find the most recent incarnation of the matrix in question and set this Solution array equal to that.
    2.  Split the indices sent to be set up into the individual brackets in an array. i.e. "[1][2][3]" becomes "[1], [2], [3]"
    3.  For each of these indices:
            a. Split the text up by the colons to see of it is a span i.e. 3:8 becomes [3], [8]
            b. If the span has a length of 1 
                I.  If it is a number, set the key to that and the size of that index to 1  
                II. If it is not a number, solve the equation and set the key to that value and the size to 1 
            c. If the span is not 3, set an error it should be a "[something]" "[:]" "[something]" 
            d. If the span is indeed 3
                I.   If the first item is a number, set the first part of the key
                II.  If it is not a number, solve the equation and set the key
                III. If the third part is a number, set the second part of the key
                IV.  If the third part is not a number, solve and set the key
                V.   Set the length for the segment by subtracting the first key from the second 
    4.  Check the indexes for the solution and for the indices that the solution is to be assigned to. 
            a. Check each index to see if the size at that index is the same for both sides 
                I. One additional index is allowed on the left side, but it must have a size of 1. This is the case where the user is 
                   growing the matrix by one dimension. For an already 2 D matrix, a third dimension could be added. 
            b. Check again to ensure that the number of indices being assingned on the left is equal to the size of the right 
            C. Check again to ensure that the same number of indices exist on both sides of the equation 
"""


def matrixSubcomp(thisItem, worksheet):

	print('In the Matrix Subcomp function')

	newIndexFlag=0
	bigMatrixFlag=0

	if re.search('\[', thisItem.Format_left) is not None:

		if thisItem.Format_type=="3":

			# Part 1
			if thisItem.Page_parentid=="none":
				searchName=re.sub('\[[A-Za-z0-9\.\_\]\[]+$', '', thisItem.Format_name)
				thisEqId=thisItem.matchClosestEquation(thisItem, worksheet, searchName, worksheet[thisItem.itemid].order, thisItem.itemid, 0, 1)
				try:
					worksheet[thisEqId]
					tempfullMat=copy.deepcopy(worksheet[thisEqId].fullMat)
				except:
					test=1


			# Part 2
			theseIndexes=splitBracket(thisItem, worksheet, thisItem.Format_left)
			solSizes=thisItem.Format_size.split('x')
			leftSizes=worksheet[thisEqId].Format_size.split('x')

			# Part 3
			key=[0] * len(theseIndexes)
			for index in range(0, len(theseIndexes), 1):
				key[index]={}
				thisIndex=splitColons(thisItem, worksheet, theseIndexes[index])
				
				# A single entry of a number of a colon
				if len(thisIndex)==1:
					testString = cadwolfNumTest.match(thisIndex[0])
					if testString is not None:
						key[index]['a']=thisIndex[0]
						key[index]['b']=thisIndex[0]
						key[index]['length']=1
					elif thisIndex[0]==":":
						key[index]['a']=0
						key[index]['b']=leftSizes[index]-1
						key[index]['length']=leftSizes[index]
					else:
						eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
								"Format_showtype":"InnerFunction",
								"Page_parentid":worksheet[thisItem.Format_id].Page_parentid, 
								"Page_topparentid":worksheet[thisItem.Format_id].Page_topparentid, 
								"Original_id":thisItem.Format_id,
								"equation":"NewEq="+thisIndex[0]	}
						id=thisItem.createEq(thisItem, worksheet, worksheet[thisItem.Format_id].fileid, 1, eqObj)
						thisItem.Solution_temps.append(id)
						key[index]['a']=np.float_(np.real(worksheet[id].fullMat[[0][0]]))
						key[index]['b']=np.float_(np.real(worksheet[id].fullMat[[0][0]]))
						key[index]['length']=1
						sizeIndex[index]=1

				# If there is neither one nor three entries
				elif len(thisIndex)!=3:
					thisItem.setError(thisItem.Format_id, worksheet, "Indices1", index, len(thisIndex))

				# If there are three indices
				elif len(thisIndex)==3:
					testString = cadwolfNumTest.match(thisIndex[0])
					if testString is not None:
						key[index]['a']=thisIndex[0]
					else:
						eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
								"Format_showtype":"InnerFunction",
								"Page_parentid":worksheet[thisItem.Format_id].Page_parentid, 
								"Page_topparentid":worksheet[thisItem.Format_id].Page_topparentid, 
								"Original_id":thisItem.Format_id,
								"equation":"NewEq="+thisIndex[0]	}
						id=thisItem.createEq(thisItem, worksheet, worksheet[thisItem.Format_id].fileid, 1, eqObj)
						thisItem.Solution_temps.append(id)
						key[index]['a']=np.float_(np.real(worksheet[id].fullMat[[0][0]]))

					testString = cadwolfNumTest.match(thisIndex[2])
					if testString is not None:
						key[index]['b']=thisIndex[2]
						key[index]['length']=key[index]['b']-key[index]['a']+1
					else:
						eqObj={	"Page_position":worksheet[thisItem.Format_id].order, 
								"Format_showtype":"InnerFunction",
								"Page_parentid":worksheet[thisItem.Format_id].Page_parentid, 
								"Page_topparentid":worksheet[thisItem.Format_id].Page_topparentid, 
								"Original_id":thisItem.Format_id,
								"equation":"NewEq="+thisIndex[2]	}
						id=thisItem.createEq(thisItem, worksheet, worksheet[thisItem.Format_id].fileid, 1, eqObj)
						thisItem.Solution_temps.append(id)
						key[index]['b']=np.float_(np.real(worksheet[id].fullMat[[0][0]]))
						key[index]['length']=key[index]['b']-key[index]['a']+1

			newNumInd=1
			for index in range(0, len(theseIndexes), 1):
				newNumInd=newNumInd*np.float_(key[index]['length'])

			thisNumInd=1
			for index in range(0, len(solSizes), 1):
				thisNumInd=thisNumInd*np.float_(solSizes[index])

			newKeySize=''
			for index in range(0, len(key), 1):
				newKeySize=str(newKeySize)+'x'+str(key[index]['length'])

			newKeySize=re.sub("^x", "", newKeySize)


			# Part 4
			indexFlag=0
			for index in range(0, len(theseIndexes), 1):
				if key[index]['b']>=leftSizes[index]:
					bigMatrixFlag=1

			for index in range(0, len(theseIndexes), 1):
				if np.int_(key[index]['length'])!=np.int_(solSizes[index]):
					if len(key)==len(leftSizes):
						indexFlag=1
					if key[index]['length']==1 and index==len(theseIndexes)-1 and len(theseIndexes)==len(leftSizes)+1:
						newIndexFlag=1
					else:
						indexFlag=1
			
			if len(theseIndexes)!=len(leftSizes) and len(theseIndexes)!=len(leftSizes)+1:
				thisItem.setError(thisItem, worksheet, thisItem.Format_id, "Indices2", len(theseIndexes), len(leftSizes))

			elif indexFlag==1:
				thisItem.setError(thisItem, worksheet, thisItem.Format_id, "Indices4", newKeySize, thisItem.Format_size)

			elif np.int_(newNumInd)!=np.int_(thisNumInd):
				thisItem.setError(thisItem, worksheet, thisItem.Format_id, "Indices3", thisNumInd, newNumInd)


			else:
				numKeys=1
				for a in range(0, len(key), 1):
					key[a]['count']=key[a]['a']
					numKeys=np.int_(numKeys*(np.float_(key[a]['b'])-np.float_(key[a]['a'])+1))

				readKey=[0] * len(solSizes)
				for a in range(0, len(solSizes), 1):
					readKey[a]={}
					readKey[a]['a']=0
					readKey[a]['b']=np.int_(solSizes[a])-1
					readKey[a]['count']=0

				# Part 5
				for a in range(0, numKeys, 1):
					thisKey=''
					stepFlag=0

					for a in range(len(key)-1, -1, -1):
						if a==len(key)-1:
							thisKey=key[a]['count']
						else:
							thisKey=str(key[a]['count'])+','+str(thisKey)
					thisKey=re.sub("\-$", "", str(thisKey))
					print('thisKey is '+str(thisKey))

					showKey=[0]*len(readKey)
					for a in range(len(readKey)-1, -1, -1):
						showKey[a]=[]
						showKey[a].append(readKey[a]['count'])
					print('showKey is '+str(showKey))


					for a in range(len(key)-1, -1, -1):
						if a==len(key)-1:
							key[a]['count']=np.int_(key[a]['count'])+1
							if np.int_(key[a]['count'])>np.int_(key[a]['b']):
								stepFlag=1
								key[a]['count']=key[a]['a']
						else:
							if stepFlag==1:
								key[a]['count']=np.int_(key[a]['count'])+1
								if np.int_(key[a]['count'])>np.int_(key[a]['b']):
									stepFlag=1
									key[a]['count']=key[a]['a']
								else:
									stepFlag=0

					for a in range(len(readKey)-1, -1, -1):
						if a==len(readKey)-1:
							readKey[a]['count']=np.int_(readKey[a]['count'])+1
							if np.int_(readKey[a]['count'])>np.int_(readKey[a]['b']):
								stepFlag=1
								readKey[a]['count']=0
						else:
							if stepFlag==1:
								readKey[a]['count']=np.int_(readKey[a]['count'])+1
								if np.int_(readKey[a]['count'])>np.int_(readKey[a]['b']):
									stepFlag=1
									readKey[a]['count']=0
								else:
									stepFlag=0

					tempArr=thisKey.split(',')
					newKey=[]
					for a in range(0, len(tempArr), 1):
						newKey.append(np.int(tempArr[a]))

					tempfullMat.itemset(tuple(newKey), np.float_(np.real(thisItem.fullMat[showKey])) + np.float_(np.imag(thisItem.fullMat[showKey]))*1j)


					if newIndexFlag==1 or bigMatrixFlag==1:
						resolveMatrix(thisItem.Format_id)

			thisItem.fullMat=copy.deepcopy(tempfullMat)

"""
	The last function called in the formatting of the equation, this function looks at each object in the equation's array and displays the 
	proper item. If the object was originally a number, then it display's a number. If it was a subequation or built in, then the proper 
	text is shown. If it is a matrix, then the matrix is shown and if it was a vector then the vector text is shown.  If this is the top 
	equation, then the result is also shown.
"""

def showEquation(thisItem, worksheet):

	print('In the show equation function')

	if thisItem.Format_showtype=="top" or thisItem.Format_showtype=="builtin" or thisItem.Format_showtype=="InnerFunction":

		equation=''

		for index, item in enumerate(thisItem.Solution_variable_array):

			try:
				worksheet[item]

				if worksheet[item].Format_showtype=="Negative" or worksheet[item].Format_showtype=="FirstNeg":
					worksheet[item].Format_showtype="default"
					del(thisItem.Solution_variable_array[index+1])

				equation=equation+str(worksheet[item].Format_showequation)										 

				print(str(equation))


			except:
				equation=equation+str(item)


		if thisItem.Errors_flag==1:
			thisItem.Format_showequation="\\text{"+str(thisItem.Errors_errors[0])+"}"
		else:
			thisItem.Format_showequation=equation


"""
	This function simply gets the size of the array and places it into the property for the object
"""

def getSize(thisItem, worksheet):

	print('In the get size function')

	thisShape=thisItem.fullMat.shape

	thisItem.Format_size=""

	for i,a in enumerate(thisShape):
		thisItem.Format_size=thisItem.Format_size+"x"+str(a)


	thisItem.Format_size = re.sub("^x", '', thisItem.Format_size)
"""
	This function displays the solution only after the show equation has been formatted in the above function. This function is called whenever the user changes how the 
	solution is to be displayed. This could be changing the display from the solution to the size or vice versa. As of now, the name, equation, and solution are held is 
	separate properties of the equation object and brought together when being displayed.
"""
def showSolution(thisItem, worksheet):

	print('In the show solution function')

	print(str(thisItem.fullMat[[0][0]])+' - '+str(thisItem.Units_units)+' - '+str(thisItem.Format_showtype))
	real=0
	imag=0

	# We are only concerned about formatting the solution for the final equation - not inner ones
	if thisItem.Format_showtype=="top":

		# If there are no show units, then place the normal units there
		if thisItem.Units_showunits=="":
			thisItem.Units_showunits=thisItem.Units_units


		# For a solution of one number, the show solution is the real and imaginary plus the unit
		if thisItem.Format_size=="1x1":

			fullVals=thisItem.fullMat[[0][0]].flatten()

			if thisItem.Units_units=='':
				if np.imag(fullVals)==0 or np.imag(fullVals)=='' or np.imag(fullVals)=="NaN" or np.imag(fullVals)==0.0:
					solution=str(np.real(fullVals))+" "+str("\\hspace{1mm}") 

				elif np.imag(fullVals)>0:
					solution=str(np.float(np.real(fullVals)))+"+"+str(np.float(np.imag(fullVals)))+''+str("i\\hspace{1mm}")

				elif np.imag(fullVals)<0:
					solution=str(np.float(np.real(fullVals)))+" "+str(np.float(np.imag(fullVals)))+''+str("i\\hspace{1mm}")

				solution=str(solution)+str(thisItem.showFraction(thisItem.Units_units))

			else: 

				# If the units are there
				try:
					cadwolfScaleUnits[thisItem.Units_showunits] 
					cv=cadwolfScaleUnits[thisItem.Units_showunits]['conv_factor']
					showu=thisItem.Units_showunits

					if thisItem.Units_showunits=="C":
						solution=real-273.15
						showu="^{\\circ} C"
					elif thisItem.Units_showunits=="F":
						solution=real*9/5-459.67
						showu="^{\\circ} F"
					elif thisItem.Units_showunits=="R":
						solution=real/0.555555555555
						showu="^{\\circ} R"
					elif thisItem.Units_showunits=="K":
						solution=real
						showu="K"
					else:
						solution=real/cv


					if np.imag(fullVals)==0 or np.imag(fullVals)=='' or np.imag(fullVals)=="NaN" or np.imag(fullVals)==0.0:
						addon=''
						isol=''
					else: 
						if thisItem.Units_showunits=="C": 
							isol=np.imag(fullVals)-273.15
						elif thisItem.Units_showunits=="F": 
							isol=np.imag(fullVals)*9/5-459.67
						elif thisItem.Units_showunits=="R":
							isol=np.imag(fullVals)/0.555555555555
						elif thisItem.Units_showunits=="K":
							isol=np.imag(fullVals)
						else:
							isol=np.imag(fullVals)/cv

					if np.imag(fullVals)>0:
						addon="+"
					elif np.imag(fullVals)<0:
						addon="-"
					
					print('-Adding '+str(solution)+''+str(addon)+''+str(isol))
					solution=str(solution)+''+str(addon)+''+str(isol)+''+str("\\hspace{1mm}")+''+thisItem.showFraction(showu)
				
				except:
					print('In the exception')
					if thisItem.Solution_convsol=='':
						if np.imag(fullVals)==0 or np.imag(fullVals)=='' or np.imag(fullVals)=="NaN" or np.imag(fullVals)==0.0:
							solution=str(real)+str("\\hspace{1mm}") 																											 
						elif np.imag(fullVals)>0:
							solution=str(real)+"+"+str(np.imag(fullVals))+"i"
						elif np.imag(fullVals)<0:
							solution=str(real)+" "+str(np.imag(fullVals))+"i"

						if thisItem.Units_showunits=='':
							solution=str(solution)+"\\hspace{1mm}"+str(thisItem.showFraction(thisItem.Units_units))
						else:
							solution=str(solution)+"\\hspace{1mm}"+str(thisItem.showFraction(thisItem.Units_showunits))
					else:
						if np.imag(fullVals)==0 or np.imag(fullVals)=='' or np.imag(fullVals)=="NaN" or np.imag(fullVals)==0.0:
							solution=str(np.real(fullVals)/thisItem.Solution_convsol)+"\\hspace{1mm}"
						elif np.imag(fullVals)>0:
							solution=str(np.real(fullVals)/thisItem.Solution_convsol)+"+"+str(np.imag(fullVals)/thisItem.Solution_convsol)+"i"
						elif np.imag(fullVals)<0:
							solution=str(np.real(fullVals)/thisItem.Solution_convsol)+" "+str(np.imag(fullVals)/thisItem.Solution_convsol)+"i"	

						print('The solution is '+str(solution))
						solution=str(solution)+"\\hspace{1mm}"+thisItem.showFraction(thisItem.Units_showunits)


		# If the solution has more than one number - array
		else:

			# The default is for the user to show the size of the array
			if thisItem.Format_showvalue=="default" or thisItem.Format_showvalue=="size":
				solution=thisItem.Format_size
			
			# The user can select to show the value 
			elif thisItem.Format_showvalue=="value":
				thisItem.Solution_showarray=[]

				# If the solution has no units, just show the numbers
				if thisItem.Units_showunits=='':
					
					for index, item in enumerate(thisItem.fullMat): 
						if np.imag(thisItem.fullMat[index])>0: 
							thisItem.Solution_showarray[index]=str(np.real(thisItem.fullMat[index]))+'+'+str(np.imag(thisItem.fullMat[index]))+'i'; 
						elif np.imag(thisItem.fullMat[index])<0:
							thisItem.Solution_showarray[index]=str(np.real(thisItem.fullMat[index]))+' '+str(np.imag(thisItem.fullMat[index]))+'i'; 
						elif np.imag(thisItem.fullMat[index])==0:
							thisItem.Solution_showarray[index]=str(np.real(thisItem.fullMat[index])); 
						else:
							try:
								worksheet[np.real(thisItem.fullMat[index])]
								thisItem.Solution_showarray[index]=worksheet[np.real(thisItem.fullMat[index])].Format_showequation
							except:
								thisItem.Solution_showarray[index]=np.real(thisItem.fullMat[index])

					solution=thisItem.showMatrix(thisItem.Format_id)
					solution=str(solution)+"\\hspace{1mm}"+thisItem.showFraction(thisItem.Units_units)


				# If there are in fact units
				else:
					try:
						cadwolfScaleUnits[thisItem.Units_showunits] 
						cv=cadwolfScaleUnits[thisItem.Units_showunits]['conv_factor']
						solution=''
						showu=thisItem.Units_showunits

						for index, item in enumerate(thisItem.fullMat): 
							real=np.real(thisItem.fullMat[index])
							imag=np.imag(thisItem.fullMat[index])

							if np.imag(thisItem.fullMat[index])>0:
								addon="+" 
							elif np.imag(thisItem.fullMat[index])<0:
								addon=""
							else:
								addon=''

							if thisItem.Units_showunits=="C":
								thisItem.Solution_showarray[index]=real-273.15
								showu="^{\\circ} C"
							elif thisItem.Units_showunits=="F":
								thisItem.Solution_showarray[index]=real*9/5-459.67
								showu="^{\\circ} F"
							elif thisItem.Units_showunits=="R":
								thisItem.Solution_showarray[index]=real/0.555555555555
								showu="^{\\circ} R"
							elif thisItem.Units_showunits=="K":
								thisItem.Solution_showarray[index]=real
								showu="K"
							else:
								thisItem.Solution_showarray[index]=real/cv
								if imag==0 or imag=='' or imag=="NaN" or imag==0.0:
									addon=''
									isol=''
								else: 
									if thisItem.Units_showunits=="C":
										isol=imag-273.15
									elif thisItem.Units_showunits=="F": 
										isol=imag*9/5-459.67
									elif thisItem.Units_showunits=="R":
										isol=imag/0.555555555555
									elif thisItem.Units_showunits=="K":
										isol=imag						 
									else:
										isol=imag/cv

									thisItem.Solution_showarray[index]=str(thisItem.Solution_showarray[index])+''+str(addon)+''+str(isol)
								
						solution=thisItem.showMatrix(thisItem.Format_id)
						solution=str(solution)+"\\hspace{1mm}"+str(thisItem.showFraction(showu)) 


					except:

						for index, item in enumerate(thisItem.Solution_real): 
							real=np.real(thisItem.fullMat[index])
							imag=np.imag(thisItem.fullMat[index])
							
							if np.imag(thisItem.fullMat[index])>0:
								addon="+"
							elif np.imag(thisItem.fullMat[index])<0:
								addon="-"
							else:
								addon=''
								
							if imag==0 or imag=='' or imag=="NaN" or imag==0.0:
								addon=''
								isol=''					 
								thisItem.Solution_showarray[index]=real
							else: 
								thisItem.Solution_showarray[index]=str(thisItem.Solution_showarray[index])+''+str(addon)+''+str(isol)

						solution=thisItem.showMatrix(thisItem.Format_id)
						if thisItem.Units_showunits=='':
							solution=str(solution)+"\\hspace{1mm}"+str(thisItem.showFraction(thisItem.Units_units))
						else:
							solution=str(solution)+"\\hspace{1mm}"+str(thisItem.showFraction(thisItem.Units_units))


		print("The show solution is ...")
		print(str(solution))
		thisItem.Format_showsolution=solution



"""
	This function creates the models for the equations
"""

def models(thisItem, worksheet):

	print('In the models function')

	num=''
	units=''
	quan=''
	dim=''

	for index, item in enumerate(thisItem.Solution_variable_array):

		try:
			worksheet[item]

			# Handle the numerical model
			if worksheet[item].Models_numerical=='':
				if worksheet[item].Format_size=="1x1":
					num=str(num)+str(worksheet[item].Solution_real[[0,0]])
				else:
					num=str(num)+str(worksheet[item].Format_size)
			else:
				num=str(num)+str(worksheet[item].Models_numerical)


			# Handle the units model
			if worksheet[item].Models_units=='':
				if worksheet[item].Units_units=='':
					units=str(units)+'NA'
				else:
					units=str(units)+worksheet[item].Units_units
			else:
				num=str(num)+str(worksheet[item].Models_units)




			# Handle the quantity model
			if worksheet[item].Models_quantities=='':
				if worksheet[item].Units_quantity=='':
					quan=str(quan)+'NA'
				else:
					quan=str(quan)+worksheet[item].Units_quantity
			else:
				if worksheet[item].Models_quantities=="NA":
					if worksheet[item].Units_quantity=="NA" or worksheet[item].Units_quantity=="":
						quan=str(quan)+str(worksheet[item].Models_quantities)
					else:
						quan=str(quan)+str(worksheet[item].Units_quantity)


			# Handle the dimensions model
			if worksheet[item].Models_dimensions=='': 
				dim=str(dim)+''+str(worksheet[item].Format_size) 
			else:
				dim=str(dim)+''+str(worksheet[item].Models_dimensions)


		except:
			num=str(num)+''+str(item)
			units=str(units)+''+str(item)
			dim=str(dim)+''+str(item)
			quan=str(quan)+''+str(item)


	try:
		worksheet[item]
		worksheet[item].Models_numerical=str(worksheet[item].Models_numerical)+str(num) 
		worksheet[item].Models_units=str(worksheet[item].Models_units)+str(units)
		worksheet[item].Models_dimensions=str(worksheet[item].Models_dimensions)+str(dim)
		worksheet[item].Models_quantities=str(worksheet[item].Models_quantities)+str(quan)	

	except:
		print("Didnt get "+str(item)+" in models")
"""
	This function goes through and cleans up after the equation has been completed. It deletes any temporary equations that were created 
	during the solution process andremoves them from both the window memory and the DOM_Object array.
"""




def equationCleanup(thisItem, worksheet):

	print('In the equation cleanup function')


	if thisItem.Format_showtype=="top":

		for index, item in enumerate(thisItem.Solution_temps):
			try:
				worksheet[item]
				del(worksheet[item])
			except:
				print()

		try:
			worksheet[thisItem.Format_id]

			if thisItem.name!="TempEq":

				for index, item in enumerate(worksheet):
					if item.type=="equation":
						if item.name=="undefined" or item.name=="TempEq" or item.name=="Temp" or item.name=="NA":
							print("I came in like a wrecking ball and deleted "+str(item.name))
							try:
								worksheet[index]
								del(worksheet[index])
							except:
								print()

		except:
			print()




"""
	This function prepares the object to be sent back to the web page after an equation is solved.

"""



def returnEquation(thisItem, worksheet, eventType):

	print('In the return Equation function')

	print(str(thisItem.Original_id)+'=='+str(thisItem.Format_id)+' and '+str(thisItem.Page_parentid)+'==none and '+str(thisItem.Format_showtype))


	if thisItem.Original_id==thisItem.Format_id and thisItem.Page_parentid=="none" and thisItem.Format_showtype=="top":


		# If we were just solving a single table cell element, return it
		if eventType=="SolveTableCell":
			thisItem.postMessage={	"messageType":"TableCellResult",
									"Equation":vars(worksheet[thisItem.Format_id]),
									"Deps":worksheet[thisItem.Format_id].Dependents	}

		else:
			connected={}
			if len(thisItem.connected_ids)>0: 
				for index, item in enumerate(thisItem.connected_ids):
					try:
						worksheet[item].fullMat
						tempReal=numpyToObject(worksheet[item].fullMat, "real")
						tempImag=numpyToObject(worksheet[item].fullMat, "imag")
						worksheet[item].Solution_real=copy.copy(tempReal)
						worksheet[item].Solution_imag=copy.copy(tempImag)
						del(worksheet[item].fullMat)
					except:
						test=1
						
					connected[item]=getAttributes(worksheet[item])

			
			tempReal=numpyToObject(worksheet[thisItem.Format_id].fullMat, "real")
			tempImag=numpyToObject(worksheet[thisItem.Format_id].fullMat, "imag")
			del(worksheet[thisItem.Format_id].Solution_real)
			del(worksheet[thisItem.Format_id].Solution_imag)
			worksheet[thisItem.Format_id].Solution_real=copy.copy(tempReal)
			worksheet[thisItem.Format_id].Solution_imag=copy.copy(tempImag)

			print('I should be returning units of '+str(worksheet[thisItem.Format_id].Units_units))
			
			# If we are returning this equation, delete the full solution because a numpy can't be converted to json
			if worksheet[thisItem.Format_id].Format_showtype=="top":
				print('Deleting '+str(thisItem.Format_id))
				del(worksheet[thisItem.Format_id].fullMat)

			for index, item in enumerate(connected):
				print(str(connected[item]))

			thisItem.postMessage = 	{	"messageType":"EquationResult", 
										"id":thisItem.Format_id, 
										"equation":getAttributes(worksheet[thisItem.Format_id]),
										"Deps":thisItem.Dependents,
										"connected":connected 	}








""""
	This function returns the attributes of a class not including the functions of that class. I 
	use this function to pull out the properties of items to be returned to the page when an 
	equation is solved or something similar.

"""


def getAttributes(clazz):
    return {name: attr for name, attr in clazz.__dict__.items()
            if not name.startswith("__") 
            and not callable(attr)
            and not type(attr) is staticmethod}

"""

	This function is called whenever the user adds or subtracts matrices. It does the same as adding or subtracting two matrices with the addition of 
	checking size issues. First, it checks to make sure that the base arrays match to ensure that the items being added make sense. Then it adds component
	by component to each other and inserts the results to the proper component in the new equation item.

"""




def addSubMatrices(thisItem, worksheet, id1, id2, operator, thisid):

	print('In the add sub matrices function with an operator of '+operator)



	if worksheet[id1].Units_base_string!=worksheet[id2].Units_base_string:

		if operator=="+":
			thisItem.setError(thisItem, worksheet, thisid, "Math1", id1, id2)
		
		if operator=="-":
			thisItem.setError(thisItem, worksheet, thisid, "Math2", id1, id2)
		
		return "Error"
	

	elif worksheet[id1].Format_size!=worksheet[id2].Format_size: 
		if operator=="+":
			thisItem.setError(thisItem, worksheet, thisid, "Math3", id1, id2)
		if operator=="-":
			thisItem.setError(thisItem, worksheet, thisid, "Math4", id1, id2)
		
		return "Error";


	else: 

		if operator=="+":
			full=np.add(worksheet[id1].fullMat, worksheet[id2].fullMat)

		if operator=="-":
			full=np.subtract(worksheet[id1].fullMat, worksheet[id2].fullMat)


		eqObj={	'Page_position':worksheet[thisid].order, 
				'Format_showtype':"InnerFunction", 
				'equation':"AddSubMatEq=0"	}
		id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)
		worksheet[id].fullMat=full
		worksheet[id].Units_units=worksheet[id1].Units_units
		worksheet[id].Units_quantity=worksheet[id1].Units_quantity
		worksheet[id].Units_base_array=worksheet[id1].Units_base_array
		worksheet[id].Units_base_string=worksheet[id1].Units_base_string
		worksheet[id].Format_size=worksheet[id1].Format_size
		worksheet[id].Format_numinds=worksheet[id1].Format_numinds
		return id



"""
	This is the function that is called whenever two objects are added to each other. It checks the quantities to ensure that they are the same. If they are 
	the same, the two are added or subtracted. If not, the error system is kicked in.	

	For complex numbers, the algorithm follows the pattern: (a+bi)+(c+di) = a+c+(b+d)i
"""



def addSubNumbers(thisItem, worksheet, id1, id2, operator, thisid):

	print('In the add sub numbers function with numbers '+str(worksheet[id1].fullMat[[0][0]])+' - '+str(worksheet[id1].fullMat[[0][0]]))



	# Make sure that all of the items involved have real and imaginary numbers
	if worksheet[id1].fullMat[[0][0]]=='':
		worksheet[id1].fullMat[[0][0]]=0


	if worksheet[id2].fullMat[[0][0]]=='':
		worksheet[id2].fullMat[[0][0]]=0


	# If the quantities are not the same, set the error
	if worksheet[id1].Units_base_string!=worksheet[id2].Units_base_string:
		if operator=="+":
			thisItem.setError(thisItem, worksheet, thisid, "Math1", id1, id2)
		if operator=="-":
			thisItem.setError(thisItem, worksheet, thisid, "Math2", id1, id2)
		
		return "Error"
	

	else:
		if operator=="+":
			vals=worksheet[id1].fullMat[[0][0]] + worksheet[id2].fullMat[[0][0]]
		
		if operator=="-":
			vals=worksheet[id1].fullMat[[0][0]] - worksheet[id2].fullMat[[0][0]]

		units=worksheet[id1].Units_units
		quantity=worksheet[id1].Units_quantity


	eqObj={	'Page_position':worksheet[id1].Page_position, 
			'Format_showtype':"InnerFunction", 
			'equation':"AddSubEq=0"	}

	id=thisItem.createEq(thisItem, worksheet, worksheet[thisid].fileid, 0, eqObj);
	worksheet[id].Format_showequation='('+worksheet[id1].Format_showequation+operator+worksheet[id2].Format_showequation+')'
	worksheet[id].fullMat=np.zeros((1,1), dtype=complex)
	worksheet[id].fullMat[[0][0]]=vals
	worksheet[id].Units_base_array=worksheet[id1].Units_base_array
	worksheet[id].Units_base_string=worksheet[id1].Units_base_string
	worksheet[id].Units_units=worksheet[id1].Units_units
	worksheet[id].Units_quantity=worksheet[id1].Units_quantity
	worksheet[id].Format_size="1x1"
	worksheet[thisid].Solution_temps.append(id)


	return id



"""
	This function takes in an equation, the worksheet, and a numpy array. It then takes the entries 
	in the array and adds each entry to a list. This list is then converted to a tuple that is returned.

	This funciton is used to convert user entered data to the form that numpy expects for certain 
	functions. i.e. the randint function

"""


def arrayToTuple(thisItem, worksheet, thisArray):

	print('In the array to tuple function')

	newList=[]

	for x in np.nditer(thisArray):
		newList.append(np.asscalar(np.real(x)))

	return tuple(newList)




def arrayToIntTuple(thisItem, worksheet, thisArray):

	print('In the array to int tuple function')

	newList=[]

	for x in np.nditer(thisArray):
		newList.append(np.asscalar(np.int_(np.real(x))))

	return tuple(newList)

"""
	This function checks the length of the input array to built in functions 
	and sets an error if there isn't an input or the number of inputs is incorrect
"""





def checkInputs(thisItem, worksheet, fN, inputLength):

	print('In the check inputs function')

	flag=0

	# A dictionary used to ensure the inputs do not exceed the max to a function
	maxInputs = {	"sin" : 1, 
					"cos" : 1,
					"tan" : 1,
					"asin" : 1,
					"acos" : 1,
					"atan" : 1,
					"atan2" : 2,
					"degrees" : 1,
					"radians" : 1,
					"sinh" : 1,
					"cosh" : 1,
					"tanh" : 1,
					"arcsinh" : 1,
					"arccosh" : 1,
					"arctanh" : 1,
					"rint" : 1,
					"fix" : 1,
					"floor" : 1,
					"ceil" : 1,
					"trunc" : 1,
					"exp" : 1,
					"expm1" : 1,
					"exp2" : 1,
					"log" : 2,
					"log10" : 1,
					"log2" : 1,
					"log1p" : 1,
					"i0" : 1,
					"sinc" : 1,
					"signbit" : 1,
					"frexp" : 1,
					"spacing" : 1,
					"reciprocal" : 1,
					"negative" : 1,
					"angle" : 1,
					"real" : 1,
					"imag" : 1,
					"sqrt" : 1,
					"cbrt" : 1,
					"square" : 1,
					"absolute" : 3,
					"abs" : 3,
					"fabs" : 1,
					"sign" : 1,
					"nan_to_num" : 1,
					"real_if_close" : 1,
					"identity" : 1,
					"ones" : 1,
					"ones_like" : 1,
					"zeros" : 1,
					"zeros_like" : 1,
					"ravel" : 1,
					"flatten" : 1,
					"transpose" : 1,
					"fliplr" : 1,
					"flipud" : 1,
					"invert" : 1,
					"cholesky" : 1,
					"det" : 1,
					"eigvals" : 1,
					"irr" : 1,
					"multi_dot" : 1,
					"random_integers": 1,
					"shuffle" : 1,
					"permutation" : 1,
					"standard_exponential" : 1,
					"standard_cauchy" : 1,
					"standard_normal" : 1,
					"poly" : 1,
					"roots" : 1,
					"size" : 2,
					"root" : 2,
					"hypot" : 2,
					"unwrap" : 2,
					"around" : 2,
					"prod" : 2,
					"sum" : 2,
					"cumprod" : 2,
					"cumsum" : 2,
					"gradient" : 2,
					"logaddexp" : 2,
					"logaddexp2" : 2,
					"copysign" : 2,
					"ldexp" : 2,
					"nextafter" : 2,
					"add" : 2,
					"multiply" : 2,
					"divide" : 2,
					"power" : 2,
					"subtract" : 2,
					"true_divide" : 2,
					"floor_divide" : 2,
					"float_power" : 2,
					"fmod" : 2,
					"mod" : 2,
					"modf" : 2,
					"remainder" : 2,
					"convolve" : 2,
					"heaviside" : 2,
					"maximum" : 2,
					"minimum" : 2,
					"fmax" : 2,
					"fmin" : 2,
					"full" : 2,
					"full_like" : 2,
					"meshgrid" : 3,
					"diag" : 2,
					"diagflat" : 2,
					"tril" : 2,
					"triu" : 2,
					"reshape" : 2,
					"concatenate" : 2,
					"column_stack" : 2,
					"dstack" : 2,
					"hstack" : 2,
					"vstack" : 2,
					"split" : 2,
					"tile" : 2,
					"resize" : 2,
					"trim_zeros" : 2,
					"flip" : 2,
					"reshape" : 2,
					"bitwise_and" : 2,
					"bitwise_or" : 2,
					"bitwise_xor" : 2,
					"left_shift" : 2,
					"right_shift" : 2,
					"packbits" : 2,
					"unpackbits" : 2,
					"binary_repr" : 2,
					"eigvalsh" : 2,
					"pinv" : 2,
					"solve" : 2,
					"eig" : 2,
					"npv" : 2,
					"vdot" : 2,
					"inner" : 2,
					"matrix_power" : 2,
					"kron" : 2,
					"cond" : 2,
					"matrix_rank" : 2,
					"slogdet" : 2,
					"tensorinv" : 2,
					"chisquare" : 2,
					"dirichlet" : 2,
					"exponential" : 2,
					"geometric" : 2,
					"logseries" : 2,
					"pareto" : 2,
					"poisson" : 2,
					"power" : 2,
					"rayleigh" : 2,
					"standard_gamma" : 2,
					"standard_t" : 2,
					"weibull" : 2,
					"zipf" : 2,
					"nanargmax" : 2,
					"polyval" : 2,
					"polyder" : 2,
					"polyint" : 2,
					"polyadd" : 2,
					"polydiv" : 2,
					"polymul" : 2,
					"polysub" : 2,
					"uniform" : 3,
					"diff" : 3,
					"ediff1" : 3,
					"clip" : 3,
					"interp" : 3,
					"eye" : 3,
					"arange" : 3,
					"tri" : 3,
					"vander" : 3,
					"moveaxis" : 3,
					"stack" : 3,
					"rollaxis" : 3,
					"swapaxes" : 3,
					"dsplit" : 3,
					"hsplit" : 3,
					"vsplit" : 3,
					"repeat" : 3,
					"delete" : 3,
					"append" : 3,
					"roll" : 3,
					"rot90" : 3,
					"svd" : 3,
					"eigh" : 3,
					"mirr" : 3,
					"dot" : 3,
					"outer" : 3,
					"matmul" : 3,
					"tensordot" : 3,
					"qr" : 3,
					"trace" : 3,
					"tensorsolve" : 3,
					"randint" : 3,
					"beta" : 3,
					"binomial" : 3,
					"fdist" : 3,
					"gamma" : 3,
					"gumbel" : 3,
					"laplace" : 3,
					"logistic" : 3,
					"lognormal" : 3,
					"multinomial" : 3,
					"negative_binomial" : 3,
					"noncentral_chisquare" : 3,
					"normal" : 3,
					"vonmises" : 3,
					"wald" : 3,
					"ptp" : 3,
					"bincount" : 3,
					"digitize" : 3,
					"argmax" : 3,
					"trapz" : 4,
					"linspace" : 4,
					"logspace" : 4,
					"geomspace" : 4,
					"insert" : 4,
					"norm" : 4,
					"lstsq" : 4,
					"fft" : 4,
					"fft2" : 4,
					"fftn" : 4,
					"ifft" : 4,
					"ifft2" : 4,
					"ifftn" : 4,
					"hypergeometric" : 4,
					"noncentral_f" : 4,
					"triangular" : 4,
					"amin" : 4,
					"amax" : 4,
					"nanmin" : 4,
					"nanmax" : 4,
					"average" : 4,
					"corrcoef" : 4,
					"correlate" : 4,
					"sort" : 4,
					"argsort" : 4,
					"all" : 4,
					"any" : 4,
					"IfElse" : 5,
					"unique" : 5,
					"fv" : 5,
					"pv" : 5,
					"pmt" : 5,
					"nper" : 5,
					"multivariate_normal" : 5,
					"median" : 5,
					"mean" : 5,
					"std" : 5,
					"partition" : 5,
					"cross" : 6,
					"ppmt" : 6,
					"ipmt" : 6,
					"rand" : 6,
					"randn" : 6,
					"einsum" : 7,
					"percentile" : 7,
					"nanpercentile" : 7,
					"histogram" : 7,
					"histogram2d" : 7,
					"polyfit" : 8,
					"rate" : 8

					}





	# Set the list for the minimum number of inputs (other than 1)
	minInputs = {	"cross" : 2,
					"size" : 2,
					"beta" : 2,
					"binomial" : 2,
					"fdist" : 2,
					"hypergeometric" : 3,
					"multinomial" : 2,
					"multivariate_normal" : 2,
					"negative_binomial" : 2,
					"noncentral_chisquare" : 2,
					"percentile" : 2,
					"nanpercentile" : 2,
					"noncentral_f" : 3,
					"normal" : 2,
					"triangular" : 3,
					"uniform" : 2,
					"vonmises" : 2,
					"correlate" : 2,
					"wald" : 2,
					"histogram2d" : 2,
					"digitize" : 2,
					"polyval" : 2,
					"polyadd" : 2,
					"polydiv" : 2,
					"polymul" : 2,
					"polysub" : 2,
					"polyfit" : 3,
					"IfElse" : 3 }




	# If there is no input, set the flag and set the error for this equation
	if inputLength==0:
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "NoEntry", fN)
		flag=1


	# Check the number of inputs to ensure that they do not exceed the maximum
	for k, v in maxInputs.items():
		if k==fN:
			if inputLength > v:
				flag=1
				print('I got '+str(inputLength)+' inputs on a function that cannot have more than '+str(v))
				thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Input1", inputLength, fN)


	# Check the number of inputs to ensure that they do not exceed the maximum
	for k, v in minInputs.items():
		if k==fN:
			if inputLength < v:
				flag=1
				print('I got '+str(inputLength)+' inputs on a function that cannot have less than '+str(v))
				thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Input2", inputLength, fN)


	return flag
"""



	# If this is a function that is supposed to have one input but has more than one, flag it
	if inputLength>1:
		for index in range(len(oneInputs)):
			if fN==oneInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input1", inputLength, fN)
				flag=1




	# If this is a function must have at least two inputs but has only one, flag it
	if inputLength==1:
		for index in range(len(minTwoInputs)):
			if fN==minTwoInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input2Min", inputLength, fN)
				flag=1




	# If this is a function that is supposed to have two inputs but has more than one, flag it
	if inputLength>2:
		for index in range(len(twoInputs)):
			if fN==twoInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input2", inputLength, fN)
				flag=1




	# If this is a function that is supposed to have two inputs but has more than one, flag it
	if inputLength>3:
		for index in range(len(threeInputs)):
			if fN==oneInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input3", inputLength, fN)
				flag=1




	# If this is a function that is supposed to have two inputs but has more than one, flag it
	if inputLength>4:
		for index in range(len(fourInputs)):
			if fN==fourInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input4", inputLength, fN)
				flag=1




	# If this is a function that is supposed to have two inputs but has more than one, flag it
	if inputLength>6:
		for index in range(len(sixInputs)):
			if fN==sixInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input6", inputLength, fN)
				flag=1




	# If this is a function that is supposed to have two inputs but has more than one, flag it
	if inputLength>7:
		for index in range(len(sixInputs)):
			if fN==sevenInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input7", inputLength, fN)
				flag=1



	# If this is a function that is supposed to have two inputs but has more than one, flag it
	if inputLength>8:
		for index in range(len(sixInputs)):
			if fN==sixInputs[index]:
				thisItem.setError(thisItem, thisItem.Original_id, "Input8", inputLength, fN)
				flag=1

"""

"""
	This function does a number of checks on the equation and makes sure that it is legitimate
	These checks include :	
		making sure that the equation has matching parenthesis
		making sure that the equation has matching square brackets
		making sure that the name doesn't conflict with constants
		making sure that the equation has a name
		making sure that there is an equation

"""


def checkString(thisItem):
	print('In checkString function with a name of '+thisItem.Format_name)

	pcounter=0
	bcounter=0
	for index in thisItem.Solution_variable_array: 
		test=index
		if test=="(": pcounter=pcounter+1
		if test==")": pcounter=pcounter-1
		if test=="[": bcounter=bcounter+1
		if test=="]": bcounter=bcounter-1

	
	# Make sure that the opening closing brackets and parenthesis match up
	if pcounter>0 or pcounter<0:
		thisItem.Set_Error(thisItem.Original_id, worksheet, "Format4", pcounter, "NA")
	if bcounter>0 or bcounter<0:
		thisItem.Set_Error(thisItem.Original_id, worksheet, "Format5", pcounter, "NA")


	# Make sure that the equation is not a top with a name of TempEq
	if thisItem.Format_name=="TempEq" and thisItem.Format_showtype=="top":
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format6", "NA", "NA")


	# Make sure that the name does not match a constant
	for ConstantName in cadwolfConstants:
		if ConstantName==thisItem.Format_name:
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format1", "NA", "NA")

	#Make sure that the name does not match a unit
	for unit in cadwolfScaleUnits:
		if thisItem.Format_name==unit:
			thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format12", "NA", "NA")


	# Make sure that the name was longer than 1 character
	if len(thisItem.Format_name)<1:
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format13", "NA", "NA")


	# Make sure that the name contains only letters, numbers, understores. Brckets are allowed for multiple outputs so I shave them off
	tempName=re.sub('^\[','',thisItem.Format_name)
	tempName=re.sub('\]$','',tempName)
	tempName=re.sub("[a-zA-Z0-9\_\,\s]+", '', tempName)
	print('tempName is '+str(tempName)+' - '+str(len(tempName)))
	if len(tempName)>0:
		print('Something other than letters, numbers, underscore')
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format13", "NA", "NA")


	# Make sure that the name has letters in it
	tempName=re.search('[a-zA-Z]+',thisItem.Format_name)
	if tempName is None:
		print('No letters')
		thisItem.setError(thisItem, worksheet, thisItem.Original_id, "Format13", "NA", "NA")

	# Make sure that the entered equation had a name
	if thisItem.Format_name=="" or thisItem.Format_name==" ":
		thisItem.setError(thisItem, worksheet, this.Original_id, "Format7", "NA", "NA")

	
	# Make sure that the entered equation had an equation on the right
	if thisItem.Format_equation=="" or thisItem.Format_equation==" ": 
		thisItem.setError(thisItem, worksheet, this.Original_id, "Format6", "NA", "NA")


"""
	This function takes in a real and imaginary np array and combines them into one. This is done so that functions
	like conj and angle can be run using the built in numpy functions. CADWOLF breaks the real and imag into two
	separate objects.

"""

def combineRealImag(thisItem, real, imag):

	print('In the combine real imag function')


	matSize=np.shape(real)
	real=np.complex128(real)
	imag=np.complex128(imag)


	if len(matSize)==1:
		newMat=np.complex128(np.zeros(matSize[0]))
		for row in range(0, matSize[0], 1):
			newMat[row]=real[row] + imag[row] * 1j


	if len(matSize)>1:
		newMat=np.complex128(np.zeros((matSize[0], matSize[1])))

		for row in range(0, matSize[0], 1):
			for col in range(0, matSize[1], 1):
				try:
					imag[row, col]
					newMat[row, col]=real[row, col] + imag[row, col] * 1j
				except:
					newMat[row, col]=real[row, col]

	return newMat
"""

	This function is called to create and possibly solve new equation objects. The need for the function arose out of repeated 
	need to create temporary equations and the absurd use of space that this created.

"""

def createEq(thisItem, worksheet, fileid, solve, eqObj):
	print('In the create equations function')


	try:
		createEqID=eqObj.id
	except:
		createEqID=thisItem.getID("Equation", fileid, worksheet)



	try:
		eqObj['Format_name']
	except:
		eqObj['Format_name']="TempEq"


	# Create a new equation on the worksheet
	if thisItem.component_type_id==3:
		newEq = thisItem.__class__(createEqID, eqObj['Format_name'], fileid, {})

	if thisItem.component_type_id==6:
		newEq = thisItem.ownedEq.__class__(createEqID, eqObj['Format_name'], fileid, {})

	if thisItem.component_type_id==7:
		newEq = thisItem.ownedEq.__class__(createEqID, eqObj['Format_name'], fileid, {})

	if thisItem.component_type_id==8:
		newEq = thisItem.ownedEq.__class__(createEqID, eqObj['Format_name'], fileid, {})

	worksheet[createEqID] = newEq

	# Populate the equation item in the worksheet with the sent properties
	try:
		eqObj['Page_position']
		worksheet[createEqID].order=eqObj['Page_position']
	except:
		worksheet[createEqID].order=0

	try:
		eqObj['Page_lastposition']
		worksheet[createEqID].order=eqObj['Page_lastposition']
	except:
		worksheet[createEqID].Page_lastposition=0


	try:
		eqObj['Original_id']
		worksheet[createEqID].Original_id=eqObj['Original_id']
	except:
		worksheet[createEqID].Original_id=createEqID

	try:
		eqObj['Page_parentid']
		worksheet[createEqID].Page_parentid=eqObj['Page_parentid']
	except:
		worksheet[createEqID].Page_parentid="none"

	try:
		eqObj['Page_topparentid']
		worksheet[createEqID].Page_topparentid=eqObj['Page_topparentid']
	except:
		worksheet[createEqID].Page_topparentid="none"

	try:
		eqObj['Solution_real']
		worksheet[createEqID].Solution_real=eqObj['Solution_real']
	except:
		print('')

	try:
		eqObj['Solution_imag']
		worksheet[createEqID].Solution_imag=eqObj['Solution_imag']
	except:
		print('')

	try:
		eqObj['Format_size']
		worksheet[createEqID].Format_size=eqObj['Format_size']
	except:
		print('')

	try:
		eqObj['type']
		worksheet[createEqID].type=eqObj['type']
	except:
		print('')

	try:
		eqObj['equation']
		worksheet[createEqID].equation=eqObj['equation']
	except:
		print('')


	try:
		eqObj['Format_showtype']
		worksheet[createEqID].Format_showtype=eqObj['Format_showtype']
	except:
		worksheet[createEqID].Format_showtype="top"

	try:
		eqObj['Format_showequation']
		worksheet[createEqID].Format_showequation=eqObj['Format_showequation']
	except:
		print('')

	# Place the new equation into the worksheet
	worksheet[createEqID].fileid=fileid


	# If the user wants this equation solved, then solve it
	if solve==1:
		print('Solving from create')
		newEq.solveEq(eqObj['equation'], worksheet, 'SolveEquation')

	return createEqID


"""
	This function takes in text and parses it out to input form

"""


def inputArray(thisItem, text):
	print('In the input array function')

	# Declare the initial variables
	inputArray=[]
	numArray=[]
	flip=0
	bcount=0
	pcount=0


	# Split the text up
	inputArray=thisItem.splitText(text)
	numArray=[0]*len(inputArray)

	# Prepopulate the array
	for index, item in enumerate(inputArray): 
		if inputArray[index]!=",":
			numArray[index]=1
		else:
			numArray[index]=0

	for index, item in enumerate(inputArray):
		if inputArray[index]=="(":
			flip=1 
			bcount=bcount+1 
		if inputArray[index]=="[":
			flip=1
			pcount=pcount+1
		if inputArray[index-1]==")" and index>0:
			bcount=bcount-1
		if inputArray[index-1]=="]" and index>0:
			pcount=pcount-1
		if (inputArray[index-1]==")" or inputArray[index-1]=="]") and bcount==0 and pcount==0 and index>0:
			flip=0
		if flip==1:
			numArray[index]=1


	# Move the items together and delete the duplicates
	for index, item in enumerate(inputArray): 
		if numArray[index]=='1' and numArray[index-1]=='1':
			inputArray[index-1]=inputArray[index-1]+inputArray[index]
			del inputArray[index]
			del numArray[index]


	# Move the items together and delete the marked ones
	for index, item in enumerate(inputArray): 
		if inputArray[index]==',' or inputArray[index]==' ' or inputArray[index]=='':
			del inputArray[index]


	print('At the end of inputArray, the text is '+str(inputArray))


	return inputArray



"""
	This function is used on built-in functions. It is given the string which is sent to the functions. It takes this string and splits it by commas. 
    It then recombines the matrices, other built in functions, other item that also uses commas.
"""

def inputToArray(thisItem, text):
	print('In input to array function')

	text=re.sub("^\(", "", text)
	text=re.sub("\)$", "", text)
	bCount=0
	pCount=0
	flip=0

	text=re.sub("^\s+|\s+$", "", text)
	text=re.sub(",", "?,?", text)
	text=re.sub("\]", "?]?", text)
	text=re.sub("\[", "?[?", text)
	text=re.sub("\(", "?(?", text)
	text=re.sub("\)", "?)?", text)
	text=re.sub("\?{2,100}", "?", text)
	text=re.sub("\s+$", "", text)
	text=re.sub("^\s+", "", text)
	text=re.sub("^\s+|\s+$", "", text)
	text=re.sub("^\?+|\?+$", "", text)
	text=re.sub("^\,+|\,+$", "", text)

	inputArray=text.split("?");

	#inputArray=thisItem.splitText(text)
	#numArray=range(len(inputArray))
	numArray=[None] * len(inputArray)


	for index in range(0, len(inputArray), 1):
		if inputArray[index]!=",":
			numArray[index]=1
		else:
			numArray[index]=0


	for index, item in enumerate(inputArray):
		
		if inputArray[index]=="(":
			flip=1
			pCount=pCount+1

		if inputArray[index]=="[":
			flip=1
			bCount=bCount+1


		if inputArray[index-1]==")" and index>0:
			pCount=pCount-1


		if inputArray[index-1]=="]" and index>0:
			bCount=bCount-1


		if (inputArray[index-1]==")" or inputArray[index-1]=="]") and  (pCount==0 and bCount==0) and index>0:
			flip=0

		if flip==1:
			numArray[index]=1


	for index in range(len(inputArray)-1, 0, -1):
		if numArray[index]==1 and numArray[index-1]==1:
			inputArray[index-1]=inputArray[index-1]+''+inputArray[index]
			del inputArray[index]
			del numArray[index]



	for index in range(len(inputArray)-1, 0, -1):
		if inputArray[index]==',' or inputArray[index]==' ' or inputArray[index]=='':
			del inputArray[index]
			del numArray[index]


	return inputArray



"""
	This function takes in an equation, the worksheet, and a list which is intended to be the user entered
	item(s). It then takes the entries in the list and checks each one to see if it is a number or a known
	equation. If it is neither of those things, it is solved as an equation. The results from any of these
	is placed into a text string that is comma deliminated and then returned.

	This funciton is used to convert user entered data to the form that numpy expects for certain 
	functions. i.e. the randn function

	Note : THi 

"""

def inputToNumToString(thisItem, worksheet, thisInput):

	print('In the input to num to string function')

	fullString=""

	for x in thisInput:

		if fullString=="":
			fullString=str(x)
		else:
			fullString=fullString+","+str(x)


	print("Returning "+str(fullString))

	return fullString




"""
	This function is called several times throughout the equation process. It takes in the name of an equation and its 
	location on the page. It then goes through the worksheet object and matches the name. If it finds a match, it looks 
	for the latest match prior to the equation in question. 

"""


def matchClosestEquation(thisItem, worksheet, thisName, thisLocation, thisID, SVAindex, insert):
	#print('In the match closest equation function looking to match '+thisName+' at '+str(thisLocation)+' - '+str(SVAindex)+' - '+str(worksheet[thisID].Solution_variable_array[SVAindex]))
	print('In the match closest equation function looking to match '+thisName+' at '+str(thisLocation)+' with parent '+str(thisItem.Page_parentid))


	fileID=worksheet[thisID].fileid
	re1=re.compile("^File")
	re2=re.compile("^[0-9]+")
	re3 = re.compile("^[\-]?[1-9][0-9]*\.?[0-9]+$")
	tempText=re1.sub("", thisID)
	thisFile=re2.match(tempText)
	thisLoc=worksheet[worksheet[thisID].Original_id].order
	position=-1
	dirMatch=0
	breakFlag=0
	childPos=0
	answer=0

	#print("The re3 and name are "+str(re3)+" - "+str(thisName)+" - "+str(re3.match(thisName)))


	if re.match(re3, thisName)==None and thisName!="*" and thisName!="/" and thisName!="+" and thisName!="-":

		if worksheet[thisID].Page_parentid=="none":
			parentType="none"
		else:
			parentType=worksheet[worksheet[thisID].Page_parentid].content['type']
			parent=worksheet[thisID].Page_parentid
		
		print('The parent type is '+str(parentType))

		# For each item in the worksheet, step through and run a series of tests to see if it is the closest matching equation
		for index, item in enumerate(worksheet):
			tempText=re1.sub("", item)
			testFile=re2.match(tempText)

			# Ensure that the file for this item matches the file being solved
			#print("Comparing "+str(testFile.group(0))+" to "+str(thisFile.group(0)))
			if testFile.group(0)==thisFile.group(0) and worksheet[item].component_type_id==3:
				testName=worksheet[item].Format_name
				testLoc=worksheet[worksheet[item].Original_id].order
				testActive=worksheet[item].content['active']
				#print("The name is "+str(testName)+" with location of "+str(testLoc)+" and active "+str(testActive))

				# If name matches and this is a dataset input
				if testName==thisName and worksheet[item]['DatasetID']:
					answer=item

				# If the item we are matching is a top level equation or part of an if/else statement
				elif parentType=="none" or parentType=="ifelse" or parentType=="elseif" or parentType=="else":

					# If the name matches and the location is before the item being solved and after any previous matches
					if testName==thisName and testLoc>position and testLoc<thisLoc and testActive==1:
						answer=item
						position=worksheet[item].order
						print("1 Matched "+str(item)+" at "+str(worksheet[item].order))

				# When we are solving for a loop, special precautions have to be taken
				else:
					type=worksheet[worksheet[thisID].Page_parentid].content['type']
					count=worksheet[worksheet[thisID].Page_parentid].content[type]['Loop_counterValue']

					#print(str(testName)+"=="+str(thisName)+" : "+str(testLoc)+">"+str(position)+" : "+str(testLoc)+"<"+str(thisLoc)+" : "+str(testActive)+" : "+str(count))
					# When the loop is first being set, we look to parameters ahead of the loop
					if testName==thisName and testLoc>position and testLoc<thisLoc and testActive==1 and count==0:
						answer=item
						position=worksheet[item].order
						print("2 Matched "+str(item)+" at "+str(worksheet[item].order))


					# When the loop is active, values can be taken from this location
					print('------------------------------------------------------')
					print(str(testName)+' == '+str(thisName)+' and '+str(testLoc)+'>'+str(position)+' and '+str(testLoc)+'<='+str(thisLoc)+' and '+str(testActive)+'==1 and '+str(count)+'!=0')
					if testName==thisName and testLoc>position and testLoc<=thisLoc and testActive==1 and count!=0:
						answer=item
						position=worksheet[item].order
						print("3 Matched "+str(item)+" at "+str(worksheet[item].order))
						if testLoc==thisLoc:
							dirMatch=1

		if (parentType=="forLoop" or parentType=="whileLoop") and (worksheet[worksheet[thisID].Page_parentid].content[parentType]['Loop_countervalue']!=0 and dirMatch==0):
			if position>worksheet[parent].order:
				breakFlag=1
			else:
				breakFlag=0

			while (parentType=="forLoop" or parentType=="whileLoop" or parentType=="ifelse") and breakFlag==0:
				for childIndex, childItem in worksheet[parent]['children'].items():
					thisType=worksheet[childIndex]['type']
					testName=worksheet[childIndex]['name']
					testLoc=worksheet[childIndex]['order']
					parentLoc=worksheet[parent]['order']
					if thisType=="equation" and worksheet[childIndex]['active']==1 and testName==thisName and testLoc>thisLoc and testLoc>childPos:
						answer=childIndex
						childPos=worksheet[childIndex]['order']
						breakflag=1

				parent=worksheet[parent].content['parentid']
				if parent=="none":
					parentType="none"
				else:
					parentType=worksheet[parent].content['type']


		if insert==1:
			try: 
				worksheet[answer]
	
				if worksheet[answer].content['type']=="equation" and answer!=thisName:

					print("**************************")
					print('The shape is '+str(worksheet[answer].fullMat.shape[0])+' - '+str(worksheet[answer].fullMat.shape[1]))
					print('The shape is '+str(worksheet[answer].fullMat.shape[0]==0)+' - '+str(worksheet[answer].fullMat.shape[1]==0))

					if worksheet[answer].fullMat.shape[0]==0 or worksheet[answer].fullMat.shape[1]==0:
						print('------Here')
						worksheet[answer].fullMat=np.zeros((1,1))
						worksheet[answer].Format_size="1x1"
						print('------Here 2')

					print("**************************")
					print('The full mat is '+str(worksheet[answer].fullMat))
					print('The full mat size is '+str(worksheet[answer].Format_size))

					#print("-->-->-->The answer is "+str(answer)+" and it is "+str(worksheet[answer].Solution_real)+" - "+str(worksheet[answer].Units_units)+" - "+str(worksheet[answer].Units_base_array))
					print('I am setting the match to '+str(worksheet[answer].fullMat[[0][0]])+' with a size of '+str(worksheet[answer].Format_size))
					eqObj={	"Page_position":worksheet[thisID].order, 
							"equation":"MyEq=0", 
							"Format_showtype":"variable", 
							"Format_name":"MyEq" }

					newid=thisItem.createEq(thisItem, worksheet, worksheet[thisID].fileid, 0, eqObj)
					worksheet[newid].Format_showequation=thisName
					worksheet[newid].Format_size=worksheet[answer].Format_size
					worksheet[newid].Solution_real=worksheet[answer].Solution_real
					worksheet[newid].Solution_imag=worksheet[answer].Solution_imag
					worksheet[newid].fullMat=worksheet[answer].fullMat
					worksheet[newid].Units_units=worksheet[answer].Units_units
					worksheet[newid].basearray=worksheet[answer].Units_base_array
					worksheet[newid].Units_base_basearray=worksheet[answer].Units_base_array
					worksheet[newid].name="MyEq"
					worksheet[thisID].Solution_variable_array[SVAindex]=newid
					worksheet[thisID].Solution_temps.append(newid)



					if worksheet[thisID].Format_showtype=="top" and worksheet[thisID].Format_name!="TempEq":
						worksheet[worksheet[thisID].Format_id].Dependents[answer]="1"
					elif worksheet[thisID].Format_showtype=="InnerFunction":
						worksheet[worksheet[thisID].Original_id].Dependents[answer]="1"
					elif worksheet[thisID].Format_name!="TempEq":
						worksheet[worksheet[thisID].Original_id].Dependents[answer]="1"

					if answer==worksheet[thisID].Original_id:
						del worksheet[worksheet[thisID].Original_id].Dependents[answer]

			except:
				print()


	return answer	
"""

	This function multiplies or divides two numbers with or without units. This is done by performing the math on the number for each item as it should 
	already be converted to the normalized SI units and then adding the units if it is multiplication or subtracting if it is division.
	For complex numbers, the multiplication algorithm follows the pattern: (a+bi)*(c+di)=ac+adi+bci+bdi^2=ac-bd+(ad+bc)i
	For division, the algorithm for complex numbers uses the complex conjugate : (a+bi)/(c+di)=((a+bi)*(c-di))/((c+di)*(c-di)) and is then divided out.

"""

def multDivNumbers(thisItem, worksheet, id1, id2, operator, thisid):

	print('In the mult div numbers function with an operator of '+operator+' and numbers '+str(worksheet[id1].fullMat)+' '+str(worksheet[id1].Units_units)+' - '+str(worksheet[id2].fullMat)+' '+str(worksheet[id2].Units_units))

	# Make sure that all of the items involved have real and imaginary numbers
	if worksheet[id1].fullMat[[0][0]]=='':
		worksheet[id1].fullMat[[0][0]]=0


	if worksheet[id2].fullMat[[0][0]]=='':
		worksheet[id2].fullMat[[0][0]]=0


	if operator=="*":
		val=np.multiply(worksheet[id1].fullMat, worksheet[id2].fullMat)

		if worksheet[id1].Format_showvalue=="FirstNeg":
			val=np.multply(val, -1*j)


	if operator=="/":
		val=np.divide(worksheet[id1].fullMat, worksheet[id2].fullMat)



	baseUnits={}
	for index, item in enumerate(worksheet[id1].Units_base_array):
		if operator=="*":
			baseUnits[item]=np.int(worksheet[id1].Units_base_array[item])+np.int(worksheet[id2].Units_base_array[item])
		if operator=="/":
			baseUnits[item]=np.int(worksheet[id1].Units_base_array[item])-np.int(worksheet[id2].Units_base_array[item])


	
	eqObj={	'Page_position':worksheet[thisid].order, 
			'Format_showtype':"InnerFunction", 
			'Original_id':thisid, 
			'equation':"NumEq=0"	}
	id=thisItem.createEq(thisItem, worksheet, worksheet[thisid].fileid, 0, eqObj)

	worksheet[id].fullMat=np.zeros((1,1), dtype=complex)
	worksheet[id].fullMat[[0][0]]=val
	worksheet[id].Units_base_array=baseUnits

	worksheet[id].Solution_variable_array.append(id)
#	worksheet[id].thisItem.getBaseString()
	worksheet[id].Format_size="1x1"
	return id



"""

	Function to handle the multiplication of matrices

"""


def multMatrices(thisItem, worksheet, id1, id2, operator, thisid):

	print('In the mult div matrices function with an operator of '+operator+' and numbers '+str(worksheet[id1].fullMat)+' '+str(worksheet[id1].Units_units)+' - '+str(worksheet[id2].fullMat)+' '+str(worksheet[id2].Units_units))


	if operator=="*":
		vals=np.matmul(worksheet[id1].fullMat, worksheet[id2].fullMat)

		if worksheet[id1].Format_showvalue=="FirstNeg":
			vals=np.multply(vals, -1*j)


	baseUnits={}
	for index, item in enumerate(worksheet[id1].Units_base_array):
		baseUnits[item]=np.int(worksheet[id1].Units_base_array[item])+np.int(worksheet[id2].Units_base_array[item])

	
	eqObj={	'Page_position':worksheet[thisid].order, 
			'Format_showtype':"InnerFunction", 
			'Original_id':thisid, 
			'equation':"NumEq=0"	}
	id=thisItem.createEq(thisItem, worksheet, worksheet[thisid].fileid, 0, eqObj)

	worksheet[id].fullMat=np.zeros((1,1), dtype=complex)
	worksheet[id].fullMat=vals
	worksheet[id].Units_base_array=baseUnits

	worksheet[id].Solution_variable_array.append(id)
	worksheet[id].Format_size="1x1"
	worksheet[id].getSize(worksheet[id], worksheet)
	return id



"""
	This is the function that handles the mathematics for then a scalar is added, subtracted, or multiplied with
	a matrix. This function is different from the javascript one because I use numpy stuff
"""

def scalarOperation(thisItem, worksheet, operation, id1, id2):

	print("In the scalar operation function")


	# Determine which id is the number and which is the matrix
	if worksheet[id1].Format_size=="1x1":
		numID=id1
		matrixID=id2
		order=1

	if worksheet[id2].Format_size=="1x1":
		numID=id2
		matrixID=id1
		order=2



	# Combine the real and imaginery components of the matrices
	#fullMat1=thisItem.combineRealImag(thisItem, worksheet[id1].Solution_real, worksheet[id1].Solution_imag)
	#fullMat2=thisItem.combineRealImag(thisItem, worksheet[id2].Solution_real, worksheet[id2].Solution_imag)


	# Create the equation that will hold the solution
	eqObj={	"Page_position":worksheet[id1].order, 
			"equation":"ScalarEq=0", 
			"Format_size":worksheet[matrixID].Format_size }
	solveID=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 0, eqObj)


	if operation=="*":
		solMat=np.multiply(worksheet[id1].fullMat, worksheet[id2].fullMat)

	if operation=="+":
		solMat=np.add(worksheet[id1].fullMat, worksheet[id2].fullMat)

	if operation=="-":
		solMat=np.subtract(worksheet[id1].fullMat, worksheet[id2].fullMat)

	if operation=="/":
		if order==1:
			solMat=np.true_divide(worksheet[id1].fullMat, worksheet[id2].fullMat)
		if order==2:
			solMat=np.true_divide(worksheet[id2].fullMat, worksheet[id1].fullMat)


	worksheet[solveID].fullMat=copy.deepcopy(solMat)

	#worksheet[solveID].Solution_real=np.real(solMat)
	#worksheet[solveID].Solution_imag=np.imag(solMat)
	worksheet[solveID].Format_size=getNumpySize(solMat)


	return solveID


"""

	This function is used as data is parsed when the equation solver or other routines are initial kicked off. The algorithm looks at the 
	object and then places each entry into the numpy array.

"""

def objectToNumpy(realObject, imagObject):
	
	print('In the object to numpy function')

	# Set the list for the maximum indexes
	maxes=[]
	maxes.append(0)
	maxes.append(0)

	maxList=[]

	# Loop through the object and get the maxes for each index
	for index, item in enumerate(realObject):

		maxList=[]

		indices=item.split('-')

		for a in range(0, len(indices), 1):
			
			try:
				maxes[a]
			except:
				maxes[a]=0

			if np.int_(indices[a])>np.int_(maxes[a]):
				maxes[copy.copy(a)]=copy.copy(np.int_(indices[a]))


	# Make a list for the maxes and then make that into a tuple
	for a in range(0, len(maxes), 1):
		maxList.append(np.int_(maxes[a])+np.int_(1))
	maxTuple=tuple(maxList)


	# Create an array for the object populated with zeros
	#numpyArray=np.complex128(maxTuple)
	numpyArray=np.zeros(maxTuple, dtype=complex)


	# Now loop through the object again and place the values in the proper location
	for index, item in enumerate(realObject):

		tempList=[]
		indices=item.split('-')
		for a in range(0, len(indices), 1):
			tempList.append(np.int_(indices[a]))
		locTuple=tuple(tempList)

		try:
			imagObject[item]
			imagValue=imagObject[item]
			setValue=np.float(realObject[item])+imagValue*1j
		except:
			imagValue=0
			setValue=np.float(realObject[item])

		numpyArray.itemset(locTuple, setValue)


	return numpyArray

"""

	This function is used when an object is returned to the web page and the solved numpy array needs to be converted back
	into the object with indices.

"""

def numpyToObject(thisNumpy, thisType):
	
	print('In the numpy to object function')

	thisObject={}

	objShape=thisNumpy.shape
	print('The shape is '+str(objShape))

	# Need to make sure that the item is not empty
	newShape=re.sub('\(', '', str(objShape))
	newShape=re.sub('\)', '', newShape)
	newShape=re.sub('\s', '', newShape)

	indices=newShape.split(',')
	thisSum=1
	for index in range(0, len(indices), 1):
		thisSum=thisSum*np.int_(indices[index])


	if thisSum>0:
		# Loop through the numpy array
		it = np.nditer(thisNumpy, flags=['multi_index'])
		while not it.finished:
			
			tempString=re.sub('[\(\)]','',str(it.multi_index))
			tempString=re.sub('\s','',tempString)
			indexes=tempString.split(',')
			indexText=''
			
			for tempIndex, item in enumerate(indexes):
				if tempIndex==0:
					indexText=indexText+item
				else:
					indexText=indexText+'-'+item

			if thisType=="imag":
				thisObject[indexText]=np.float(np.imag(it[0]))

			else:
				thisObject[indexText]=np.float(np.real(it[0]))

			it.iternext()

	return thisObject




"""

	Return the size of the numpy array sent

"""

def getNumpySize(thisNumpy):
	
	print('In the get numpy size function')

	sizeTuple=thisNumpy.shape

	thisSize=''

	for a in range(0, len(sizeTuple), 1):

		if a==0:
			thisSize=thisSize+str(sizeTuple[a])

		if a>0:
			thisSize=thisSize+'x'+str(sizeTuple[a])

	return thisSize
"""
	This function takes the equation and populates the components of the equation object necessary to solve the equations.
	Case 1 - the equation starts with an equal sign this is usually in a table element
	Case 2 - a show equation
	Case 3 - a matrix component	
	Case 4 - A standard equation with no inputs
	Case 5 - The case where the user is calling  [a, b] = Function(inputs)
"""

def populateEquation(thisItem, equation):
	print('In populate equation function with an equation of '+str(equation))
	re1=re.compile("/^\s+|\s+$/g")
	thisItem.Format_equation=re1.sub("", equation)
	thisItem.Format_showequation="Error"
	thisItem.Errors_errors=[]
	thisItem.Errors_flag=0
	if thisItem.Page_parentid:
		thisItem.Page_parentid=thisItem.Page_parentid
	else:
		thisItem.Page_parentid="none"
	if thisItem.Page_topparentid:
		thisItem.Page_topparentid=thisItem.Page_topparentid
	else:
		thisItem.Page_topparentid="none"

	# Set up the regular expression tests
	re1=re.compile("/\=$")
	re2=re.compile("/\]=")
	re3=re.compile("=")

	#SubEquation
	if thisItem.Format_showtype=="subequation":
		thisItem.Parse_Inputs();

	#Show Equation - ends with equals sign
	elif re.search('/\=$', thisItem.Format_equation) is not None:
		temp=thisItem.Format_equation.replace("/\=$/", '')
		temp=temp.toString().replace("/^\s+|\s+$/g", '')
		thisItem.Format_left=temp
		thisItem.Format_right=temp
		thisItem.Format_name=temp
		thisItem.Format_equation=temp
		thisItem.Format_equationinuse=temp
		thisItem.Format_type='5'


	#Setting the components of a matrix
	elif re.search('\]=', thisItem.Format_equation) is not None and re.search('^\[', thisItem.Format_equation) is None:
		split_eq=equation.split('=')
		thisItem.Format_left=split_eq[0].replace("/^\s+|\s+$/g", '')
		thisItem.Format_right=split_eq[1]
		thisItem.Format_equationinuse=split_eq[1]
		thisItem.Format_name=thisItem.Format_left.replace("/\[[\:\+\-\*\\0-9,a-z,A-Z]+\]/g",'')
		thisItem.Format_type='3'


	#If those conditions are not met it is standard or function inputs
	else:
		thisItem.Format_type='1'
		# Make sure that there is an equal sign somewhere in the equation
		if re.search(re3, thisItem.Format_equation)=="None": 	
			thisItem.setError(thisItem.Original_id, worksheet, "Format7")
			thisItem.returnEquation() 

		#
		else:
			temp=re.split('=', thisItem.Format_equation, 1)
			re5=re.compile("^\s+|\s+$")
			thisItem.Format_left=re5.sub("", temp[0])
			thisItem.Format_right=re5.sub("", temp[1])
			re6=re.compile("\[[0-9,a-z,A-Z]+\]")
			thisItem.Format_name=re6.sub('', temp[0])
			re7=re.compile("^\s+|\s+$")
			thisItem.Format_name=re7.sub('', thisItem.Format_name)
			thisItem.Format_equation=re7.sub('', thisItem.Format_equation)
			re8=re.compile("^\[")
			if re8.search(thisItem.Format_equation):
				thisItem.Format_type='6'

	thisItem.Units_showunits=''
	thisItem.Models_numerical=''
	thisItem.Models_units=''
	thisItem.Models_dimensions=''
	thisItem.Models_quantities=''
	# if (DOM_Object[this.Format_id]!==undefined) { DOM_Object[this.Format_id]['name']=this.Format_name;	}							//  |



def setError(thisItem, worksheet, thisID, thisError, arg1, arg2):
	print('In set Error function with an error type of '+thisError)


	worksheet[thisID].Errors_flag=1
	worksheet[thisID].Errors_flag=1
	try:
		worksheet[worksheet[thisID].Original_id]
		worksheet[worksheet[thisID].Original_id].Errors_flag=1
	except:
		test=1

	if thisError=="NoEntry": worksheet[thisID].Errors_errors.append("The function "+str(arg1)+" did not receive an input as expected.")
	if thisError=="Input1": worksheet[thisID].Errors_errors.append("The function "+str(arg2)+" received "+str(arg1)+" inputs - which is too many")
	if thisError=="Input2": worksheet[thisID].Errors_errors.append("The function "+str(arg2)+" received "+str(arg1)+" inputs which is too few")

	if thisError=="Math1": worksheet[thisID].Errors_errors.append("You have attempted to add a "+str(worksheet[arg1].Units_quantity)+" to a "+str(worksheet[arg2].Units_quantity)+" by adding "+str(worksheet[arg1].Format_showequation)+" to "+str(worksheet[arg2].Format_showequation))
	if thisError=="Math2": worksheet[thisID].Errors_errors.append("You have attempted to subtract a "+str(worksheet[arg1].Units_quantity)+" and a "+str(worksheet[arg2].Units_quantity)+" by subtracting "+str(worksheet[arg2].Format_showequation)+" from "+str(worksheet[arg1].Format_showequation))
	if thisError=="Math3": worksheet[thisID].Errors_errors.append("You are attempting to add a "+str(worksheet[arg1].Format_size)+" matrix to one that is "+str(worksheet[arg2].Format_size))
	if thisError=="Math4": worksheet[thisID].Errors_errors.append("You are attempting to subtract a "+str(worksheet[arg1].Format_size)+" matrix to one that is "+str(worksheet[arg2].Format_size))

	if thisError=="Format1": worksheet[thisID].Errors_errors.append("The name "'+str(worksheet[thisID].Format_name))+'" is the name of a constant and cannot be reset.")
	if thisError=="Format2": worksheet[thisID].Errors_errors.append('The item "'+str(arg1)+'" was not identified as a variable, input, constant, or mathematics item. Check the spelling of the item if it was intended to be a variable.')
	if thisError=="Format3": worksheet[thisID].Errors_errors.append("The units entered \""+str(worksheet[arg1].Units_units)+"\" do match any current units.")
	if thisError=="Format4": worksheet[thisID].Errors_errors.append("The equation has an unmatched closing or opening parenthesis.")
	if thisError=="Format5": worksheet[thisID].Errors_errors.append("The equation has an unmatched closing or opening square bracket.")
	if thisError=="Format6": worksheet[thisID].Errors_errors.append("The name of an equation cannot be TempEq as this is a reserved phrase.")
	if thisError=="Format7": worksheet[thisID].Errors_errors.append("No equation was found. Check to ensure that the equation has a name=equation format.")
	if thisError=="Format8": worksheet[thisID].Errors_errors.append("No name was found. Check to ensure that the equation has the format name=equation.")
	if thisError=="Format9": worksheet[thisID].Errors_errors.append("There was no matching equation found for the one you are trying to display - "+str(worksheet[thisID].Format_name)+".")
	if thisError=="Format10": worksheet[thisID].Errors_errors.append("You are attempting to set the indices of a matrix that does not exist. - "+str(worksheet[thisID].Format_name)+".")
	if thisError=="Format11": worksheet[thisID].Errors_errors.append("You are attempting to take a temperature to a power - something that should not happen. - "+str(worksheet[thisID].Format_name)+".")
	if thisError=="Format12": worksheet[thisID].Errors_errors.append("The name of an equation matched a unit, which is illegal.")
	if thisError=="Format13": worksheet[thisID].Errors_errors.append("The name of an equation must contain at least one letter.")
	if thisError=="Format14": worksheet[thisID].Errors_errors.append("The name of the equation entered contained something other than a letter, number, _, ^, { or }.")
	if thisError=="Format15": worksheet[thisID].Errors_errors.append("The equation must contain an equal sign.")

	if thisError=="ForLoop1": worksheet[thisID].Errors_errors.append("The parameters entered will not generate any iterations of this loop.")
	if thisError=="ForLoop2": worksheet[thisID].Errors_errors.append("One of the loop counters - a, b, c, etc - is reset within the loop. This is not allowed.")
	if thisError=="ForLoop3": worksheet[thisID].Errors_errors.append("The equation entered for the start value resulted in an error. Make sure that all variables and constants are spelled correctly and have been properly declared.")
	if thisError=="ForLoop4": worksheet[thisID].Errors_errors.append("The equation entered for the stop value resulted in an error. Make sure that all variables and constants are spelled correctly and have been properly declared.")
	if thisError=="ForLoop5": worksheet[thisID].Errors_errors.append("The equation entered for the increment value resulted in an error. Make sure that all variables and constants are spelled correctly and have been properly declared.")

	if thisError=="WhileLoop1": worksheet[thisID].Errors_errors.append("The flag is not reset within the while loop, leading to an infinite loop.")
	if thisError=="WhileLoop2": worksheet[thisID].Errors_errors.append("The equation entered for the flag value produced an error. Check to make sure that any variables were spelled correctly and declared properly.")
	if thisError=="WhileLoop3": worksheet[thisID].Errors_errors.append("The equation entered for the dependent value produced an error. Check to make sure that any variables were spelled correctly and declared properly.")

	if thisError=="Flag" : worksheet[thisID].Errors_errors.push("The equation entered for the flag value produced an error. Check to make sure that any variables were spelled correctly and declared properly.")
	if thisError=="Dependent": worksheet[thisID].Errors_errors.append("The equation entered for the dependent value produced an error. Check to make sure that any variables were spelled correctly and declared properly.")

	if thisError=="Transpose1": worksheet[thisID].Errors_errors.append("The Transpose function received more than one input.")
	if thisError=="Transpose2": worksheet[thisID].Errors_errors.append("You are transposing a matrix that is not two-dimensional.")
	if thisError=="DotProduct1": worksheet[thisID].Errors_errors.append("You are attempting to perform component multiplication of two matrices of unequal size.")

	if thisError=="FAF1": worksheet[thisID].Errors_errors.append("The function called returns multiple values, but the results are used in an equation.")

	if thisError=="Indices1": worksheet[thisID].Errors_errors.append("You are attempting to set an index that is outside of the size of the matrix.")
	
	if thisError=="NC1": worksheet[thisID].Errors_errors.append("The total number of points is not correct for a second order equation of Newton-Cotes.")
	if thisError=="NC2": worksheet[thisID].Errors_errors.append("The total number of points is not correct for a third order equation of Newton-Cotes.")
	if thisError=="NC3": worksheet[thisID].Errors_errors.append("The total number of points is not correct for a fourth order equation of Newton-Cotes.")
	if thisError=="NC4": worksheet[thisID].Errors_errors.append("The Newton-Cotes method expects to receive 3 inputs.")
	if thisError=="NC5": worksheet[thisID].Errors_errors.append("The Newton-Cotes method expects to receive 3 inputs.")
	if thisError=="NC6": worksheet[thisID].Errors_errors.append("The X and Y data for the Newton Cotes method must be the same length.")
	if thisError=="NC7": worksheet[thisID].Errors_errors.append("The order must be a single number.")
	if thisError=="NC8": worksheet[thisID].Errors_errors.append("The x and y vectors were not long enough for the NC calculations.")

	if thisError=="Integrate1": worksheet[thisID].Errors_errors.append("The integration algorithm expects 2 inputs.")
	if thisError=="Integrate2": worksheet[thisID].Errors_errors.append("The integration algorithm expects 2 inputs.")
	if thisError=="Integrate3": worksheet[thisID].Errors_errors.append("The length of the x and y vectors must match for the integration function.")
	if thisError=="Integrate4": worksheet[thisID].Errors_errors.append("The vector was not long enough for the integration algorithm.")

	if thisError=="Root1": worksheet[thisID].Errors_errors.append("This equation resulted in units that were not whole numbers.")

	if thisError=="Trig1": worksheet[thisID].Errors_errors.append("Trig functions expect to see one number or variable. You entered "+str(arg1)+" variables into a "+str(arg2)+" function.")
	if thisError=="Trig2": worksheet[thisID].Errors_errors.append("The function "+str(arg1)+" received units of "+str(arg2)+" and it should receive either degrees, radians, or no units.")

	if thisError=="Min1": worksheet[thisID].Errors_errors.append("You called the min function with no inputs.")
	if thisError=="Max1": worksheet[thisID].Errors_errors.append("You called the max function with no inputs.")

	if thisError=="Min2": worksheet[thisID].Errors_errors.append("You are comparing inconsistent units within a min function.")
	if thisError=="Max2": worksheet[thisID].Errors_errors.append("You are comparing inconsistent units within a max function.")

	if thisError=="Abs1": worksheet[thisID].Errors_errors.append("The absolute value function received more than one input.")

	if thisError=="Floor1": worksheet[thisID].Errors_errors.append("You called the floor function with no inputs.")
	if thisError=="Floor2": worksheet[thisID].Errors_errors.append("You called the floor function with more than 2 inputs. If you are trying to enter units, the second entry must be an array as in [ft, s, kg]")
	if thisError=="Floor3": worksheet[thisID].Errors_errors.append("The floor function requires that the second input be a known unit.")

	if thisError=="Ceil1": worksheet[thisID].Errors_errors.append("You called the ceil function with no inputs.")
	if thisError=="Ceil2": worksheet[thisID].Errors_errors.append("You called the ceil function with more than 2 inputs. If you are trying to enter units, the second entry must be an array as in [ft, s, kg]")
	if thisError=="Ceil3": worksheet[thisID].Errors_errors.append("The ceil function requires that the second input be a known unit.")

	if thisError=="Round1": worksheet[thisID].Errors_errors.append("You entered more than 2 entries into the round function.")
	if thisError=="Round2": worksheet[thisID].Errors_errors.append("The precision given for the round function must be an integer.")

	if thisError=="log1": worksheet[thisID].Errors_errors.append("The log function expects at least 2 entries.")
	if thisError=="log2": worksheet[thisID].Errors_errors.append("The log function cannot take more than 2 entries.")
	if thisError=="log3": worksheet[thisID].Errors_errors.append("You attempted to take the logarithm of 0.")

	if thisError=="Power1": worksheet[thisID].Errors_errors.append("The power function expects to receive 2 entries.")
	if thisError=="Power2": worksheet[thisID].Errors_errors.append("The power function cannot handle more than 2 entries.")
	if thisError=="Power3": worksheet[thisID].Errors_errors.append("You attempted to use an exponent that had units.")
	if thisError=="Power4": worksheet[thisID].Errors_errors.append("The exponent entered was not a single number nor equal in size to the base.")
	if thisError=="Power5": worksheet[thisID].Errors_errors.append("The resulting power function had units of "+str(arg1)+" which was not a whole number.")

	if thisError=="Root1": worksheet[thisID].Errors_errors.append("The root function expects to receive 2 entries.")
	if thisError=="Root2": worksheet[thisID].Errors_errors.append("The root function cannot handle more than 2 entries.")
	if thisError=="Root3": worksheet[thisID].Errors_errors.append("You attempted to use a root that has units.")
	if thisError=="Root4": worksheet[thisID].Errors_errors.append("The root number entered was not a single number nor equal in size to the equation.")
	if thisError=="Root5": worksheet[thisID].Errors_errors.append("The resulting root function had units of "+str(arg1)+" which was not a whole number.")

	if thisError=="Derivative1": worksheet[thisID].Errors_errors.append("The derivative function expects to receive 4 entries.")
	if thisError=="Derivative2": worksheet[thisID].Errors_errors.append("The derivative function expects to receive 4 entries.")
	if thisError=="Derivative3": worksheet[thisID].Errors_errors.append("The order must be a 1, 2, 3, or 4.")
	if thisError=="Derivative4": worksheet[thisID].Errors_errors.append("The accuracy must be a 1 or a 2.")
	if thisError=="Derivative5": worksheet[thisID].Errors_errors.append("The vectors were not long enough to perform the derivative calculation.")

	if thisError=="DerivativeUn1": worksheet[thisID].Errors_errors.append("The derivative function expects to receive 3 entries.")
	if thisError=="DerivativeUn2": worksheet[thisID].Errors_errors.append("The derivative function expects to receive 3 entries.")
	if thisError=="DerivativeUn3": worksheet[thisID].Errors_errors.append("The x location asked for in DerivativeUn - "+str(arg1)+" - is not within the original x vector.")
	if thisError=="DerivativeUn4": worksheet[thisID].Errors_errors.append("The sampled x locations and the y data must be the same length for DerivativeUn.")
	if thisError=="DerivativeUn5": worksheet[thisID].Errors_errors.append("The vectors were not long enough to perform the derivative calculation.")

	if thisError=="Vector1": worksheet[thisID].Errors_errors.append("To make a vector from a table, either the columns or the rows of the two table elements must be equal.")
	if thisError=="Vector2": worksheet[thisID].Errors_errors.append("To make a vector from a table, the second row entered must be a greater number than the first.")

	if thisError=="Identity1": worksheet[thisID].Errors_errors.append("The Identity function expects to take in a single number as its input.")

	if thisError=="CreateMatrix1": worksheet[thisID].Errors_errors.append("The CreateMatrix function expects to take in 4 arguments - the real default, the imaginary default, and the number of rows and columns..")

	if thisError=="Size1": worksheet[thisID].Errors_errors.append("The size function expects to receive 2 inputs, but recieved more.")
	if thisError=="Size2": worksheet[thisID].Errors_errors.append("The size function expects to receive 2 inputs, but received only 1.")

	if thisError=="Real1": worksheet[thisID].Errors_errors.append("The Real function expects to receive 1 input, but recieved more.")
	if thisError=="Imag1": worksheet[thisID].Errors_errors.append("The Imag function expects to receive 1 input, but received more.")

	if thisError=="rand1": worksheet[thisID].Errors_errors.append("The rand function did not receive the correct number of inputs - 3.")
	if thisError=="rand2": worksheet[thisID].Errors_errors.append("The lower limit of the random number was higher than the higher limit entered.")
	if thisError=="rand3": worksheet[thisID].Errors_errors.append("The precision entered for the random number generator was less than 0.")
	if thisError=="randMat1": worksheet[thisID].Errors_errors.append("The randMat function did not receive the correct number of inputs - 5.")
	if thisError=="randMat2": worksheet[thisID].Errors_errors.append("The lower limit of the random number was higher than the higher limit entered.")
	if thisError=="randMat3": worksheet[thisID].Errors_errors.append("The precision entered for the random number generator was less than 0.")

	if thisError=="GaussE1": worksheet[thisID].Errors_errors.append("The GaussE function expects to receive 2 inputs and received more than that.")
	if thisError=="GaussE2": worksheet[thisID].Errors_errors.append("The coefficient matrix received by the GaussE function was not square.")
	if thisError=="GaussE3": worksheet[thisID].Errors_errors.append("The size of the coefficient matrix must match the number of rows in the results vector.")
	if thisError=="GaussE4": worksheet[thisID].Errors_errors.append("The results vector was not in the form of a column vector.")

	if thisError=="Mean1": worksheet[thisID].Errors_errors.append("The mean function failed to receive an input.")
	if thisError=="Mean2": worksheet[thisID].Errors_errors.append("The mean function received units that were of different quantities.")
	if thisError=="Median1": worksheet[thisID].Errors_errors.append("The median function failed to receive an input.")
	if thisError=="Median2": worksheet[thisID].Errors_errors.append("The median function received units that were of different quantities.")
	if thisError=="Mode1": worksheet[thisID].Errors_errors.append("The mode function failed to receive an input.")
	if thisError=="Mode2": worksheet[thisID].Errors_errors.append("The mode function received units that were of different quantities.")
	if thisError=="Range1": worksheet[thisID].Errors_errors.append("The range function failed to receive an input.")
	if thisError=="Range2": worksheet[thisID].Errors_errors.append("The range function received units that were of different quantities.")
	if thisError=="Sum1": worksheet[thisID].Errors_errors.append("The sum function failed to receive an input.")
	if thisError=="Sum2": worksheet[thisID].Errors_errors.append("The sum function received units that were of different quantities.")

	if thisError=="StdDev1": worksheet[thisID].Errors_errors.append("The standard deviation function failed to receive an input.")
	if thisError=="Variance1": worksheet[thisID].Errors_errors.append("The variance function failed to receive an input.")
	if thisError=="CV1": worksheet[thisID].Errors_errors.append("The coefficient of variation function failed to receive an input.")

	if thisError=="Polyfit1": worksheet[thisID].Errors_errors.append("The polyfit function expects 3 inputs and recieved less than that.")
	if thisError=="Polyfit2": worksheet[thisID].Errors_errors.append("The polyfit function expects 3 inputs and recieved more than that.")
	if thisError=="Polyfit3": worksheet[thisID].Errors_errors.append("The polyfit function can output a coefficient vector and a coefficients of determination. It cannot output more than two items.")
	if thisError=="Polyfit4": worksheet[thisID].Errors_errors.append("The polynomial type entered into polyfit must be a single integer. Its size was "+str(worksheet[arg1].Format_size)+" and its value was "+str(worksheet[arg1].fullMat[[0][0]]))
	if thisError=="Polyfit5": worksheet[thisID].Errors_errors.append("The x and y vectores entered into polyfit were not the same size. The x vector was "+str(worksheet[arg1].Format_size)+" and the y vector was "+str(worksheet[arg2].Format_size))

	if thisError=="Logfit1": worksheet[thisID].Errors_errors.append("The logfit function expects 2 inputs")
	if thisError=="Logfit2": worksheet[thisID].Errors_errors.append("The x and y vectors sent to logfit were not of equal size.")
	if thisError=="Logfit3": worksheet[thisID].Errors_errors.append("The logfit function can only output 2 arguments. More than that number was requested.")

	if thisError=="Expfit1": worksheet[thisID].Errors_errors.append("The expfit function expects 2 inputs")
	if thisError=="Expfit2": worksheet[thisID].Errors_errors.append("The x and y vectors sent to expfit were not of equal size.")
	if thisError=="Expfit3": worksheet[thisID].Errors_errors.append("The logfit function can only output 2 arguments. More than that number was requested.")

	if thisError=="Powerfit1": worksheet[thisID].Errors_errors.append("The powerfit function expects 2 inputs")
	if thisError=="Powerfit2": worksheet[thisID].Errors_errors.append("The x and y vectors sent to powerfit were not of equal size.")
	if thisError=="Powerfit3": worksheet[thisID].Errors_errors.append("The powerfit function can only output 2 arguments. More than that number was requested.")

	if thisError=="Histogram1": worksheet[thisID].Errors_errors.append("The Histogram function expects 2 inputs")
	if thisError=="Histogram3": worksheet[thisID].Errors_errors.append("The histogram function can only output 2 items.")

	if thisError=="numinds1": worksheet[thisID].Errors_errors.append("The numinds function received more than one input.")

	if thisError=="Cholesky1": worksheet[thisID].Errors_errors.append("You entered more than 1 entry into the Cholesky function.")
	if thisError=="Cholesky2": worksheet[thisID].Errors_errors.append("The matrix entered into the Cholesky function was not square.")
	if thisError=="Cholesky3": worksheet[thisID].Errors_errors.append("The matrix entered into the Cholesky function was not symmetric.")

	if thisError=="Norm1": worksheet[thisID].Errors_errors.append("The Norm function did not receive two inputs as needed.")
	if thisError=="Norm2": worksheet[thisID].Errors_errors.append("The number entered for the norm - "+str(arg2)+" was not an integer.")

	if thisError=="RSNorm1": worksheet[thisID].Errors_errors.append("The RSNorm function received more than one input.")
	if thisError=="CSNorm1": worksheet[thisID].Errors_errors.append("The CSNorm function received more than one input.")

	if thisError=="Trace1": worksheet[thisID].Errors_errors.append("The Trace function received more than 1 input.")
	if thisError=="Trace2": worksheet[thisID].Errors_errors.append("The matrix entered into the Trace function was not square.")

	if thisError=="Conj1": worksheet[thisID].Errors_errors.append("The Trace function did not receive one input as needed.")

	if thisError=="DotMult1": worksheet[thisID].Errors_errors.append("The DotMult function needs to inputs.")
	if thisError=="DotMult2": worksheet[thisID].Errors_errors.append("The two matrices given to the DotMult program must be the same size.")
	if thisError=="DotDiv1": worksheet[thisID].Errors_errors.append("The DotDiv function needs to inputs.")
	if thisError=="DotDiv2": worksheet[thisID].Errors_errors.append("The two matrices given to the DotDiv program must be the same size.")

	if thisError=="Threshold1": worksheet[thisID].Errors_errors.append("The Threshold function did not receive three inputs as needed.")
	if thisError=="Threshold2": worksheet[thisID].Errors_errors.append("The lower limit was higher than the high limit for the Threshold function.")

	if thisError=="Cross1": worksheet[thisID].Errors_errors.append("The Cross function did not receive two inputs as needed.")
	if thisError=="Cross2": worksheet[thisID].Errors_errors.append("The vectors for the Cross function must be 1x3 row vectors.")

	if thisError=="isRow1": worksheet[thisID].Errors_errors.append("The isRow function received more than 1 input.")
	if thisError=="isColumn1": worksheet[thisID].Errors_errors.append("The isColumn function received more than 1 input.")
	if thisError=="isMatrix1": worksheet[thisID].Errors_errors.append("The isMatrix function received more than 1 input.")
	if thisError=="length1": worksheet[thisID].Errors_errors.append("The length function received more than 1 input.")
	if thisError=="NumEl1": worksheet[thisID].Errors_errors.append("The NumEl function received more than 1 input.")

	if thisError=="fliplr1": worksheet[thisID].Errors_errors.append("The fliplr function received too many inputs.")
	if thisError=="fliplr2": worksheet[thisID].Errors_errors.append("The fliplr function received a matrix more than two dimensions.")
	if thisError=="flipud1": worksheet[thisID].Errors_errors.append("The flipud function received too many inputs.")
	if thisError=="flipud2": worksheet[thisID].Errors_errors.append("The flipud function received a matrix more than two dimensions.")

	if thisError=="diag1": worksheet[thisID].Errors_errors.append("The diag function received more than two inputs.")
	if thisError=="diag2": worksheet[thisID].Errors_errors.append("The matrix sent to the diag function had more than two dimensions.")
	if thisError=="diag3": worksheet[thisID].Errors_errors.append("The vector sent to the diag function was not a row vector.")
	if thisError=="diag4": worksheet[thisID].Errors_errors.append("The offset to the diag function must be an integer.")
	if thisError=="diag5": worksheet[thisID].Errors_errors.append("The matrix sent to the diag function must be square.")

	if thisError=="matur1": worksheet[thisID].Errors_errors.append("The matur function received more than two inputs.")
	if thisError=="matur2": worksheet[thisID].Errors_errors.append("The offset given to the matur function must be an integer.")
	if thisError=="matur3": worksheet[thisID].Errors_errors.append("The matrix given to matur must be two dimensional.")
	if thisError=="matur4": worksheet[thisID].Errors_errors.append("The matrix given to matur must be square.")

	if thisError=="matll1": worksheet[thisID].Errors_errors.append("The matll function received more than two inputs.")
	if thisError=="matll2": worksheet[thisID].Errors_errors.append("The offset given to the matll function must be an integer.")
	if thisError=="matll3": worksheet[thisID].Errors_errors.append("The matrix given to matll must be two dimensional.")
	if thisError=="matll4": worksheet[thisID].Errors_errors.append("The matrix given to matll must be square.")

	if thisError=="Dot1": worksheet[thisID].Errors_errors.append("The Dot function did not receive the expected 2 inputs.")
	if thisError=="Dot2": worksheet[thisID].Errors_errors.append("The input vectors to the Dot function were not the same size.")
	if thisError=="Dot3": worksheet[thisID].Errors_errors.append("The dimension into the dot product must be a 0 or 1.")

	if thisError=="incSearch1": worksheet[thisID].Errors_errors.append("The incSearch function must receive at least 3 inputs.")
	if thisError=="incSearch2": worksheet[thisID].Errors_errors.append("The incSearch function can receive no more than 5 inputs.")
	if thisError=="incSearch3": worksheet[thisID].Errors_errors.append("The min entered for the incSearch function was greater than the max.")

	if thisError=="Bisect1": worksheet[thisID].Errors_errors.append("The Bisect function must receive at least 3 inputs.")
	if thisError=="Bisect2": worksheet[thisID].Errors_errors.append("The Bisect function can receive no more than 5 inputs.")
	if thisError=="Bisect3": worksheet[thisID].Errors_errors.append("The min entered for the Bisect function was greater than the max.")
	if thisError=="Bisect4": worksheet[thisID].Errors_errors.append("The upper and lower limits for the Bisect function did not produce opposing signs.")

	if thisError=="FalsePos1": worksheet[thisID].Errors_errors.append("The FalsePos function must receive at least 3 inputs.")
	if thisError=="FalsePos2": worksheet[thisID].Errors_errors.append("The FalsePos function can receive no more than 5 inputs.")
	if thisError=="FalsePos3": worksheet[thisID].Errors_errors.append("The min entered for the FalsePos function was greater than the max.")
	if thisError=="FalsePos4": worksheet[thisID].Errors_errors.append("The upper and lower limits for the FalsePos function did not produce opposing signs.")

	if thisError=="Secant1": worksheet[thisID].Errors_errors.append("The Secant function must receive at least 3 inputs.")
	if thisError=="Secant2": worksheet[thisID].Errors_errors.append("The Secant function can receive no more than 4 inputs.")

	if thisError=="MultMat1": worksheet[thisID].Errors_errors.append("When multiplying matrices, the rows in matrix 1 must match the number of columns in matrix 2 and the number of columns in matrix 1 must match the number of rows in matrix 2. You are multuplying matrices of "+str(arg1)+" and "+str(arg2)+".")

	if thisError=="ODE41": worksheet[thisID].Errors_errors.append("The ODE4 function did not receive the required number of inputs (3).")
	if thisError=="ODE42": worksheet[thisID].Errors_errors.append("The number of initial values did not match the number of functions in the ODE4 function.")

	if thisError=="Row2Mat1": worksheet[thisID].Errors_errors.append("The Row2Mat function did not receive 2 inputs - a row and a number.")
	if thisError=="Row2Mat2": worksheet[thisID].Errors_errors.append("The Row2Mat received more than 2 inputs - a row and a number.")
	if thisError=="Row2Mat3": worksheet[thisID].Errors_errors.append("The first entry in the Row2Mat function must be a row.")
	if thisError=="Col2Mat1": worksheet[thisID].Errors_errors.append("The Col2Mat function did not receive 2 inputs - a column and a number.")
	if thisError=="Col2Mat2": worksheet[thisID].Errors_errors.append("The Col2Mat received more than 2 inputs - a column and a number.")
	if thisError=="Col2Mat3": worksheet[thisID].Errors_errors.append("The first entry in the Col2Mat function must be a column.")

	if thisError=="LUDecomp1": worksheet[thisID].Errors_errors.append("The LUDecomp function received more than 1 input")
	if thisError=="LUDecomp2": worksheet[thisID].Errors_errors.append("The LUDecomp function must have two outputs")
	if thisError=="LUDecomp3": worksheet[thisID].Errors_errors.append("The LUDecomp received a number and it should receive a matrix")
	if thisError=="LUDecomp4": worksheet[thisID].Errors_errors.append("The LUDecomp function received a matrix that was not square")

	if thisError=="Det1": worksheet[thisID].Errors_errors.append("The Det function received more than 1 input")
	if thisError=="Det2": worksheet[thisID].Errors_errors.append("The Det received a number and it should receive a matrix")
	if thisError=="Det3": worksheet[thisID].Errors_errors.append("The Det function received a matrix that was not square")

	if thisError=="MatPow1": worksheet[thisID].Errors_errors.append("The MatPow function received less than 2 inputs")
	if thisError=="MatPow2": worksheet[thisID].Errors_errors.append("The MatPow function received more than 2 inputs")
	if thisError=="MatPow3": worksheet[thisID].Errors_errors.append("The matrix sent to MatPow is not square")
	if thisError=="MatPow4": worksheet[thisID].Errors_errors.append("The exponent sent to MatPow was a matrix and should be a single number")
	if thisError=="MatPow5": worksheet[thisID].Errors_errors.append("The exponent sent to MatPow was less than 1")

	if thisError=="IntVec1": worksheet[thisID].Errors_errors.append("The IntVec function received less than 2 inputs")
	if thisError=="IntVec2": worksheet[thisID].Errors_errors.append("The IntVec function received more than 2 inputs")
	if thisError=="IntVec3": worksheet[thisID].Errors_errors.append("The vectors sent to the IntVec function must be longer")
	if thisError=="IntVec4": worksheet[thisID].Errors_errors.append("The x and y vectors sent to the IntVec function were not the same size")

	if thisError=="sign1": worksheet[thisID].Errors_errors.append("The sign function can only have a maximum of 4 total inputs")

	if thisError=="rotate1": worksheet[thisID].Errors_errors.append("The rotate function should not receive more than 1 input")
	if thisError=="rotate2": worksheet[thisID].Errors_errors.append("The matrix sent to the rotate function should be two dimensional")

	if thisError=="isPosDef1": worksheet[thisID].Errors_errors.append("The isPosDef function can only take in 1 input")
	if thisError=="isPosDef2": worksheet[thisID].Errors_errors.append("The matrix sent to the isPosDef function should not be a number")
	if thisError=="isPosDef3": worksheet[thisID].Errors_errors.append("The matrix sent to the isPosDef function must be square")

	if thisError=="IfElse1": worksheet[thisID].Errors_errors.append("The IfElse function cannot receive more than 5 inputs")
	if thisError=="IfElse2": worksheet[thisID].Errors_errors.append("The IfElse function cannot receive less than 4 inputs")
	if thisError=="IfElse3": worksheet[thisID].Errors_errors.append("The test string in the IfElse function must be ==, !=, >=, <=, >, or <")

	if thisError=="Indices1": worksheet[thisID].Errors_errors.append("You sent "+str(arg2)+" numbers to index "+str(arg1)+" of a matrix. There must be only 1 number or three entries of [number:number]")
	if thisError=="Indices2": worksheet[thisID].Errors_errors.append("You are attempting to set "+str(arg1)+" dimensions on a variable that has "+str(arg2)+" dimensions. ")
	if thisError=="Indices3": worksheet[thisID].Errors_errors.append("You are attempting to set "+str(arg1)+" numbers to a matrix that has only "+str(arg2)+" numbers on the left side.")
	if thisError=="Indices4": worksheet[thisID].Errors_errors.append("You are attempting to set a matrix with a size of "+str(arg1)+" to a matrix the size of "+str(arg2)+".")



"""
	This function takes the sent worksheet object and makes an equation for each of those items. This
	ensures that each item is an equation class and has access to the functions and properties

"""

def setWorksheet(thisItem, worksheet, inspect, Equation):
	print('In the set worksheet function')


	for index, item in enumerate(worksheet):

		if isinstance(worksheet[item], Equation)==False and worksheet[item]['component_type_id']==3:
			print('Making equation '+str(worksheet[item]['ID']))
			tempEq=Equation(worksheet[item]['ID'], worksheet[item]['name'], worksheet[item]['fileid'], {})
			tempEq.itemid=worksheet[item]['Format_id']
			tempEq.Format_name=worksheet[item]['name']
			tempEq.type="equation"
			tempEq.component_type_id=3
			tempEq.Format_size=worksheet[item]['size']
			tempEq.fullMat=thisItem.objectToNumpy(worksheet[item]['real'], worksheet[item]['imag'])
			tempEq.realDefault=worksheet[item]['realdefault']
			tempEq.imagDefault=worksheet[item]['imagdefault']
			tempEq.Units_units=worksheet[item]['units']
			tempEq.numInds=worksheet[item]['numinds']
			tempEq.baseArray=worksheet[item]['basearray']
			tempEq.order=worksheet[item]['order']
			tempEq.Page_lastposition=worksheet[item]['Page_lastposition']
			tempEq.equation=worksheet[item]['equation']
			tempEq.Format_equation=worksheet[item]['equation']
			tempEq.newEquation=worksheet[item]['newEquation']
			tempEq.active=worksheet[item]['active']
			tempEq.parentID=worksheet[item]['parentid']
			tempEq.topParentID=worksheet[item]['topparentid']
			tempEq.ID=worksheet[item]['Format_id']
			tempEq.Format_id=worksheet[item]['Format_id']
			tempEq.fileid=worksheet[item]['fileid']

			worksheet[item]=tempEq

"""

	This function looks at the equation and formats any arrays in it for MathJax. 

"""

def showArray(thisItem):

	print('In show array function')

	variable=re.sub('\[','\\\\begin{bmatrix}', thisItem.Format_showequation)
	variable=re.sub('\]','\\\\end{bmatrix}', variable)
	variable=re.sub(',','&', variable)
	variable=re.sub(';',';;', variable)
	variable=re.sub(';','\\\\', variable)
	thisItem.Format_showequation=variable



"""
	This function takes in a string that is either the units or an equation. It then goes through the string and formats any divisions to 
	be shown in MathJax. The proper MathJax syntax is \frac{x}{y} where the user simply enters x/y
"""

def showFraction(thisString):

	print('In the show fraction function')


	pattern = re.compile("[0-9,a-z,A-Z,\.,\^,\-,\*,\s,\(,\)]+\/[0-9,a-z,A-Z,\.,\^,\-,\*,\s,\(,\)]+")
	pattern2 = re.compile("\/")


	print("The sub is "+str(pattern.search(thisString)))

	test=pattern.search(thisString)
	while test!=None:
		splitEq=test.split("/")
		num=spliteq[0]
		den=spliteq[1]
		newString="\\frac{"+num+"}{"+den+"}"
		thisString=thisString.replace(test,newString)
		test=pattern.search(thisString)



	test=pattern2.search(thisString)
	while test!=None:
		index=thisString.index("/")
		if thisString[index-1]==")":
			closeCount=0 
			startIndex=0
			for a in range(index-2, 0, -1):
				if thisString[a]==")":
					closeCount=closeCount+1
				if thisString[a]=="(":
					closeCount=closeCount-1
					if closeCount==0:
						startIndex=a
						break

			num=thisString[startindex:index-startindex]


		if thisString[index+1]=="(":
			openCount=0 
			endIndex=len(thisString)-1
			for a in range(index+2, endIndex, 1):
				if thisString[a]=="(":
					openCount=openCount+1
				if thisString[a]==")":
					openCount=openCount-1
					if openCount==0:
						endIndex=a
						break
			den=thisString[index+1:endindex-index]

		thisString=thisString.replace(num,'')
		thisString=thisString.replace(den, "\\frac{"+num+"}{"+den+"}")
		test=pattern2.search(thisString)

	return thisString

"""

	This is the primary function that actually does the math. It is sent an operator and one or two numbers. It looks at the operator 
	and performs the appropriate math on the appropriate numbers. First, it looks at the two numbers sent to the solver and tests if 
	either is an array. If neither of the numbers is an array, the simple math is performed on the numbers. However, if one of the 
	numbers is an array, the proper function is performed.
"""
def solveMath(thisItem, operator, pop1, pop2, id, worksheet):

	print('In the solve math function with '+str(pop1)+'  '+str(operator)+'  '+str(pop2)+' and sizes '+str(worksheet[pop1].Format_size)+' - '+str(worksheet[pop2].Format_size))

	type1=1;
	type2=1;

	if worksheet[pop1].Format_size=="1x1":
		type1=1
	else:
		type1=3


	if worksheet[pop2].Format_size=="1x1":
		type2=1
	else:
		type2=3


	if operator=="+":

		if type1==1 and type2==1:
			solution=thisItem.addSubNumbers(thisItem, worksheet, pop2, pop1, "+", id)

		if type1==3 and type2==3:
			solution=thisItem.addSubMatrices(thisItem, worksheet, pop2, pop1, "+", id)

		if (type1==1 and type2==3) or (type1==3 and type2==1):
			solution=thisItem.scalarOperation(thisItem, worksheet, "+", pop1, pop2)




	elif operator=="-":

		if type1==1 and type2==1:
			solution=thisItem.addSubNumbers(thisItem, worksheet, pop2, pop1, "-", id)

		if type1==3 and type2==3:
			solution=thisItem.addSubMatrices(thisItem, worksheet, pop2, pop1, "-", id)

		if (type1==1 and type2==3) or (type1==3 and type2==1):
			solution=thisItem.scalarOperation(thisItem, worksheet, "-", pop1, pop2)





	elif operator=="*":

		if type1==1 and type2==1:
			solution=thisItem.multDivNumbers(thisItem, worksheet, pop2, pop1, "*", id)

		if type1==3 and type2==3:
			solution=thisItem.multMatrices(thisItem, worksheet, pop2, pop1, "*", id)

		if (type1==1 and type2==3) or (type1==3 and type2==1):
			solution=thisItem.scalarOperation(thisItem, worksheet, "*", pop1, pop2)





	elif operator=="/":

		if type1==1 and type2==1:
			solution=thisItem.multDivNumbers(thisItem, worksheet, pop2, pop1, "/", id)

		if type1==1 and type2==3:
			solution=thisItem.scalarOperation(thisItem, worksheet, "/", pop1, pop2)


	return solution


"""
	This function takes in a string of text and split it up into chunks of text. It
	is intended to break up an equation into the chunks where the variable names and
	other items can be identified.

"""

def splitText(text):
	print('In splitText function with text of '+text)

	text=re.sub("^\s+|\s+$", "", text)
	text=re.sub("\s+[+]\s+", "?+?", text)
	text=re.sub("\s+[-]\s+", "?-?", text)
	text=re.sub("\s+[*]\s+", "?*?", text)
	text=re.sub("\.\*", "?.*?", text)
	text=re.sub("\+", "?+?", text)
	text=re.sub("-", "?-?", text)
	text=re.sub("\*", "?*?", text)
	text=re.sub(",", "?,?", text)
	text=re.sub(";", "?;?", text)
	text=re.sub(":", "?:?", text)
	text=re.sub("\s", "", text)
	text=re.sub("{", "?{?", text)
	text=re.sub("}", "?}?", text)
	text=re.sub("\]", "?]?", text)
	text=re.sub("\[", "?[?", text)
	text=re.sub("\(", "?(?", text)
	text=re.sub("\)", "?)?", text)
	text=re.sub("\\\\", "?\\?", text)
	text=re.sub("\/", "?/?", text)
	text=re.sub(",\+", "?,+?", text)
	text=re.sub("\^", "?^?", text)
	text=re.sub("\?{2,100}", "?", text)
	text=re.sub("^\?\-\?", "?-?", text)
	text=re.sub("\s+$", "", text)
	text=re.sub("^\s+", "", text)
	text=re.sub("^\s+|\s+$", "", text)
	text=re.sub("^\?+|\?+$", "", text)
	text=re.sub("^\,+|\,+$", "", text)

	splittext=text.split("?")
	print("Split text is "+str(splittext))
	return splittext;



"""
This function is used by the above function in altering the entered equation from infix to postfix. It takes in an 
operator and returns the precedence of that operator. The precedence is simply a method of ensuring that multiplication 
and division occur before addition and subtraction. This is also true for trig functions, powers, and others.
"""



def thisOperatorPrecedence(operator):

	if operator=="*" or operator=='/' or operator=='#' or operator=='.*' or operator=='//':
		precedence=2

	elif operator=="+" or operator=="-":
		precedence=1

	elif operator=="^":
		precedence=3
	
	else:
		precedence=0

	#print('In the operator precedence function with '+str(operator)+' - '+str(precedence))

	return precedence
"""
	This function takes in the string that is sent as the series of indexes in the above function and then returns the contents of each
	bracket as an array. This is done by simply breaking up the text and then recombining the parts inside the brackets.
"""


def splitBracket(thisItem, worksheet, text):

	print('In the split bracket function with text '+str(text))



	# Set up the needed variables
	inputArray={}
	flip=0
	bcount=0
	pcount=0
	text=re.sub("^[a-zA-Z0-9\_]+", "", text)
	#inputArray=splitText(text)

	text=re.sub("\[", "?[?", text)
	text=re.sub("\]", "?]?", text)
	text=re.sub('^\?', '', text)
	text=re.sub('\?$', '', text)
	inputArray=text.split("?")



	numArray=[0] * len(inputArray)

	for a in range(0, len(inputArray), 1):

		if flip==1:
			numArray[a]=1
		else:
			numArray[a]=0

		if inputArray[a]=="[":
			flip=1
			pcount=np.int_(pcount)+1

		if inputArray[a]=="]":
			pcount=np.int_(pcount)-1

		if inputArray[a]=="]" and pcount==0:
			flip=0
			numArray[a]=0

	for a in range(len(inputArray)-1, 0, -1):
		if numArray[a]==1 and numArray[a-1]==1:
			inputArray[a-1]=inputArray[a-1]+inputArray[a]
			del inputArray[a]
			del numArray[a]

	for a in range(len(inputArray)-1, -1, -1):
		if numArray[a]==0:
			del inputArray[a]
			del numArray[a]

	for a in range(len(inputArray)-1, -1, -1):
		if inputArray[a]==',' or inputArray[a]==' ' or inputArray=='':
			del inputArray[a]


	return inputArray

"""
	This function takes in the string that is sent as an index to the function above. The function takes the string and splits it at the 
    semicolons. It then recombines the string to ensure that an entry is not parsed at an inappropriate part. 
"""

def splitColons(thisItem, worksheet, text):

	print("I am in the split colons function with text "+str(text))

	text=re.sub("^\[", "", text)
	text=re.sub("^\]", "", text)

	flip=0
	bcount=0
	pcount=0

	inputArray=splitText(text)
	numArray=[0] * len(inputArray)

	for a in range(0, len(inputArray), 1):

		if inputArray[a]=="(":
			flip=1
			bcount=np.int_(bcount)+1

		if inputArray[a]=="[":
			flip=1
			pcount=np.int_(pcount)+1

		if inputArray[a]==")":
			bcount=np.int_(bcount)-1

		if inputArray[a]=="]":
			pcount=np.int_(pcount)-1

		if (inputArray[a-1]==")" or inputArray[a-1]=="]") and (bcount==0 and pcount==0):
			flip=0

		if flip==1:
			numArray[a]=1



	for a in range(len(inputArray)-1, 0, -1):
		if numArray[a] == '1' and numArray[a-1] == '1':
			inputArray[a-1]=inputArray[a-1]+inputArray[i]
			del inputArray[a]
			del numArray[a]


	for a in range(len(inputArray)-1, 0, -1):
		if inputArray[a] == ',' or inputArray[a] == ' ' or inputArray[a]=='':
			del inputArray[a]
			del numArray[a]

	for a in range(len(inputArray)-1, 0, -1):
		if inputArray[a]!=':' and inputArray[a-1]!=':':
			inputArray[a-1]=inputArray[a-1]+''+inputArray[a]
			del inputArray[a]

	return inputArray


"""
	This is the fourth step in the creation of a surface map. The code simply steps through and finds and maximum and minimum for each axis
"""

def getSurfaceExtremes(thisItem, worksheet, plotID, dataID, dataObject, props):
	
	print('In the get surface extremes function')

	# Get the index of the data
	for a in range(0, len(dataObject), 1):
		if dataObject[a]['Format_id']==dataID:
			dataIndex=a

	if dataObject[dataIndex].xMin<props.xMin: props.xMin=dataObject[dataIndex].xMin
	if dataObject[dataIndex].xMax>props.xMax: props.xMax=dataObject[dataIndex].xMax 
	if dataObject[dataIndex].yMin<props.yMin: props.yMin=dataObject[dataIndex].yMin 
	if dataObject[dataIndex].yMax>props.yMax: props.yMax=dataObject[dataIndex].yMax 
	if dataObject[dataIndex].zMin<props.zMin: 
		props.zMin=dataObject[dataIndex].zMin
		props.flag=1
	if dataObject[dataIndex].zMax>props.zMax: 
		props.zMax=dataObject[dataIndex].zMax
		props.flag=1 	

"""
	This function looks at a for loop and solves the three parameters for that loop - the start number, the stop number, and the increment number.	
"""



def passPlotData(thisItem, worksheet, PlotID, DataID, className, plotObj):
	
	print('In the pass plot data function')


	worksheet[PlotID].postMessage = {	"messageType":"PlotDataResults", 
								"plotID":PlotID, 
								"DataID":DataID, 
								"eventErrorFlag":thisItem.Errors_flag, 
								"eventError":thisItem.Errors_errors, 
								"className":className, 
								"Dependents":worksheet[PlotID].Dependents,
								"plotObj":plotObj }


"""
	This function called when a user has entered data for a plot and the entered equation has been solved. This function takes that solution and then formats the 
	data to be passed back to the main function in the proper format.
"""

def prepPlotData(thisItem, worksheet, eqID, plotObj, plotID, dataID, className):
	
	print('In the prep plot data function')


	# Wipe the dependents of this data for this plot
	worksheet[plotID].Dependents[dataID]={}; 


	# Set the data and the index of the data in the data object
	for index, item in enumerate(plotObj['Chart_dataobj']):
		if plotObj['Chart_dataobj'][index]['Format_id']==dataID:
			data=copy.copy(plotObj['Chart_dataobj'][index])
			dataIndex=copy.copy(index)


	# Set the dependents of the data equal to those in the equation
	for index, depItem in enumerate(worksheet[eqID].Dependents):
		worksheet[plotID].Dependents[dataID][depItem]={}
		worksheet[plotID].Dependents[dataID][depItem]['axis']=className
		worksheet[plotID].Dependents[dataID][depItem]['active']=1


	if plotObj['errorFlag']!=1: 

		if data['Format_type']=="heatmap":
			count=0
			sizeArray=worksheet[eqID].Format_size.split('x')
			for a in range(0, np.int_(sizeArray[0]), 1):
				for b in range(0, np.int_(sizeArray[1]), 1):
					try:
						plotObj['Chart_dataobj'][dataIndex]['PointData'][count]
					except:
						plotObj['Chart_dataobj'][dataIndex]['PointData'][count]={}
					plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['x']=a
					plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['y']=b
					plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['value']=np.float(worksheet[eqID].Solution_real[str(a)+'-'+str(b)])
					count=count+1

		else:
			if className=="plot_xdatainput":
				count=0
				sizeArray=worksheet[eqID].Format_size.split('x')
				for a in range(0, np.int_(sizeArray[0]), 1):
					for b in range(0, np.int_(sizeArray[1]), 1):
						
						try:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]
						except:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]={}

						plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['x']=np.float(worksheet[eqID].Solution_real[str(a)+'-'+str(b)])

						try:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['y']
						except:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['y']=count

						if plotObj['Chart_dataobj'][dataIndex]['ydata_name']=='':
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['y']=count

						count=count+1


			if className=="plot_ydatainput":
				oldLength=copy.deepcopy(len(plotObj['Chart_dataobj'][dataIndex]['PointData']))
				count=0
				sizeArray=worksheet[eqID].Format_size.split('x')
				for a in range(0, np.int_(sizeArray[0]), 1):
					for b in range(0, np.int_(sizeArray[1]), 1):
						
						try:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]
						except:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]={}

						plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['y']=np.float(worksheet[eqID].Solution_real[str(a)+'-'+str(b)])

						try:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['x']
						except:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['x']=count

						if plotObj['Chart_dataobj'][dataIndex]['ydata_name']=='':
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['x']=count

						count=count+1

				newLength=np.int_(sizeArray[0])*np.int_(sizeArray[1])
				print('The new lengths are '+str(np.int_(sizeArray[0]))+' - '+str(np.int_(sizeArray[1]))+' - '+str(newLength))
				for a in range(oldLength, newLength, 1):
					del(plotObj['Chart_dataobj'][dataIndex]['PointData'][a])



			if className=="plot_zdatainput":
				count=0
				sizeArray=worksheet[eqID].Format_size.split('x')
				for a in range(0, np.int_(sizeArray[0]), 1):
					for b in range(0, np.int_(sizeArray[1]), 1):
						
						try:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]
						except:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]={}

						plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['z']=np.float(worksheet[eqID].Solution_real[str(a)+'-'+str(b)])

						count=count+1



			if className=="plot_cdatainput":
				count=0
				sizeArray=worksheet[eqID].Format_size.split('x')
				for a in range(0, np.int_(sizeArray[0]), 1):
					for b in range(0, np.int_(sizeArray[1]), 1):
						
						try:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]
						except:
							plotObj['Chart_dataobj'][dataIndex]['PointData'][count]={}

						plotObj['Chart_dataobj'][dataIndex]['PointData'][count]['c']=np.float(worksheet[eqID].Solution_real[str(a)+'-'+str(b)])

						count=count+1



			if className=="Lathe": 
				plotObj['Chart_dataobj'][dataIndex]['curve']=worksheet[eqID].Solution_real







def sendSurfaceData(thisItem, worksheet, PlotID, dataObject, type, DataID, Props, axis):

	print('In the send surface data function')

	thisItem.postMessage={	"messageType":"SurfaceData", 
							"PlotID":PlotID, 
							"DataID":DataID, 
							"Props":Props,
							"Axis":axis,
							"Deps":worksheet[PlotID]['Dependents'],
							"type":type,
							"dataObject":dataObject	}



def setLatheData(thisItem, worksheet, plotID, dataID, dataObject, axis, id):
	
	print('In the set lathe data function')

	# Get the index of the data
	for a in range(0, len(dataObject), 1):
		if dataObject[a]['Format_id']==dataID:
			dataIndex=a

	if axis=="X":
		dataObject[dataIndex].xData=worksheet[id].Solution_real
		lengthTuple=worksheet[id].Solution_real.shape()
		dataObject[dataIndex].xLength=lengthTuple[0]

	if axis=="Y":
		dataObject[dataIndex].yData=worksheet[id].Solution_real
		lengthTuple=worksheet[id].Solution_real.shape()
		dataObject[dataIndex].yLength=lengthTuple[1]


"""
	This code sets the individual data points for each line. This is done by creating a spline curve and adding a vector point for each point in the users data. If
	either the X or Y are not populated, then the index for those points is used.
"""




def setLinePoints(thisItem, worksheet, plotID, dataID, dataObject, axis, props):
	
	print('In the set line points function')




	xVal=0
	yVal=0
	zVal=0
	lineData=[]
	xMax=-9999999999
	xMin=9999999999
	yMax=-9999999999
	yMin=9999999999
	zMax=-9999999999
	zMin=9999999999
	dataIndex=0;
	cMax=-9999999999
	cMin=9999999999



	# Get the index of the data
	for a in range(0, len(dataObject), 1):
		if dataObject[a]['Format_id']==dataID:
			dataIndex=a

	if axis=="X": thislength=len(dataObject[dataIndex]['xData'])
	if axis=="Y": thislength=len(dataObject[dataIndex]['yData'])
	if axis=="Z": thislength=len(dataObject[dataIndex]['zData'])
	if axis=="C": thislength=len(dataObject[dataIndex]['cData'])




	for index, item in enumerate(dataObject):

		if dataObject[item]['type']=="line":

			for a in range(0, len(thisLength), 1):

				try:
					dataObject[item].xData['0-'+a]
					xVal=dataObject[item].xData['0-'+a]
				except:
					xVal=a

				try:
					dataObject[item].yData['0-'+a]
					yVal=dataObject[item].yData['0-'+a]
				except:
					yVal=a

				zVal=dataObject[item].zData['0-'+a] 
				cVal=dataObject[item].cData['0-'+a] 


				if xVal>xMax:
					dataObject[item].xMax=xVal
					xMax=xVal
				
				if xVal<xMin:
					dataObject[item].xMin=xVal
					xMin=xVal
				
				if yVal>yMax:
					dataObject[item].yMax=yVal
					yMax=yVal
				
				if yVal<yMin: 
					dataObject[item].yMin=yVal
					yMin=yVal
				
				if zVal>zMax:
					dataObject[item].zMax=zVal
					zMax=zVal
				
				if zVal<zMin:
					dataObject[item].zMin=zVal
					zMin=zVal
				
				if cVal>cMax:
					dataObject[item].cMax=cVal
					cMax=cVal
				
				if cVal<cMin:
					dataObject[item].cMin=cVal
					cMin=cVal

	props.xMin=xMin
	props.xMax=xMax
	props.yMin=yMin
	props.yMax=yMax
	props.zMin=zMin
	props.zMax=zMax






def setSurfaceData(thisItem, worksheet, plotID, dataID, dataObject, axis, id):
	
	print('In the set surface data function')

	cMax=-99999999999
	cMin=999999999999
	dataIndex=0


	# Get the index of the data
	for a in range(0, len(dataObject), 1):
		if dataObject[a]['Format_id']==dataID:
			dataIndex=a


	try:
		worksheet[plotID].Dependents
	except:
		worksheet[plotID].Dependents={}

	try:
		worksheet[plotID].Dependents[axis]
	except:
		worksheet[plotID].Dependents[axis]={}


	for index, item in enumerate(worksheet[id].Dependents):
		worksheet[plotID].Dependents[axis][item]=1


	if axis=="X":
		dataObject[dataIndex]['xData']=worksheet[id].Solution_real
		sizeData=worksheet[id].Format_size.split('x')
		dataObject[dataIndex].xLength=sizeData[0]


	if axis=="Y":
		dataObject[dataIndex]['yData']=worksheet[id].Solution_real
		sizeData=worksheet[id].Format_size.split('x')
		dataObject[dataIndex].xLength=sizeData[0]


	if axis=="Z":
		dataObject[dataIndex]['zData']=worksheet[id].Solution_real
		sizeData=worksheet[id].Format_size.split('x')
		dataObject[dataIndex]['zLength']=sizeData[0]


	if axis=="C":
		dataObject[dataIndex]['xData']=worksheet[id].Solution_real
		sizeData=worksheet[id].Format_size.split('x')
		dataObject[dataIndex].xLength=sizeData[0]


	for a in range(0, len(dataObject[dataIndex]['cData']), 1):
		if dataObject[dataIndex]['cData'][a]<cMin:
			cMin=dataObject[dataIndex]['cData'][a] 
		if dataObject[dataIndex]['cData'][a]>cMax:
			cMax=dataObject[dataIndex]['cData'][a]
	dataObject[dataIndex]['cMax']=cMax
	dataObject[dataIndex]['cMin']=cMin


def solveSurfaceData(thisItem, worksheet, plotID, dataID, dataObject, axis, type, props):
	
	print('In the solve surface data function')


	# Get the index of the data
	for a in range(0, len(dataObject), 1):
		if dataObject[a]['Format_id']==dataID:
			dataIndex=a


	# Set the equation based upon the data being solved
	if axis=="X": equation=dataObject[dataIndex]['xDataRaw']
	if axis=="Y": equation=dataObject[dataIndex]['yDataRaw']
	if axis=="Z": equation=dataObject[dataIndex]['zDataRaw']
	if axis=="C": equation=dataObject[dataIndex]['cDataRaw']


	# Solve the equation for the data
	eqObj={	"Page_position":worksheet[plotID].order, 
			"Format_showtype":"InnerFunction", 
			"equation":"Temp="+equation }
	id=thisItem.createEq(thisItem, worksheet, thisItem.fileid, 1, eqObj)																			       


	if type=="surface" or type=="pointCloud" or type=="line": 
		thisItem.setSurfaceData(thisItem, worksheet, plotID, dataID, dataObject, axis, id)
		thisItem.sendSurfaceData(thisItem, worksheet, plotID, dataObject, type, dataID, props, axis)

	elif type=="lathe":
		thisItem.setLatheData(thisItem, worksheet, plotID, dataID, dataObject, axis, id)
		thisItem.sendSurfaceData(thisItem, worksheet, plotID, dataObject, type, dataID, props, axis)


"""
	This function is called for every for loop, while loop, or if statement. There are three inputs, the id, the position, and the flag.
		id   - the id of the item being ran
		pos  - the position within the perform loop	
		flag - sets whether the loop is being run for the first time. 
	When the function starts, if the id in question is a loop, the flag is checked. If the flag is 1, then the prep functions are called with the DoStructures function
	set as the callback with the flag set to 0. If the flag is zero, then the function solves whatever lies at the position of the perform loop given by the pos input.
	If this is an equation, it is solved, if this is a loop, the DoStructures function is run for that loop.
	The perform array is created in the loop and statement prep functions and is an locationed array of the id of the item in question and its location within the 
	structure. The pos is incremented after each run and if it is greater than the perform array, then the counters are incremented. For a while loop, the conditions
	are checked to see if it will run again. For a for loop, the counters are checked. Note that for if else statements, the prep functions must ensure that the 
	peform array contains only the block that is to be run. 
	Case 1 - First run through - values are calculatted, function is recalled
	Case 2 - Function run with counter at 0 - test is performed and if true, the first item is solved and the program is recalled
	Case 3 - Function is called with number higher than array count - recalculate conditions, recall with pos at 0
	Case 4 - Normal run - the code pulls the item in question, runs it, and then recalls the function with the next number
SolveWhileLoopParameters(loopid, firstrun, callback)
"""




def doStructure(thisItem, worksheet, pos, flag):

	print('In the do structure function with pos and flag of '+str(pos)+' '+str(flag) )

	# For Loops
	if thisItem.component_type_id==6 or thisItem.component_type_id=="6":

		print("For Loop Baby with an id of "+str(thisItem.id))

		
		# The first time the loop is called, a number of things are done to prepare the loop for execution
		if flag==1 or flag=="1":

			# Set the first run variable in the loop
			thisItem.content['forLoop']['firstRun']=1

			thisItem.prepLoopEquations(thisItem, worksheet, thisItem.id)
			thisItem.populateItems(thisItem, worksheet, thisItem.id)

			eqObj={	"Page_position":worksheet[thisItem.id].location,
					"order":worksheet[thisItem.id].location,
					"location":worksheet[thisItem.id].location,
					"Format_name":worksheet[thisItem.id].content['forLoop']['counter'], 
					"equation":worksheet[thisItem.id].content['forLoop']['counter']+"=0"	}
			

			counterid=thisItem.createEq(thisItem, worksheet, worksheet[thisItem.id].fileid, 0, eqObj)
			worksheet[counterid].active=1
			worksheet[counterid].name=worksheet[thisItem.id].content['forLoop']['counter']	
			worksheet[counterid].ID=worksheet[counterid].Format_id			
			worksheet[counterid].fullMat[[0][0]]=worksheet[thisItem.id].content['forLoop']['start']
			worksheet[thisItem.id].content['forLoop']['valueid']=counterid	
			worksheet[thisItem.id].content['forLoop']['Loop_counterValue']=0


			if worksheet[thisItem.id].content['forLoop']['limitfactor']=="<":
				start=worksheet[thisItem.id].content['forLoop']['start']
				stop=worksheet[thisItem.id].content['forLoop']['stop']
				increment=worksheet[thisItem.id].content['forLoop']['increment']
				numPoints=(stop-start)/increment+1
				for forLoopIndex in np.linspace(start, stop, numPoints, endpoint=False):
					worksheet[worksheet[thisItem.id].content['forLoop']['valueid']].fullMat[[0][0]]=forLoopIndex
					worksheet[thisItem.id].content['forLoop']['Loop_counterValue']=worksheet[thisItem.id].content['forLoop']['Loop_counterValue']+1
					doStructure(thisItem, worksheet, 0, 0)

			elif worksheet[thisItem.id].content['forLoop']['limitFactor']=="<=":
				start=worksheet[thisItem.id].content['forLoop']['start']
				stop=worksheet[thisItem.id].content['forLoop']['stop']
				increment=worksheet[thisItem.id].content['forLoop']['increment']
				numPoints=(stop-start)/increment+1
				for forLoopIndex in np.linspace(start, stop, numPoints, endpoint=True):
					worksheet[worksheet[thisItem.id].content['forLoop']['valueid']].fullMat[[0][0]]=forLoopIndex
					worksheet[thisItem.id].content['forLoop']['Loop_counterValue']=worksheet[thisItem.id].content['forLoop']['Loop_counterValue']+1
					doStructure(thisItem, worksheet, 0, 0)


			elif worksheet[thisItem.id].content['forLoop']['limitFactor']==">":
				start=worksheet[thisItem.id].content['forLoop']['start']
				stop=worksheet[thisItem.id].content['forLoop']['stop']
				increment=worksheet[thisItem.id].content['forLoop']['increment']
				numPoints=(stop-start)/increment+1
				for forLoopIndex in np.linspace(start, stop, numPoints, endpoint=False):
					worksheet[worksheet[thisItem.id].content['forLoop']['valueid']].fullMat[[0][0]]=forLoopIndex
					worksheet[worksheet[thisItem.id].content['forLoop']['valueid']].fullMat[[0][0]]=a
					worksheet[thisItem.id].content['forLoop']['Loop_counterValue']=worksheet[thisItem.id].content['forLoop']['Loop_counterValue']+1
					doStructure(thisItem, worksheet, 0, 0)

			elif worksheet[thisItem.id].content['forLoop']['limitFactor']==">=":
				start=worksheet[thisItem.id].content['forLoop']['start']
				stop=worksheet[thisItem.id].content['forLoop']['stop']
				increment=worksheet[thisItem.id].content['forLoop']['increment']
				numPoints=(stop-start)/increment+1
				for forLoopIndex in np.linspace(start, stop, numPoints, endpoint=False):
					worksheet[worksheet[thisItem.id].content['forLoop']['valueid']].fullMat[[0][0]]=a
					worksheet[thisItem.id].content['forLoop']['Loop_counterValue']=worksheet[thisItem.id].content['forLoop']['Loop_counterValue']+1
					doStructure(thisItem, worksheet, 0, 0)


			for index, item in enumerate(worksheet):
				try: 
					worksheet[item]['Dependents']
					del(worksheet[item]['Dependents'][counterid])
					del(worksheet[counterid])
					del(worksheet[counterid])
					worksheet[item].status='1'
				except:
					print()


		elif worksheet[thisItem.id].Errors_flag!='1' and worksheet[thisItem.id].Errors_flag!=1:

			print("The flag is a lie bro")

			print("The pos is "+str(pos)+" - "+str(len(worksheet[thisItem.id].content['forLoop']['loopPerform'])))
			
			if pos<len(worksheet[thisItem.id].content['forLoop']['loopPerform']):
				thisID = worksheet[thisItem.id].content['forLoop']['loopPerform'][pos]
				print(thisID)
				print('The position is '+str(pos)+' and the item is '+str(thisItem.id)+' and the type is '+str(worksheet[thisItem.id].content['type'])+' - '+str(worksheet[thisItem.id].content['active']))
				pos=pos+1

				if worksheet[thisID].component_type_id==3 and worksheet[thisID].content['active']==1:
					print("------------------- About to solve "+str(thisID)+" : "+str(worksheet[thisID].equation)+"----------------")
					print("The parent is "+str(worksheet[thisID].Page_parentid))
					worksheet[thisID].solveEq(str(worksheet[thisID].Format_left)+'='+str(worksheet[thisID].equation), worksheet, 'SolveEquation')
					print('The solution to '+str(thisID)+' is '+str(worksheet[thisID].fullMat[[0][0]]))
					doStructure(worksheet[thisItem.id], worksheet, pos, 0)
				elif worksheet[thisItem.id].component_type_id==6:
					doStructure(worksheet[thisID], worksheet, 0, 1)
					doStructure(worksheet[thisItem.id], worksheet, pos, 0)
				elif worksheet[thisItem.id].component_type_id==7:
					doStructure(worksheet[thisID], worksheet, 0, 1)
					doStructure(worksheet[thisItem.id], worksheet, pos, 0)
				elif worksheet[thisItem.id].component_type_id==8: 
					doStructure(worksheet[thisID], worksheet, 0, 1)
					doStructure(worksheet[thisItem.id], worksheet, pos, 0) 




	# While Loops
	elif thisItem.component_type_id==7 or thisItem.component_type_id=="7":

		if flag==1 and worksheet[thisItem.id].content['whileLoop']['Loop_counterValue']==0: 
			thisItem.prepLoopEquations(thisItem.id)
			thisItem.populateItems(thisItem.id)
			thisItem.solveWhileLoopParameters(thisItem.id, 1) 
			thisItem.checkWhileLoop(thisItem.id)
			doStructure(thisItem.id, 0, 0)

		elif pos>=len(worksheet[thisItem.id].content['whileLoop']['loopPerform']):
			worksheet[thisItem.id].content['whileLoop']['Loop_counterValue']=worksheet[thisItem.id].content['whileLoop']['Loop_counterValue']+1
			doStructure(thisItem.id, 0, 1);

		elif flag==1:
			thisItem.solveWhileLoopParameters( thisItem.id, 0) 
			thisItem.checkWhileLoop(thisItem.id)
			doStructure(thisItem.id, 0, 0)
		
		else: 
			if worksheet[thisItem.id].content['whileLoop']['Loop_truefalse']  and worksheet[thisItem.id].content['whileLoop']['Loop_countervalue']<worksheet[thisItem.id].content['whileLoop']['Loop_stepLimit']:
				thisID=worksheet[thisItem.id]['content']['whileLoop']['loopPerform'][pos]
				pos=pos+1;
				if worksheet[thisItem.id].type=="equation" and worksheet[thisItem.id].active==1:
					worksheet[item].solveEq(worksheet[item].Equation, worksheet[item], 'SolveEquation')
					doStructure(thisItem.id,pos,0)

				elif worksheet[thisItem.id].type=="forloop":
					doStructure(thisID,0,1)
					doStructure(thisItem.id,pos,0)

				elif worksheet[thisItem.id].type=="whileloop": 
					doStructures(thisID,0,1)
					doStructures(thisItem.id,pos,0)

				elif worksheet[thisItem.id].type=="ifelse": 
					doStructures(thisID,0,1)
					doStructures(thisItem.id,pos,0)  
	
				else:
					doStructures(thisItem.id,pos,0)




	# If/ Else Statements
	elif thisItem.component_type_id==8 or thisItem.component_type_id=="8":

		if flag==1:
			thisItem.solveIfElseParameters(thisItem.id)
			thisItem.prepStatementEquations(thisItem.id)
			thisItem.checkStatement(thisItem.id)
			thisItem.setActive(thisItem.id)
			thisItem.populateItems(thisItem.id)
			thisItem.doStructure(thisItem.id, 0, 0)


		else:
			if pos<len(worksheet[thisItem.id].content['ifElse']['loopPerform']):
				thisID=worksheet[thisItem.id]['content']['ifElse']['loopPerform'][pos]
				pos=pos+1;
				if worksheet[thisItem.id].type=="equation" and worksheet[thisItem.id].active==1:
					worksheet[item].solveEq(worksheet[item].Equation, worksheet[item], 'SolveEquation')
					doStructure(thisItem.id,pos,0)

				elif worksheet[thisItem.id].type=="forloop":
					doStructure(thisID,0,1)
					doStructure(thisItem.id,pos,0)

				elif worksheet[thisItem.id].type=="whileloop": 
					doStructures(thisID,0,1)
					doStructures(thisItem.id,pos,0)

				elif worksheet[thisItem.id].type=="ifelse": 
					doStructures(thisID,0,1)
					doStructures(thisItem.id,pos,0)  
	
				else:
					doStructures(thisItem.id,pos,0)




"""
	This function preps the equations to be sent back to the main code and then creates the item to be passed.
	This is done by simply looping through the worksheet and finding other structures or equations that have
	the item being returned as their top parent. If it is an equation, the solutions have to be placed in real 
	and imag objects instead of numpys.
"""

def passStructure(itemID, worksheet):

	print('In the pass structure function')

	returnStructure={}

	for index, item in enumerate(worksheet):


		if worksheet[item].component_type_id==3 and worksheet[item].Page_topparentid==itemID:
			returnStructure[item]={}
			tempReal=numpyToObject(worksheet[item].fullMat, "real")
			tempImag=numpyToObject(worksheet[item].fullMat, "imag")
			worksheet[item].Solution_real=copy.copy(tempReal)
			worksheet[item].Solution_imag=copy.copy(tempImag)
			del(worksheet[item].fullMat)
			returnStructure[item]['equationObj']=copy.deepcopy(getAttributes(worksheet[item]))
			returnStructure[item]['Deps']=worksheet[item].Dependents
			returnStructure[item]['type']="equation"

		if (worksheet[item].component_type_id==6 and worksheet[item].topparentid==itemID) or (worksheet[item].component_type_id==6 and item==itemID):
			returnStructure[item]={}
			returnStructure[item]['forLoopObj']=copy.deepcopy(getAttributes(worksheet[item]))
			del(returnStructure[item]['forLoopObj']['ownedEq'])
			returnStructure[item]['type']="forLoop"

		if (worksheet[item].component_type_id==7 and worksheet[item].topparentid==itemID) or (worksheet[item].component_type_id==7 and item==itemID):
			returnStructure[item]={}
			returnStructure[item]['whileLoopObj']=copy.deepcopy(getAttributes(worksheet[item]))
			del(returnStructure[item]['whileLoopObj']['ownedEq'])
			returnStructure[item]['type']="whileLoop"

		if (worksheet[item].component_type_id==8 and worksheet[item].topparentid==itemID) or (worksheet[item].component_type_id==8 and item==itemID):
			returnStructure[item]={}
			returnStructure[item]['ifElseObj']=copy.deepcopy(getAttributes(worksheet[item]))
			del(returnStructure[item]['ifElseObj']['ownedEq'])
			returnStructure[item]['type']="ifElse"

	worksheet[itemID].postMessage={	"messageType":"StructureResult", 
	 							"ID":itemID, 
	 							"structure":returnStructure	}

	return worksheet[itemID]



	
"""
    This function is called to check whether or not the if / else statement is true or false and to determine whether or not it is active. This is done each time the
    statement is altered. There are three steps to complete the action. The code allows users to enter multiple conditions and to use the binary and / or by using 
    the && and || symbols. The values of the flag and dependents were established in the previous function.
    1. The function first checks the status of each statement separately and sets a true or false depending on if those values meet the requirements established.
    2. The function rebuilds the if statement with the statements replaced with those true/false values and solves it.
    3. The third step marks whether this particulare statement should be executed. It does this by looking at previous if / else statements and executing accordingly.  
"""

def checkStatement(thisItem, worksheet, loopID):
    print('In check if else statement function')


    # For each section of the statement block, set the true/false for the condition and numbers
    for a in range(0, len(worksheet[loopID].content['ifelse']['statementBlock']), 1):
        for b in range(0, len(worksheet[loopID].content['ifelse']['statementBlock'][a]), 1):


            # Set the items here to make the text more readable
            flag=worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagValue']
            dependent=worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentValue']
            condition=worksheet[loopID].content['ifelse']['statementBlock'][a][b]['conditionText']

            if condition=="==" and flag==dependent:
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=true
            elif condition=="==":
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=false
            

            if condition=="!=" and flag!=dependent:
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=true
            elif condition=="!=":
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=false


            if condition==">" and flag>dependent:
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=true
            elif condition==">":
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=false;
            

            if condition==">=" and flag>=dependent:
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=true
            elif condition==">=":
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=false
            

            if condition=="<" and flag<dependent:
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=true
            elif condition=="<":
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=false
            

            if condition=="<=" and flag<=dependent:
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=true
            elif condition=="<=":
                worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']=false




    for a in range(0, len(worksheet[loopID].content['ifelse']['statementBlock']), 1):

        if a!=0:
            statementString=str(statementString)+str(worksheet[loopID].content['ifelse']['statementBlock'][a][0]['blockOption'])
            tfString=str(tfString)+str(worksheet[loopID].content['ifelse']['statementBlock'][a][0]['blockOption'])
            valueString=str(valueString)+str(worksheet[loopID].content['ifelse']['statementBlock'][a][0]['blockOption'])

        statementString=str(statementString)+'('
        tfString=str(tfString)+'('
        valueString=str(valueString)+'('

        for b in range(0, len(worksheet[loopID].content['ifelse']['statementBlock'][a]), 1):
            
            if b!=0:
                statementString=str(statementString)+str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['blockOption'])
                tfString=str(tfString)+str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['blockOption'])
                valueString=str(valueString)+str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['blockOption'])

            statementString=str(statementString)+'('
            tfString=str(tfString)+'('
            valueString=str(valueString)+'('

            temp1=worksheet[loopID].content['ifelse']['statementBlock'][a][b]['truefalse']
            tfString=str(tfString)+''+str(temp1)+'' 
            temp1=str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagText'])
            temp2=str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['conditionText'])
            temp3=str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentText'])
            statementString=str(statementstring)+''+str(temp1)+''+str(temp2)+''+str(temp3)
            temp1=str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagValue'])
            temp2=str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['conditionText'])
            temp3=str(worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentValue'])
            valueString=str(valueString)+''+str(temp1)+''+str(temp2)+''+str(temp3)

            statementString=str(statementString)+')'
            tfString=str(tfString)+')'
            valueString=str(valueString)+')'

        statementString=str(statementString)+')'
        tfString=str(tfString)+')'
        valueString=str(valueString)+')'

    worksheet[loopID].content['ifelse']['Loop_String']=statementString
    worksheet[loopID].content['ifelse']['Loop_TFString']=tfString
    worksheet[loopID].content['ifelse']['Loop_ValueString']=valueString
    #worksheet[loopID].content['ifelse']['Statement_truefalse']=eval(tfString.replace(/<div[^>]*>|<\/div>/g, ''));


    parentStatement=worksheet[loopID].content['ifelse']['parentStatement']
    for index, item in enumerate(worksheet):
        if worksheet[item].component_type_id==8:
            if worksheet[item].content['ifelse']['parentStatement']==parentStatement:
                worksheet[parentStatement].content['ifelse']['Statement_Order'].append({order:worksheet[item].order-worksheet[parentStatement].order, ID:item, Execute:0})





    flag=0
    worksheet[parentStatement].content['ifelse']['Statement_Order']=worksheet[parentStatement].content['ifelse']['Statement_Order'].sort(thisItem.dynamicSort("order"))   

    for a in range(0, len(worksheet[parentStatement].content['ifelse']['statement_Order']), 1):
        id=worksheet[parentStatement].content['ifelse']['Statement_Order'][a]['ID']

        if worksheet[id].content['ifelse']['Statement_Type']!="else":
            if worksheet[id].content['ifelse']['Statement_truefalse']==true and flag==0:
                worksheet[id].content['ifelse']['Statement_Execute']=1
                flag=1
                worksheet[parentStatement].content['ifelse']['Statement_Order'][a]['Execute']=1
            else:
                worksheet[id].content['ifelse']['Statement_Execute']=0
                worksheet[parentStatement].content['ifelse']['Statement_Order'][a]['Execute']=0
        else:
            if worksheet[id].content['ifelse']['Statement_Type']=="else" and flag==0:
                worksheet[id].content['ifelse']['Statement_Execute']=1
                worksheet[parentStatement].content['ifelse']['Statement_Order'][a]['Execute']=1
            else:
                worksheet[id].content['ifelse']['Statement_Execute']=0
                worksheet[parentStatement].content['ifelse']['Statement_Order'][a]['Execute']=0

    for a in range(0, len(worksheet[parentStatement].content['ifelse']['statement_Order']), 1):
        id=worksheet[parentStatement].content['ifelse']['Statement_Order'][a]['ID']
        worksheet[id].content['ifelse']['Statement_Order']=worksheet[parentStatement].content['ifelse']['Statement_Order']

"""
    This function is called whenever the user changes something about the loop. If checks for any errors that may occur during the running of the loop and sets the
	error flag if there is a problem.
	In the first step, each statement is tested depending on the values entered. If it meets those conditions, the truefalse item for the object is set to true.
	In the next section, the statement is recreated with the individual statements replaced with the resulting true or false.
	If (((flag==1)||(flag==2))||((flag==3)&&(flag!=5))) then becomes ... (((true)||(false))||(false)&&(false)). This is then solved and the result placed in the
	true false property for the IfElse Statement. 
"""

def checkWhileLoop(thisItem, worksheet, loopID):
    print('In check while loop function')


    # For each section of the statement block, set the true/false for the condition and numbers
    for a in range(0, len(worksheet[loopID].content['whileLoop']['statementBlock']), 1):
        for b in range(0, len(worksheet[loopID].content['whileLoop']['statementBlock'][a]), 1):


            # Set the items here to make the text more readable
            flag=worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagValue']
            dependent=worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentValue']
            condition=worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['conditionText']

            if condition=="==" and flag==dependent:
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=true
            elif condition=="==":
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=false
            

            if condition=="!=" and flag!=dependent:
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=true
            elif condition=="!=":
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=false


            if condition==">" and flag>dependent:
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=true
            elif condition==">":
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=false;
            

            if condition==">=" and flag>=dependent:
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=true
            elif condition==">=":
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=false
            

            if condition=="<" and flag<dependent:
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=true
            elif condition=="<":
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=false
            

            if condition=="<=" and flag<=dependent:
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=true
            elif condition=="<=":
                worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']=false




    for a in range(0, len(worksheet[loopID].content['whileLoop']['statementBlock']), 1):

        if a!=0:
            statementString=str(statementString)+str(worksheet[loopID].content['whileLoop']['statementBlock'][a][0]['blockOption'])
            tfString=str(tfString)+str(worksheet[loopID].content['whileLoop']['statementBlock'][a][0]['blockOption'])
            valueString=str(valueString)+str(worksheet[loopID].content['whileLoop']['statementBlock'][a][0]['blockOption'])

        statementString=str(statementString)+'('
        tfString=str(tfString)+'('
        valueString=str(valueString)+'('

        for b in range(0, len(worksheet[loopID].content['whileLoop']['statementBlock'][a]), 1):
            
            if b!=0:
                statementString=str(statementString)+str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['blockOption'])
                tfString=str(tfString)+str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['blockOption'])
                valueString=str(valueString)+str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['blockOption'])

            statementString=str(statementString)+'('
            tfString=str(tfString)+'('
            valueString=str(valueString)+'('

            temp1=worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['truefalse']
            tfString=str(tfString)+''+str(temp1)+'' 
            temp1=str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagText'])
            temp2=str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['conditionText'])
            temp3=str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentText'])
            statementString=str(statementstring)+''+str(temp1)+''+str(temp2)+''+str(temp3)
            temp1=str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagValue'])
            temp2=str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['conditionText'])
            temp3=str(worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentValue'])
            valueString=str(valueString)+''+str(temp1)+''+str(temp2)+''+str(temp3)

            statementString=str(statementString)+')'
            tfString=str(tfString)+')'
            valueString=str(valueString)+')'

        statementString=str(statementString)+')'
        tfString=str(tfString)+')'
        valueString=str(valueString)+')'

    worksheet[loopID].content['whileLoop']['Loop_String']=statementString
    worksheet[loopID].content['whileLoop']['Loop_TFString']=tfString
    worksheet[loopID].content['whileLoop']['Loop_ValueString']=valueString


    print('At the end of check loop')
    print('The statement string is '+worksheet[loopID].content['whileLoop']['Loop_String'])
    print('The truefalse string is '+worksheet[loopID].content['whileLoop']['Loop_TFString'])
    print('The value string is '+worksheet[loopID].content['whileLoop']['Loop_ValueString'])

    #worksheet[loopID].content['whileLoop']['Loop_truefalse']=eval(tfString.replace(/<div[^>]*>|<\/div>/g, ''));




def passForLoopParameters(thisItem, worksheet, loopID):

	print('In the pass for loop parameters function')


	sendLoop=getAttributes(worksheet[loopID])
	del(sendLoop['ownedEq'])

	worksheet[loopID].postMessage={	"messageType":"LoopParametersResult", 
	 				"ID":loopID, 
	 				"loopObject":sendLoop	}

	thisItem.postMessage={	"messageType":"LoopParametersResult", 
	 				"ID":loopID, 
	 				"loopObject":sendLoop	}	 				



def passIfElseParameters(thisItem, worksheet, loopID):

	print('In the pass if else parameters function')



	sendLoop=getAttributes(worksheet[loopID])
	del(sendLoop['ownedEq'])

	worksheet[loopID].postMessage={	"messageType":"IfElseParametersResult", 
	 				"ID":loopID, 
	 				"loopObject":sendLoop	}

	thisItem.postMessage={	"messageType":"IfElseParametersResult", 
	 				"ID":loopID, 
	 				"loopObject":sendLoop	}




def passWhileLoopParameters(thisItem, worksheet, loopID):

	print('In the pass while loop parameters function')


	sendLoop=getAttributes(worksheet[loopID])
	del(sendLoop['ownedEq'])

	worksheet[loopID].postMessage={	"messageType":"WhileLoopParametersResult", 
	 				"ID":loopID, 
	 				"loopObject":sendLoop	}

	thisItem.postMessage={	"messageType":"WhileLoopParametersResult", 
	 				"ID":loopID, 
	 				"loopObject":sendLoop	}


"""
	This function populates an array for each loop or if else statement. The array holds the equations, loops and statements embedded within the structure. During		\
	the DoStructures algorithm, it is this array that the code steps through, executing each item in order. To create this array, this algorithm appends each item		\
	in the loop or structure's children object to the array and appends the position of that item to a mirrored array. Once all the items have been added, a simple		\
	bubble sort algorithm is used to ensure that they are in order.	
"""



def populateItems(thisItem, worksheet, loopID):

	print('In the populate items function')


	type=worksheet[loopID].content['type']

	worksheet[loopID].content[type]['loopPerform']=[]
	worksheet[loopID].content[type]['loopPos']=[]

	for index, item in enumerate(worksheet):

		#print("------ Looking at "+str(item)+"-"+str(worksheet[item].component_type_id)+"------")

		if worksheet[item].component_type_id == "3": worksheet[item].component_type_id=3
		if worksheet[item].component_type_id == "6": worksheet[item].component_type_id=6
		if worksheet[item].component_type_id == "7": worksheet[item].component_type_id=7
		if worksheet[item].component_type_id == "8": worksheet[item].component_type_id=8

		if worksheet[item].component_type_id == 6 or worksheet[item].component_type_id == 7 or worksheet[item].component_type_id == 8:
			if worksheet[item].parentid==loopID:
				worksheet[loopID].content[type].loopPerform.append(item)
				worksheet[loopID].content[type].loopPos.append(worksheet[item].order)
		elif worksheet[item].component_type_id==3:
			print("The parent id for the equation is - "+str(worksheet[item].Page_parentid)+" - "+str(loopID))
			if worksheet[item].Page_parentid==loopID: 
				print("Adding "+str(item))
				worksheet[loopID].content[type]['loopPerform'].append(item) 	
				worksheet[loopID].content[type]['loopPos'].append(worksheet[item].order)


		swapped=True
		while swapped:
			swapped = False
			for a in range(0, len(worksheet[loopID].content[type]['loopPos'])-1, 1):
				if worksheet[loopID].content[type]['loopPos'][i] > worksheet[loopID].content[type]['loopPos'][i+1]:
					temp = worksheet[loopID].content[type]['loopPos'][i]
					worksheet[loopID].content[type]['loopPos'][i] = worksheet[loopID].content[type]['loopPos'][i+1]
					worksheet[loopID].content[type]['loopPos'][i+1] = temp
					temp = worksheet[loopID].content[type]['loopPerform'][i]
					worksheet[loopID].content[type]['loopPerform'][i] = worksheet[loopID].content[type]['loopPerform'][i+1]
					worksheet[loopID].content[type]['loopPerform'][i+1] = temp
					swapped = True



"""
	This is the first function called when a loop is updated and solved. It sets all the equation solutions back to zero. It then looks to see if a previous version
	of the matrix exists. If it does, then the current matrix is set to retaining the values of the previous loop update. 
"""

def prepLoopEquations(thisItem, worksheet, loopID):

	print('In the prep loop equations function')

	type=thisItem.content['type']


	if worksheet[loopID].content[type]['firstRun']==1:

		worksheet[loopID].content[type]['Loop_countervalue']=0																		        

		for index, item in enumerate(worksheet):

			print(str(item)+" - "+str(worksheet[item].component_type_id))

			if worksheet[item].component_type_id=="3": worksheet[item].component_type_id=3
			if worksheet[item].component_type_id=="6": worksheet[item].component_type_id=6
			if worksheet[item].component_type_id=="7": worksheet[item].component_type_id=7
			if worksheet[item].component_type_id=="8": worksheet[item].component_type_id=8
	
			if worksheet[item].component_type_id==6:
				worksheet[item].content['forLoop']['firstRun']=0

			if worksheet[item].component_type_id==7:
				worksheet[item].content['whileLoop']['firstRun']=0

			if worksheet[item].component_type_id==3:

				worksheet[item].fullMat=np.array([[]])
				
				worksheet[item].popEq(worksheet[item], worksheet[item].newEquation)

				worksheet[item].name=worksheet[item].Format_name
				thisEq=worksheet[item].matchClosestEquation(worksheet[item], worksheet, worksheet[item].name, worksheet[thisItem.id].order, worksheet[item].Format_id, 0, 0)

				try:
					worksheet[thisEq]
					item.fullMat=copy.deepcopy(worksheet[thisEq]['fullMat'])
					item.numinds=copy.deepcopy(worksheet[thisEq]['numinds'])
					item.Format_size=copy.deepcopy(worksheet[thisEq]['Format_size']) 
					item.Units_units=copy.deepcopy(worksheet[thisEq]['Units_units'])
					item.size=copy.deepcopy(worksheet[thisEq]['size']) 
					item.units=copy.deepcopy(worksheet[thisEq]['units'])
					item.basearray=copy.deepcopy(worksheet[thisEq]['basearray'])
					item.equation=copy.deepcopy(worksheet[thisEq]['newEquation'])
					item.fileid=copy.deepcopy(worksheet[thisEq]['fileid'])

				except:
					print()

	worksheet[loopID].content[type]['firstRun']=0
	if worksheet[loopID].component_type_id==6 or worksheet[loopID].component_type_id=="6":
		if worksheet[loopID].content[type]['limitfactor']=="&lt;": worksheet[loopID].content[type]['limitfactor']="<"
		if worksheet[loopID].content[type]['limitfactor']=="&gt;": worksheet[loopID].content[type]['limitfactor']=">"
		if worksheet[loopID].content[type]['limitfactor']=="&lt=;": worksheet[loopID].content[type]['limitfactor']="<="
		if worksheet[loopID].content[type]['limitfactor']=="&gt=;": worksheet[loopID].content[type]['limitfactor']=">="



"""

	This is the first function called when a loop is updated and solved. It sets all the equation solutions back to zero. It then looks to see if a previous version
	of the matrix exists. If it does, then the current matrix is set to retaining the values of the previous loop update.
"""

def prepStatementEquations(thisItem, worksheet, loopID):
	print('In prep statement equations function')

	for a in range(0, len(worksheet[loopID].content['ifelse']['statement_Order']), 1):
		stID=worksheet[loopID].content['ifelse']['Statement_Order'][a]

		for index, item in enumerate(worksheet[stID]['children']):
			if worksheet[item].type=="equation":
				eqObj={	"Page_position":worksheet[eqID].order, 
	    				"Page_parentid":worksheet[eqID].parentid, 
						"Page_topparentid":worksheet[eqID].topparentid,
						"equation":worksheet[eqID].equation, 
						"id":item }

				newID=thisItem.createEq(thisItem, worksheet, worksheet[loopID].fileid, 1, eqObj)																			       


"""
    This function sets the items to active or inactive for if/else statements. To do this, the code simply looks at whether the statement execute flag is set.
"""
def setActive(thisItem, worksheet, structID):
	print('In set active function')

	for a in range(0, len(worksheet[loopID].content['ifelse']['Statement_Order']), 1):

		thisID=worksheet[structID].content['ifelse']['Statement_Order'][a]['ID']

		if worksheet[thisID].content['ifelse']['Statement_Execute']==1:

			worksheet[thisID].content['ifelse']['active']=1

			for index, item in enumerate(worksheet):

				if worksheet[item].component_type_id==6 or worksheet[item].component_type_id==7 or worksheet[item].component_type_id==8:

					if worksheet[item].content['parentid']==structID:
						worksheet[item].content['active']=1

		else:

			worksheet[thisID].content['ifelse']['active']=0

			for index, item in enumerate(worksheet):

				if worksheet[item].component_type_id==6 or worksheet[item].component_type_id==7 or worksheet[item].component_type_id==8:

					if worksheet[item].content['parentid']==structID:
						worksheet[item].content['active']=0


def setLoopParameters(thisItem, worksheet, loopID, id1, id2, id3):
	
	print('In the set loop parameters function')

	# Set the parameter values from the "equation" results
	worksheet[loopID].content['forLoop']['start']=np.float_(np.real(worksheet[id1].fullMat[[0][0]]))
	worksheet[loopID].content['forLoop']['stop']=np.float_(np.real(worksheet[id2].fullMat[[0][0]]))
	worksheet[loopID].content['forLoop']['increment']=np.float_(np.real(worksheet[id3].fullMat[[0][0]]))
	

	print('The start, stop, and increment are '+str(worksheet[loopID].content['forLoop']['start'])+' - '+str(worksheet[loopID].content['forLoop']['stop'])+' - '+str(worksheet[loopID].content['forLoop']['increment']))

	# Set up the start, stop, and increment to make things easier
	start=np.int_(np.around(np.float(worksheet[loopID].content['forLoop']['start']), decimals=1))
	stop=np.int_(np.around(np.float(worksheet[loopID].content['forLoop']['stop']), decimals=1))
	increment=np.int_(np.around(np.float(worksheet[loopID].content['forLoop']['increment']), decimals=1))


	print('The start, stop, and increment are '+str(start)+' - '+str(stop)+' - '+str(increment))

	# Calculate the number of steps to be taken
	if worksheet[loopID].content['forLoop']['limitfactor']=="<=":	
		worksheet[loopID].content['forLoop']['numsteps']=np.rint(np.floor((stop-start)/increment))
		if stop<start or increment<0: 
			worksheet[loopID].content['forLoop']['numsteps']=0


	if worksheet[loopID].content['forLoop']['limitfactor']=="<":
		worksheet[loopID].content['forLoop']['numsteps']=np.rint(np.floor((stop-(start-increment/2))/increment))
		if stop<start or increment<0: 
			worksheet[loopID].content['forLoop']['numsteps']=0


	if worksheet[loopID].content['forLoop']['limitfactor']==">=":
		worksheet[loopID].content['forLoop']['numsteps']=np.rint(np.floor(start-stop)/(-1*increment))
		if start<stop or increment>0: 
			worksheet[loopID].content['forLoop']['numsteps']=0


	if worksheet[loopID].content['forLoop']['limitfactor']==">":
		worksheet[loopID].content['forLoop']['numsteps']=np.rint(np.floor((start-(stop-increment/2))/(-1*increment)))
		if start<stop or increment>0: 
			worksheet[loopID].content['forLoop']['numsteps']=0



	# No negative number of steps
	if worksheet[loopID].content['forLoop']['numsteps']<0:
		worksheet[loopID].content['forLoop']['numsteps']=0


	# Must be at least 1 step
	if worksheet[loopID].content['forLoop']['numsteps']==0:
		thisItem.set_Error(loopID, "ForLoop1")


	worksheet[loopID].Dependents={};
	print('The start, stop, increment, and numsteps are '+str(start)+'-'+str(stop)+'-'+str(increment)+'-'+str(worksheet[loopID].content['forLoop']['numsteps']))	


	for index, item in enumerate(worksheet[id1].Dependents):
		worksheet[loopID].Dependents[item]=1

	for index, item in enumerate(worksheet[id2].Dependents):
		worksheet[loopID].Dependents[item]=1


	for index, item in enumerate(worksheet[id3].Dependents):
		worksheet[loopID].Dependents[item]=1



"""
	This function is passed an id for an if/else statement. It then looks at the object that holds the text for the conditions and solves each of those equations.
	This happens each time that one of those parameters is changed on the DOM when this function is called from the main program. It also happens each time through
	the loop so that the algorithm can check to see the state of the conditions to check whether the loop should continue or not.
"""

def solveIfElseParameters(thisItem, worksheet, loopID):
	print('In the solve if else parameters function')


	worksheet[loopID].content['ifelse']['Dependents']={}


	for a in range(0, len(worksheet[loopID].content['ifelse']['statementBlock']), 1):
		for b in range(0, len(worksheet[loopID].content['ifelse']['statementBlock'][a]), 1):

			# Test to see if the flag text is numeric
			tempRe=re.match('^\d+$', worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagText'])


			# If the flag text is indeed numeric, set the flag value
			if tempRe != None:
				worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagValue']=worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagText']

			# If it is not numeric, solve the value
			else:
				eqObj={	"Page_position":worksheet[loopID].order, 
						"Format_showtype":"InnerFunction", 
						"equation":"FlagEq="+worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagText'],
						"Page_parentid":loopID, 
						"Page_topparentid":loopID	} 


				id=worksheet[thisItem.id].ownedEq.createEq(worksheet[loopID].ownedEq, worksheet, worksheet[loopID].fileid, 1, eqObj)

				for k in range(0, len(worksheet[id].Dependents), 1):
					worksheet[loopID].content['ifelse']['Dependents'][k]=1

				worksheet[loopID].content['ifelse']['statementBlock'][a][b]['flagValue']=str(np.float_(np.real(worksheet[id].fullMat[[0][0]])))
				del(worksheet[id])




			# Test to see if the flag text is numeric
			tempRe=re.match('^\d+$', worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentText'])


			# If the dependent text is indeed numeric, set the dependent value
			if tempRe != None:							    
				worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentValue']=worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentText']



			# If it is not numeric, solve the value
			else:
				if firstRun==1:
					eqObj={	"Page_position":loopPos,
							"Original_id":loopID,
							"Format_showtype":"InnerFunction",
							"equation":"DepEq="+worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentText']	}

				else:
					eqObj={	"Page_position":loopPos, 
							"equation":"DepEq="+worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentText']	}

				id=thisItem.createEq(thisItem, worksheet, worksheet[loopID].fileid, 1, eqObj)																			       

				for k in range(0, len(worksheet[id]['Dependents']), 1):
					worksheet[loopID].content['ifelse']['Dependents'][k]=1

				worksheet[loopID].content['ifelse']['statementBlock'][a][b]['dependentValue']=str(np.float_(np.real(worksheet[id].fullMat[[0][0]])))
				del(worksheet[id])

	thisItem.passIfElseParameters(thisItem, worksheet, loopID)



"""
	This function looks at a for loop and solves the three parameters for that loop - the start number, the stop number, and the increment number.	
"""
def solveLoopParameters(thisItem, worksheet, loopID):
	
	print('In the solve loop parameters function')

	eqObj={	"Page_position":worksheet[loopID].order, 
			"Page_parentid":worksheet[loopID].parentid, 
			"Page_topparentid":worksheet[loopID].topparentid,
			"Format_showtype":"InnerFunction", 
			"equation":"myeq="+worksheet[loopID].content['forLoop']['startText'] }
	
	id1=worksheet[thisItem.id].ownedEq.createEq(worksheet[thisItem.id].ownedEq, worksheet, worksheet[thisItem.id].fileid, 1, eqObj)
	
	eqObj={	"Page_position":worksheet[loopID].order, 
			"Page_parentid":worksheet[loopID].parentid,
			"Page_topparentid":worksheet[loopID].topparentid,
			"Format_showtype":"InnerFunction", 
			"equation":"myeq="+worksheet[loopID].content['forLoop']['stopText'] }
	
	id2=worksheet[thisItem.id].ownedEq.createEq(worksheet[thisItem.id].ownedEq, worksheet, worksheet[thisItem.id].fileid, 1, eqObj)
	
	eqObj={	"Page_position":worksheet[loopID].order, 
			"Page_parentid":worksheet[loopID].parentid, 
			"Page_topparentid":worksheet[loopID].topparentid,
			"Format_showtype":"InnerFunction", 
			"equation":"myeq="+worksheet[loopID].content['forLoop']['incrementText'] }

	id3=worksheet[thisItem.id].ownedEq.createEq(worksheet[thisItem.id].ownedEq, worksheet, worksheet[thisItem.id].fileid, 1, eqObj)
	
	thisItem.setLoopParameters(thisItem, worksheet, loopID, id1, id2, id3)
	thisItem.passForLoopParameters(thisItem, worksheet, loopID)




"""
	This function is passed an id for a while loop. It then looks at the object that holds the text for the == or != conditions and solves each of those equations.
	This happens each time that one of those parameters is changed on the DOM when this function is called from the main program. It also happens each time through
	the loop so that the algorithm can check to see the state of the conditions to check whether the loop should continue or not.

"""

def solveWhileLoopParameters(thisItem, worksheet, loopID, firstRun):
	print('In solve while loop parameters function')

	worksheet[loopID].content['whileLoop']['Dependents']={}
	
	# If this is the first time through the loop, set the position at the loop position and if not, set it at the last position
	if firstRun==1:
		loopPos=worksheet[loopID].order
		print("1 I set the loopPos to "+str(loopPos))
	else:
		loopPos=worksheet[loopID].Page_lastposition
		print("2 I set the loopPos to "+str(loopPos))


	for a in range(0, len(worksheet[loopID].content['whileLoop']['statementBlock']), 1):
		for b in range(0, len(worksheet[loopID].content['whileLoop']['statementBlock'][a]), 1):

			# Test to see if the flag text is numeric
			tempRe=re.match('^\d+$', worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagText'])


			# If the flag text is indeed numeric, set the flag value
			if tempRe != None:
				worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagValue']=worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagText']

			# If it is not numeric, solve the value
			else:
				if firstRun==1:
					eqObj={	"Page_position":loopPos, 
							"Format_showtype":"InnerFunction", 
							"equation":"FlagEq="+worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagText'],
							"Page_parentid":loopID, 
							"Page_topparentid":loopID	}

					print("I am sending the loopPos as "+str(loopPos)) 

				else:
					eqObj={	"Page_position":worksheet[loopID]['Page_lastposition'], 
							"Format_showtype":"InnerFunction",
							"equation":"FlagEq="+worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagText'], 
							"Page_parentid":loopID, 
							"Page_topparentid":loopID }

					print("I am sending the lastposition as "+str(worksheet[loopID]['Page_lastposition'])) 



				id=worksheet[thisItem.id].ownedEq.createEq(worksheet[thisItem.id].ownedEq, worksheet, worksheet[thisItem.id].fileid, 1, eqObj)

				for k in range(0, len(worksheet[id].Dependents), 1):
					worksheet[loopID].content['whileLoop']['Dependents'][k]=1

				worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['flagValue']=str(np.float_(np.real(worksheet[id].fullMat[[0][0]])))
				del(worksheet[id])




			# Test to see if the flag text is numeric
			tempRe=re.match('^\d+$', worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentText'])


			# If the dependent text is indeed numeric, set the dependent value
			if tempRe != None:							    
				worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentValue']=worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentText']



			# If it is not numeric, solve the value
			else:
				if firstRun==1:
					eqObj={	"Page_position":loopPos,
							"Original_id":loopID,
							"Format_showtype":"InnerFunction",
							"equation":"DepEq="+worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentText']	}

				else:
					eqObj={	"Page_position":loopPos, 
							"equation":"DepEq="+worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentText']	}

				id=thisItem.createEq(thisItem, worksheet, worksheet[loopID].fileid, 1, eqObj)																			       

				for k in range(0, len(worksheet[id]['Dependents']), 1):
					worksheet[loopID].content['whileLoop']['Dependents'][k]=1

				worksheet[loopID].content['whileLoop']['statementBlock'][a][b]['dependentValue']=str(np.float_(np.real(worksheet[id].fullMat[[0][0]])))
				del(worksheet[id])

	thisItem.passWhileLoopParameters(thisItem, worksheet, loopID)





# Declare the global variables
global cadwolfConstants
global cadwolfScaleUnits
global cadwolfParseUnits
global cadwolfCadParts
global cadwolfImportedFunctions
global cadwolfUnitList
global cadwolfNumTest
global cadwolfFunctions
global cadwolfEventType





"""
# Import the sample json data from the associated file
with open('eqPassData.json') as json_data:
	eqData = json.load(json_data)

	# Set the global variables equal to those sent
	cadwolfConstants=eqData['Constants']
	cadwolfScaleUnits=eqData['scaleUnits']
	cadwolfParseUnits=eqData['parseUnits']
	cadwolfCadParts=eqData['cadParts']
	cadwolfImportedFunctions=eqData['importedFunctions']
	cadwolfUnitList=['A', 'K', 's', 'm', 'kg', 'cd', 'mol', 'rad']
	cadwolfNumTest=re.compile('^[-+]?[0-9]+[\.]?([0-9]+)?$')
	cadwolfFunctions=Functions

"""





# Declare the Equation class with the variables and with the methods
class Equation:



	def __getitem__(self, items):
		print(type(items), items)

	def __setitem__(self, key, item):
	        self.key = item


	# Initialization function that sets variables and methods
	def __init__(self, id, eqName, fileID, eqObj):
		self.Format_id=id
		self.itemid=id
		self.Original_id=id
		if eqName:
			self.Format_name=eqName 
		else:
			self.Format_name="TempEq"
		self.order=0
		self.component_type_id=3
		if eqName:
			self.newEquation=str(eqName)+"=1"
		else:
			self.newEquation="TempEq=1"
		self.Format_equation=''
		self.equation=''
		self.Format_showequation=''
		self.Format_showsolution=''
		self.Format_equationinuse=''
		self.Format_right=''
		self.Format_left=''
		self.Format_size='1x1'
		self.Format_numinds=''
		self.Format_type=1
		self.Format_haschanged=1
		self.Format_showtype="top"
		self.Format_showvalue="default"
		self.Format_showcomponent=''
		self.Format_editinuse=1
		self.Solving=1;
		self.Solution_convsol=''
		self.Solution_real=np.array([[]])
		self.Solution_imag=np.array([[]])
		self.fullMat=np.array([[]])
		self.Solution_input_array=[]
		self.Solution_inputs=[]
		self.Solution_variable_array=[]
		self.Solution_key_array=[]
		self.Solution_unit_array=[]
		self.Solution_object_array=[]
		self.Solution_temps=[]
		self.Solution_PostFix=[]
		self.Solution_Post_Units=[]
		self.Solution_realdefault=0
		self.Solution_imagdefault=0
		self.Solution_Inputs={}
		self.Page_parentid='none'
		self.Page_topparentid='none'
		self.Page_position=0
		self.Units_units=''
		self.Units_showunits=''
		self.Units_conv_units=''
		self.Units_unit_array={}
		self.Units_conv_array={}
		self.Units_scaled_array={}
		self.Units_power_array={}
		self.Units_base_array={ 'A':0, 'K':0, 's':0, 'm':0, 'kg':0, 'cd':0, 'mol':0, 'rad':0 }
		self.Units_base_string='00000000'
		self.Units_multiplier=1
		self.Units_quantity=''
		self.Models_numerical=''
		self.Models_units=''
		self.Models_dimensions=''
		self.Models_quantities=''
		self.Errors_flag=0
		self.Errors_errors={}
		self.FaF={}
		self.fileid=fileID
		self.connected_ids={}
		self.content={}
		self.content['type']="equation"
		self.content['active']=1
		self.postMessage={}

		self.popEq 				= populateEquation
		self.getVariables		= getVariables
		self.getID 				= getID
		self.setError			= setError
		self.returnEquation 	= returnEquation
		self.splitText 			= splitText
		self.checkString 		= checkString
		self.recombineUnits 	= recombineUnits
		self.parseInputs 		= parseInputs
		self.inputObject 		= inputObject
		self.replaceInputs 		= replaceInputs
		self.flagBuiltInEqs 	= flagBuiltInEquations
		self.removeBuiltInEqs 	= removeBuiltInEquations
		self.removeSubEquations	= removeSubEquations
		self.inputArray 		= inputArray
		self.removeFAFs			= removeFAFs
		self.solveFAFs 			= solveFAFs
		self.solveFAFItems 		= solveFAFItems
		self.returnFAF 			= returnFAF
		self.matchClosestEquation= matchClosestEquation
		self.replaceVariables 	= replaceVariables
		self.replaceCAD 		= replaceCAD
		self.replaceConstants 	= replaceConstants
		self.replaceMatrixPieces= replaceMatrixPieces
		self.replaceVectors 	= replaceVectors
		self.replaceMatrices 	= replaceMatrices
		self.replaceNumbers 	= replaceNumbers
		self.replaceTables 		= replaceTables
		self.setWorksheet 		= setWorksheet
		self.createEq 			= createEq
		self.checkImaginary 	= checkImaginary
		self.checkNegatives 	= checkNegatives
		self.checkEquation 		= checkEquation
		self.showArray 			= showArray
		self.unitArray 			= unitArray
		self.scaleUnits 		= scaleUnits
		self.decomposeUnits 	= decomposeUnits
		self.getBaseString 		= getBaseString
		self.convertToPostFix 	= convertToPostFix
		self.thisOperatorPrecedence = thisOperatorPrecedence
		self.solvePostFix 		= solvePostFix
		self.solveMath 			= solveMath
		self.addSubNumbers 		= addSubNumbers
		self.multDivNumbers 	= multDivNumbers
		self.multMatrices 		= multMatrices
		self.addSubMatrices 	= addSubMatrices
		self.inputToArray 		= inputToArray
		self.checkInputs 		= checkInputs
		self.combineRealImag 	= combineRealImag
		self.arrayToTuple 		= arrayToTuple
		self.arrayToIntTuple 	= arrayToIntTuple
		self.inputToNumToString = inputToNumToString
		self.recomposeUnits 	= recomposeUnits
		self.formatFractions 	= formatFractions
		self.matrixSubcomp 		= matrixSubcomp
		self.getSize 			= getSize
		self.showEquation 		= showEquation
		self.showSolution 		= showSolution
		self.showFraction 		= showFraction
		self.models 			= models
		self.equationCleanup 	= equationCleanup
		self.objectToNumpy 		= objectToNumpy
		self.getNumpySize 		= getNumpySize
		self.scalarOperation	= scalarOperation




		def __setitem__(self, key, item):
			self.key = item

		flag=0

		for objProp in eqObj:
			if objProp=="order": self.order=eqObj[objProp]
			if objProp=="real":
				self.Solution_real=eqObj[objProp]
				flag=1
			if objProp=="imag":
				self.Solution_imag=eqObj[objProp]
				flag=1
			if objProp=="units": self.Units_units=eqObj[objProp]
			if objProp=="equation": self.equation=eqObj[objProp]
			if objProp=="equation": self.Format_equation=eqObj[objProp]
			if objProp=="newEquation": self.newEquation=eqObj[objProp]
			if objProp=="size": self.Format_size=eqObj[objProp]
			if objProp=="Format_numinds": self.Format_numinds=eqObj[objProp]
			if objProp=="parentid": self.Page_parentid=eqObj[objProp]
			if objProp=="topparentid": self.Page_topparentid=eqObj[objProp]
			if objProp=="Page_parentid": self.Page_parentid=eqObj[objProp]
			if objProp=="Page_topparentid": self.Page_topparentid=eqObj[objProp]
			if objProp=="basearray": self.Units_base_array=eqObj[objProp]
			if objProp=="Units_base_array": self.Units_base_array=eqObj[objProp]
			if objProp=="Solution_variable_array": self.Solution_variable_array=eqObj[objProp]

		if flag==1:
			self.fullMat=self.objectToNumpy(eqObj['real'], eqObj['imag'])

		self.Format_size=self.getNumpySize(self.fullMat)




	# The function that actually solves the equation
	def solveEq(self, thisEquation, cadwolf_worksheet, eventType):
		print('In solveEq function with '+str(thisEquation)+' and it is a '+str(self.Format_showtype)+' on '+str(self.Format_id))
		

		# Get the file number
		re1=re.compile("^File")
		thisFile=re1.sub('', self.Format_id)
		re2=re.compile("^[0-9]+")
		thisFile=re2.match(thisFile)
		thisFileID=thisFile.group(0)

		# Set the overall worksheet and clear the dependents of this item
		cadwolf_worksheet[self.Format_id].Dependents={}
		#self.setWorksheet(self, cadwolf_worksheet, inspect, Equation)
		
		id=self.Format_id;
		
		# If no equation is sent, use the stored one for this equation
		if thisEquation!="undefined":
			self.popEq(self, thisEquation)
		else:
			self.popEq(self, self.Format_equation)

		# If there are no errors, solve the equation
		if self.Errors_flag==0:
			self.getVariables(self)
			if self.Errors_flag==0: self.checkString(self)
			if self.Errors_flag==0: self.recombineUnits(self)
			if self.Errors_flag==0: self.parseInputs(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.replaceInputs(self)
			if self.Errors_flag==0: self.flagBuiltInEqs(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.removeBuiltInEqs(self, 0, cadwolf_worksheet)
			if self.Errors_flag==0: self.removeSubEquations(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.removeFAFs(self, cadwolf_worksheet) 
			if self.Errors_flag==0: self.replaceVariables(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.replaceCAD(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.replaceConstants(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.replaceMatrixPieces(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.replaceVectors(self, cadwolf_worksheet, re)
			if self.Errors_flag==0: self.replaceMatrices(self, cadwolf_worksheet, re)
			if self.Errors_flag==0: self.replaceNumbers(self, cadwolf_worksheet, re)
			if self.Errors_flag==0: self.replaceTables(self, cadwolf_worksheet, re)
			if self.Errors_flag==0: self.checkImaginary(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.checkNegatives(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.checkEquation(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.unitArray(self, cadwolf_worksheet, re)
			if self.Errors_flag==0: self.scaleUnits(self, cadwolf_worksheet, re)
			if self.Errors_flag==0: self.decomposeUnits(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.getBaseString(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.convertToPostFix(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.solvePostFix(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.recomposeUnits(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.formatFractions(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.matrixSubcomp(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.showEquation(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.getSize(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.showSolution(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.models(self, cadwolf_worksheet)
			if self.Errors_flag==0: self.equationCleanup(self, cadwolf_worksheet)
			self.returnEquation(self, cadwolf_worksheet, eventType)
















# Declare the for loop item
class ForLoop: 

	def __getitem__(self, items):
		print(type(items), items)

	def __setitem__(self, key, item):
	        self.key = item

	# Initialization function that sets variables and methods
	def __init__(self, loopObj, cadwolf_worksheet):
		print("The loop obj is ...")
		print(str(loopObj))
		self.Name=''
		self.fileid=loopObj['fileid']
		self.inputFile=''
		self.inputID=''
		try:
			loopObj['itemid']
			self.itemid=loopObj['itemid']
			self.Format_id=loopObj['itemid']
			self.id=loopObj['itemid']
		except:
			try:
				loopObj['ID']
				self.itemid=loopObj['ID']
				self.Format_id=loopObj['ID']
				self.id=loopObj['ID']
			except:
				print()

		try:
			loopObj['order']
			self.location=loopObj['order']
			self.order=loopObj['order']
			self.Page_position=loopObj['order']
		except:		
			self.location=0
			self.order=0
			self.Page_position=0

		self.topparentid='none'
		self.parentid='none'
		self.Page_lastposition=0
		self.component_type_id=6
		self.Errors_flag=0
		self.Errors_errors={}
		self.content={}
		self.content['forLoop']={}
		self.content['forLoop']['counter']='a'
		self.content['forLoop']['Loop_counterValue']=0
		self.content['forLoop']['valueid']=''
		self.content['forLoop']['startText']='0'
		self.content['forLoop']['start']=0
		self.content['forLoop']['stopText']='1'
		self.content['forLoop']['stop']=1
		self.content['forLoop']['increment']=1
		self.content['forLoop']['incrementText']='1'
		self.content['forLoop']['numSteps']=1
		self.content['forLoop']['status']=0
		self.content['forLoop']['Format_haschanged']=1
		self.content['forLoop']['firstRun']=0
		self.content['forLoop']['limitfactor']='<'
		self.content['forLoop']['Errors_flag']=0
		self.content['forLoop']['Errors_errors']=[]
		self.content['forLoop']['loopPerform']=[]
		self.content['forLoop']['loopPos']=0
		self.content['type']='forLoop'
		self.content['active']=1
		self.postMessage={}
		try:
			loopObj['content']['forloop']
		except:
			loopObj['content']['forloop']=loopObj['content']['forLoop']

		try:
			loopObj['Page_lastposition']
			self.Page_lastposition=loopObj['Page_lastposition']
		except:
			test=1

		try:
			loopObj['content']['parentid']
			self.parentid=loopObj['content']['parentid']
		except:
			test=1

		try:
			loopObj['content']['topparentid']
			self.topparentid=loopObj['content']['topparentid']
		except:
			test=1

		for objProp in loopObj['content']['forloop']:
			if objProp=="stopText": self.content['forLoop']['stopText']=loopObj['content']['forloop'][objProp]
			if objProp=="stop": self.content['forLoop']['stop']=loopObj['content']['forloop'][objProp]
			if objProp=="startText": self.content['forLoop']['startText']=loopObj['content']['forloop'][objProp]
			if objProp=="start": self.content['forLoop']['start']=loopObj['content']['forloop'][objProp]
			if objProp=="incrementText": self.content['forLoop']['incrementText']=loopObj['content']['forloop'][objProp]
			if objProp=="increment": self.content['forLoop']['increment']=loopObj['content']['forloop'][objProp]
			if objProp=="limitFactor": self.content['forLoop']['limitfactor']=loopObj['content']['forloop'][objProp]
			if objProp=="counter": self.content['forLoop']['counter']=loopObj['content']['forloop'][objProp]
			if objProp=="parentid": self.Page_parentid=loopObj['content']['forloop'][objProp]
			if objProp=="topparentid": self.Page_topparentid=loopObj['content']['forloop'][objProp]
			if objProp=="Page_parentid": self.Page_parentid=loopObj['content']['forloop'][objProp]
			if objProp=="Page_topparentid": self.Page_topparentid=loopObj['content']['forloop'][objProp]


		self.getID 					= getID
		self.createEq 				= createEq
		self.prepLoopEquations 		= prepLoopEquations
		self.populateItems 			= populateItems
		self.solveLoopParameters 	= solveLoopParameters
		self.setLoopParameters 		= setLoopParameters
		self.passForLoopParameters 	= passForLoopParameters

		id=self.getID("Equation", loopObj['fileid'], cadwolf_worksheet)
		self.ownedEq = Equation(id, "ownedEq", loopObj['fileid'], {})

		def __getitem__(self, items):
			print(type(items), items)
















# Declare the while loop item
class WhileLoop: 

	def __getitem__(self, items):
		print(type(items), items)

	def __setitem__(self, key, item):
	        self.key = item


	# Initialization function that sets variables and methods
	def __init__(self, loopObj, cadwolf_worksheet):

		self.Name=''
		self.fileid=loopObj['fileid']
		try:
			loopObj['itemid']
			self.itemid=loopObj['itemid']
			self.Format_id=loopObj['itemid']
			self.id=loopObj['itemid']
		except:
			try:
				loopObj['ID']
				self.itemid=loopObj['ID']
				self.Format_id=loopObj['ID']
				self.id=loopObj['ID']
			except:
				print()

		try:
			loopObj['order']
			self.location=loopObj['order']
			self.order=loopObj['order']
			self.Page_position=loopObj['order']
			self.Page_lastposition=loopObj['order']
		except:		
			self.location=0
			self.order=0
			self.Page_position=0
			self.Page_lastposition=0


		self.component_type_id=7
		self.topparentid='none'
		self.parentid='none'
		self.Errors_flag=0
		self.Errors_errors={}
		self.content={}
		self.content['whileLoop']={} 
		self.content['whileLoop']['Page_position']=0
		self.content['whileLoop']['Loop_status']=''
		self.content['whileLoop']['Loop_numSteps']=''
		self.content['whileLoop']['Loop_stepLimit']=100
		self.content['whileLoop']['Loop_countervalue']=0
		self.content['whileLoop']['firstRun']='1'
		self.content['whileLoop']['LoopString']=''
		self.content['whileLoop']['LoopTFString']=''
		self.content['whileLoop']['LoopValuesString']='' 
		self.content['whileLoop']['LoopPerform']=[]
		self.content['whileLoop']['Errors_flag']=0
		self.content['whileLoop']['Errors_errors']=[]
		self.content['whileLoop']['Dependents']={}
		self.content['whileLoop']['loopValues']={}
		self.content['whileLoop']['statementBlock']={}
		self.content['whileLoop']['loopPerform']=[]
		self.content['type']='whileLoop'
		self.content['active']=1
		self.content['whileLoop']['Errors_flag']=0
		self.content['whileLoop']['Errors_errors']=[]
		self.postMessage={}

		try:
			loopObj['content']['whileloop']
		except:
			loopObj['content']['whileloop']=loopObj['content']['whileLoop']

		for objProp in loopObj['content']['whileloop']:
			if objProp=="order": self.order=loopObj['content']['whileloop'][objProp]
			if objProp=="location": self.order=loopObj['content']['whileloop'][objProp]
			if objProp=="stopText": self.content['whileLoop']['stopText']=loopObj['content']['whileloop'][objProp]
			if objProp=="stop": self.content['whileLoop']['stop']=loopObj['content']['whileloop'][objProp]
			if objProp=="startText": self.content['whileLoop']['startText']=loopObj['content']['whileloop'][objProp]
			if objProp=="start": self.content['whileLoop']['start']=loopObj['content']['whileloop'][objProp]
			if objProp=="incrementText": self.content['whileLoop']['incrementText']=loopObj['content']['whileloop'][objProp]
			if objProp=="increment": self.content['whileLoop']['increment']=loopObj['content']['whileloop'][objProp]
			if objProp=="limitFactor": self.content['whileLoop']['limitfactor']=loopObj['content']['whileloop'][objProp]
			if objProp=="counter": self.content['whileLoop']['counter']=loopObj['content']['whileloop'][objProp]
			if objProp=="parentid": self.Page_parentid=loopObj['content']['whileloop'][objProp]
			if objProp=="topparentid": self.Page_topparentid=loopObj['content']['whileloop'][objProp]
			if objProp=="Page_parentid": self.Page_parentid=loopObj['content']['whileloop'][objProp]
			if objProp=="Page_topparentid": self.Page_topparentid=loopObj['content']['whileloop'][objProp]
			if objProp=="statementBlock": self.content['whileLoop']['statementBlock']=loopObj['content']['whileloop'][objProp]
			if objProp=="Page_lastposition": self.Page_lastposition=loopObj['content']['whileloop'][objProp]

		# Example : While flag!=1 would be recorded as while flag condition dependent


		self.getID 						= getID
		self.createEq 					= createEq
		self.prepLoopEquations 			= prepLoopEquations
		self.populateItems 				= populateItems
		self.solveWhileLoopParameters 	= solveWhileLoopParameters
		self.checkWhileLoop 			= checkWhileLoop
		self.passWhileLoopParameters 	= passWhileLoopParameters


		id=self.getID("Equation", loopObj['fileid'], cadwolf_worksheet)
		self.ownedEq = Equation(id, "ownedEq", loopObj['fileid'], {})

		def __getitem__(self, items):
			print(type(items), items)












# Declare the if else item
class IfElse: 

	def __getitem__(self, items):
		print(type(items), items)

	def __setitem__(self, key, item):
	        self.key = item


	# Initialization function that sets variables and methods
	def __init__(self, loopObj, cadwolf_worksheet):

		self.fileid=loopObj['fileid']
		try:
			loopObj['itemid']
			self.itemid=loopObj['itemid']
			self.Format_id=loopObj['itemid']
			self.id=loopObj['itemid']
		except:
			try:
				loopObj['ID']
				self.itemid=loopObj['ID']
				self.Format_id=loopObj['ID']
				self.id=loopObj['ID']
			except:
				print()

		try:
			loopObj['order']
			self.location=loopObj['order']
			self.order=loopObj['order']
			self.Page_position=loopObj['order']
			self.Page_lastposition=loopObj['order']
		except:		
			self.location=0
			self.order=0
			self.Page_position=0
			self.Page_lastposition=0

		self.component_type_id=8
		self.topparentid='none'
		self.parentid='none'
		self.Errors_flag=0
		self.Errors_errors={}
		self.content={}
		self.content['ifelse']={}
		self.content['ifelse']['Statement_Type']="if"
		self.content['ifelse']['Statement_String']=''
		self.content['ifelse']['Statement_TFString']=''
		try:
			loopObj['itemid']
			self.content['ifelse']['StatementID']=loopObj['itemid']
			self.content['ifelse']['Statement_Parent']=loopObj['itemid'];
		except:
			try:
				loopObj['ID']
				self.content['ifelse']['StatementID']=loopObj['ID']
				self.content['ifelse']['Statement_Parent']=loopObj['ID'];
			except:
				print()

		self.content['ifelse']['Statement_ValueString']=''
		self.content['ifelse']['Statement_truefalse']=False
		self.content['ifelse']['Statement_Execute']='0'
		self.content['ifelse']['Statement_Order']=[]
		self.content['ifelse']['Errors_errors']=[]
		self.content['ifelse']['Errors_flag']=0
		self.content['ifelse']['Statement_Values']={}
		self.content['ifelse']['statementBlock']={}
		self.content['ifelse']['firstRun']=1 
		self.content['ifelse']['loopPerform']=[]
		self.content['type']='ifelse'			# Type as in versus for loop or while loop or equation, etc																															    
		self.content['ifelse']['type'] = 'if'  # Type as in if, ifelse, or else
		self.content['active']=1
		self.content['ifelse']['Errors_flag']=0
		self.content['ifelse']['Errors_errors']=[]
		self.postMessage={}

		try:
			loopObj['content']['ifelse']
		except:
			loopObj['content']['ifelse']=loopObj['content']['ifElse']

		for objProp in loopObj['content']['ifelse']:
			if objProp=="order": self.order=loopObj['content']['ifelse'][objProp]
			if objProp=="location": self.order=loopObj['content']['ifelse'][objProp]
			if objProp=="stopText": self.content['ifelse']['stopText']=loopObj['content']['ifelse'][objProp]
			if objProp=="stop": self.content['ifelse']['stop']=loopObj['content']['ifelse'][objProp]
			if objProp=="startText": self.content['ifelse']['startText']=loopObj['content']['ifelse'][objProp]
			if objProp=="start": self.content['ifelse']['start']=loopObj['content']['ifelse'][objProp]
			if objProp=="incrementText": self.content['ifelse']['incrementText']=loopObj['content']['ifelse'][objProp]
			if objProp=="increment": self.content['ifelse']['increment']=loopObj['content']['ifelse'][objProp]
			if objProp=="limitFactor": self.content['ifelse']['limitfactor']=loopObj['content']['ifelse'][objProp]
			if objProp=="counter": self.content['ifelse']['counter']=loopObj['content']['ifelse'][objProp]
			if objProp=="parentid": self.Page_parentid=loopObj['content']['ifelse'][objProp]
			if objProp=="topparentid": self.Page_topparentid=loopObj['content']['ifelse'][objProp]
			if objProp=="Page_parentid": self.Page_parentid=loopObj['content']['ifelse'][objProp]
			if objProp=="Page_topparentid": self.Page_topparentid=loopObj['content']['ifelse'][objProp]
			if objProp=="statementBlock": self.content['ifelse']['statementBlock']=loopObj['content']['ifelse'][objProp]
			if objProp=="Page_lastposition": self.Page_lastposition=loopObj['content']['ifelse'][objProp]

		# Example : While flag!=1 would be recorded as while flag condition dependent


		self.getID 					= getID
		self.createEq 				= createEq
		self.prepLoopEquations 		= prepLoopEquations
		self.populateItems 			= populateItems
		self.checkStatement 		= checkStatement
		self.prepStatementEquations = prepStatementEquations
		self.solveIfElseParameters  = solveIfElseParameters
		self.passIfElseParameters 	= passIfElseParameters


		id=self.getID("Equation", loopObj['fileid'], cadwolf_worksheet)
		self.ownedEq = Equation(id, "ownedEq", loopObj['fileid'], {})


		def __getitem__(self, items):
			print(type(items), items)





















# Declare the plot item
class Plot: 

	def __getitem__(self, items):
		print(type(items), items)

	def __setitem__(self, key, item):
	        self.key = item


	# Initialization function that sets variables and methods
	def __init__(self, plotObj):

		self.fileid=plotObj['fileID']
		try:
			plotObj['itemid']
			self.itemid=plotObj['itemid']
			self.Format_id=plotObj['itemid']
			self.id=plotObj['itemid']
		except:
			try:
				plotObj['ID']
				self.itemid=plotObj['ID']
				self.Format_id=plotObj['ID']
				self.id=plotObj['ID']
			except:
				print()

		try:
			plotObj['order']
			self.location=plotObj['order']
			self.order=plotObj['order']
			self.Page_position=plotObj['order']
			self.Page_lastposition=plotObj['order']
		except:		
			self.location=0
			self.order=0
			self.Page_position=0
			self.Page_lastposition=0

		self.component_type_id=9
		self.topparentid='none'
		self.parentid='none'
		self.Errors_flag=0
		self.Errors_errors={}
		self.Dependents={}
		self.content={}
		self.content['plot']={}
		self.content['plot']['Chart_type']="line" 
		self.content['plot']['Chart_width']="825px" 
		self.content['plot']['Chart_height']="500px" 
		self.content['plot']['tempChartWidth']="825px" 
		self.content['plot']['tempChartHeight']="500px" 
		self.content['plot']['Chart_marginright']=10 
		self.content['plot']['Chart_marginleft']=75 
		self.content['plot']['Chart_marginbottom']=65 
		self.content['plot']['Chart_margintop']=60 
		self.content['plot']['Chart_Name']='Chart_'+str(self.itemid) 
		self.content['plot']['Chart_Labels']=[] 
		self.content['plot']['Chart_stack']= "none"
		self.content['plot']['Title_onoff']=1 
		self.content['plot']['Title_text']='Chart Title' 
		self.content['plot']['Title_xoffset']=0 
		self.content['plot']['Title_yoffset']=0 
		self.content['plot']['Subtitle_onoff']=1 
		self.content['plot']['Subtitle_text']='Chart Subtitle' 
		self.content['plot']['Subtitle_xoffset']=0 
		self.content['plot']['Subtitle_yoffset']=0 
		self.content['plot']['Legend_onoff']=True
		self.content['plot']['Legend_layout']="horizontal"
		self.content['plot']['Legend_floating']=1
		self.content['plot']['Legend_xoffset']=0
		self.content['plot']['Legend_yoffset']=0
		self.content['plot']['Legend_width']=0
		self.content['plot']['Legend_align']="center"
		self.content['plot']['Legend_verticalalign']="bottom"
		self.content['plot']['Legend_rtl']=False
		self.content['plot']['Legend_marginRight']=0
		self.content['plot']['Legend_marginLeft']=0
		self.content['plot']['Legend_marginBottom']=0
		self.content['plot']['Legend_marginTop']=0
		self.content['plot']['Chart_dataobj']={}
		self.content['plot']['Chart_yaxesobj']={}
		self.content['plot']['Chart_xaxesobj']={}
		self.content['plot']['Chart_bandsobj']={} 
		self.content['plot']['Chart_linesobj']={}
		self.content['plot']['Chart_textobj']={} 
		self.postMessage={}

		for objProp in plotObj:
			if objProp=="Chart_marginleft": self.content['plot']['Chart_marginleft']=plotObj[objProp]
			if objProp=="Chart_marginright": self.content['plot']['Chart_marginright']=plotObj[objProp]
			if objProp=="Chart_margintop": self.content['plot']['Chart_margintop']=plotObj[objProp]
			if objProp=="Chart_marginbottom": self.content['plot']['Chart_marginbottom']=plotObj[objProp]
			if objProp=="Chart_Labels": self.content['plot']['Chart_Labels']=plotObj[objProp]
			if objProp=="Chart_stack": self.content['plot']['Chart_stack']=plotObj[objProp]
			if objProp=="Chart_type": self.content['plot']['Chart_type']=plotObj[objProp]
			if objProp=="Chart_width": self.content['plot']['Chart_width']=plotObj[objProp]
			if objProp=="Chart_height": self.content['plot']['Chart_height']=plotObj[objProp]

			if objProp=="tempChartWidth": self.content['plot']['tempChartWidth']=plotObj[objProp]
			if objProp=="tempChartHeight": self.content['plot']['tempChartHeight']=plotObj[objProp]

			if objProp=="Title_onoff": self.content['plot']['Title_onoff']=plotObj[objProp]
			if objProp=="Title_text": self.content['plot']['Title_text']=plotObj[objProp]
			if objProp=="Title_xoffset": self.content['plot']['Title_xoffset']=plotObj[objProp]
			if objProp=="Title_yoffset": self.content['plot']['Title_yoffset']=plotObj[objProp]

			if objProp=="Subtitle_onoff": self.content['plot']['Subtitle_onoff']=plotObj[objProp]
			if objProp=="Subtitle_text": self.content['plot']['Subtitle_text']=plotObj[objProp]
			if objProp=="Subtitle_xoffset": self.content['plot']['Subtitle_xoffset']=plotObj[objProp]
			if objProp=="Subtitle_yoffset": self.content['plot']['Subtitle_yoffset']=plotObj[objProp]

			if objProp=="Legend_onoff": self.content['plot']['Legend_onoff']=plotObj[objProp]
			if objProp=="Legend_layout": self.content['plot']['Legend_layout']=plotObj[objProp]
			if objProp=="Legend_floating": self.content['plot']['Legend_floating']=plotObj[objProp]
			if objProp=="Legend_xoffset": self.content['plot']['Legend_xoffset']=plotObj[objProp]
			if objProp=="Legend_yoffset": self.content['plot']['Legend_yoffset']=plotObj[objProp]
			if objProp=="Legend_width": self.content['plot']['Legend_width']=plotObj[objProp]
			if objProp=="Legend_align": self.content['plot']['Legend_align']=plotObj[objProp]
			if objProp=="Legend_verticalalign": self.content['plot']['Legend_verticalalign']=plotObj[objProp]
			if objProp=="Legend_rtl": self.content['plot']['Legend_rtl']=plotObj[objProp]
			if objProp=="Legend_marginRight": self.content['plot']['Legend_marginRight']=plotObj[objProp]
			if objProp=="Legend_marginLeft": self.content['plot']['Legend_marginLeft']=plotObj[objProp]
			if objProp=="Legend_marginBottom": self.content['plot']['Legend_marginBottom']=plotObj[objProp]
			if objProp=="Legend_marginTop": self.content['plot']['Legend_marginTop']=plotObj[objProp]

			if objProp=="Chart_dataobj": self.content['plot']['Chart_dataobj']=plotObj[objProp]
			if objProp=="Chart_yaxesobj": self.content['plot']['Chart_yaxesobj']=plotObj[objProp]
			if objProp=="Chart_xaxesobj": self.content['plot']['Chart_xaxesobj']=plotObj[objProp]
			if objProp=="Chart_bandsobj": self.content['plot']['Chart_bandsobj']=plotObj[objProp]
			if objProp=="Chart_linesobj": self.content['plot']['Chart_linesobj']=plotObj[objProp]
			if objProp=="Chart_textobj": self.content['plot']['Chart_textobj']=plotObj[objProp]


		self.prepPlotData= prepPlotData
		self.passPlotData= passPlotData


		def __getitem__(self, items):
			print(type(items), items)
















# Declare the Table class with the variables and with the methods
class Table:

	def __getitem__(self, items):
		print(type(items), items)

	def __setitem__(self, key, item):
	        self.key = item


	# Initialization function that sets variables and methods
	def __init__(self, id, fileID, eqObj):
		self.Format_id=id
		self.itemid=id
		self.Original_id=id
		self.Format_name="TempEq"
		self.order=0
		self.component_type_id=5
		self.Page_parentid='none'
		self.Page_topparentid='none'
		self.Page_position=0
		self.fileid=fileID
		self.connected_ids={}
		self.content={}
		self.content['type']="table"
		self.content['active']=1
		self.content['data']={}
		self.content['caption']="Table Caption"
		self.content['captionEdit']=False
		self.content['captionOn']=True
		self.content['rowLabels']=True
		self.content['colLabels']=True
		self.content['tableHeaders']=True
		self.content['borderWidth']=1
		self.content['tableAlign']="center"
		self.postMessage={}

		self.postMessage={}

		def __setitem__(self, key, item):
			self.key = item

		for objProp in eqObj:
			if objProp=="order": self.order=eqObj[objProp]
			if objProp=="caption": self.content['caption']=eqObj[objProp]
			if objProp=="captionEdit": self.content['captionEdit']=eqObj[objProp]
			if objProp=="captionOn": self.content['captionOn']=eqObj[objProp]
			if objProp=="rowLabels": self.content['rowLabels']=eqObj[objProp]
			if objProp=="colLabels": self.content['colLabels']=eqObj[objProp]
			if objProp=="tableHeaders": self.content['tableHeaders']=eqObj[objProp]
			if objProp=="borderWidth": self.content['borderWidth']=eqObj[objProp]
			if objProp=="tableAlign": self.content['tableAlign']=eqObj[objProp]
			if objProp=="data": self.content['data']=eqObj[objProp]









# Declare the surface item
class Surface: 

	def __getitem__(self, items):
		print(type(items), items)

	def __setitem__(self, key, item):
	        self.key = item


	# Initialization function that sets variables and methods
	def __init__(self, id, surfaceObj):

		self.fileid=''
		try:
			surfaceObj['itemid']
			self.itemid=surfaceObj['itemid']
			self.Format_id=surfaceObj['itemid']
			self.id=surfaceObj['itemid']
			self.name=surfaceObj['itemid']
		except:
			print()

		try:
			surfaceObj['order']
			self.location=surfaceObj['order']
			self.order=surfaceObj['order']
			self.Page_position=surfaceObj['order']
			self.Page_lastposition=surfaceObj['order']
		except:		
			self.location=0
			self.order=0
			self.Page_position=0
			self.Page_lastposition=0

		self.component_type_id=13
		self.topparentid='none'
		self.parentid='none'
		self.Errors_flag=0
		self.Errors_errors={}
		self.Dependents={}
		self.content={}
		self.content['surface']={}
		self.postMessage={}

		self.prepPlotData= prepPlotData
		self.passPlotData= passPlotData


		def __getitem__(self, items):
			print(type(items), items)







"""
	Now that we have set up the items for equations, loops, and statements, we look at the
	type of item being solved and call the required functions. The item being solved are 
	simple equation solutions, solving the parameters of a loop or structure, or running
	the equations in a structure, or solving a plot.
"""












"""
	This is the primary function of this code, which is to solve an equation. It can be
	called directly to solve an equation or it can be called from one of the other functions
	to solve a parameter or other things.
"""
def taskEquationSolver(eqData):

	print('In the task equation solver')
	cadwolf_worksheet=eqData['eqObj']

	tempEq = Equation(eqData['eqID'], "x", eqData['FileID'], {})
	tempEq.order=eqData['order']
	tempEq.newEquation=eqData['Equation']
	eqData['eqObj'][eqData['eqID']]=tempEq
	tempEq.setWorksheet(tempEq, cadwolf_worksheet, 0, Equation)
	tempEq.solveEq(eqData['Equation'], eqData['eqObj'], 'SolveEquation')
	print("Solution is "+str(tempEq.Solution_real))
	print(str(tempEq.Solution_imag))
	print(str(tempEq.Units_units))
	return tempEq


"""
	This code solves the start, stop, and increment parameters of a loop or a statement. It calls
	the equation solver algorithm for each aspect of the structure and stores the results.
"""
def taskParameterSolver(eqData):

	cadwolf_worksheet=eqData['eqObj']

	for index, item in enumerate(cadwolf_worksheet):

		if cadwolf_worksheet[item]['component_type_id']==6 or cadwolf_worksheet[item]['component_type_id']=="6":
			print("Making a for loop")
			cadwolf_worksheet[item]=ForLoop(cadwolf_worksheet[item], cadwolf_worksheet)

		elif cadwolf_worksheet[item]['component_type_id']==7 or cadwolf_worksheet[item]['component_type_id']=="7":
			print("Making a while loop")
			cadwolf_worksheet[item]=WhileLoop(cadwolf_worksheet[item], cadwolf_worksheet)
			print("The order is "+str(cadwolf_worksheet[item].Page_lastposition))

		elif cadwolf_worksheet[item]['component_type_id']==8 or cadwolf_worksheet[item]['component_type_id']=="8":
			print("Making a if else")
			cadwolf_worksheet[item]=IfElse(cadwolf_worksheet[item], cadwolf_worksheet)

		elif cadwolf_worksheet[item]['component_type_id']==3 or cadwolf_worksheet[item]['component_type_id']=="3":
			print("Making an equation")
			print(cadwolf_worksheet[item]['order'])
			cadwolf_worksheet[item]=Equation( cadwolf_worksheet[item]['Format_id'], cadwolf_worksheet[item]['name'], cadwolf_worksheet[item]['fileid'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order

		elif cadwolf_worksheet[item]['component_type_id']==5 or cadwolf_worksheet[item]['component_type_id']=="5":
			print("Making a table - "+str(item))
			cadwolf_worksheet[item]=Table( item, eqData['FileID'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order


	if eqData['cadwolfType']=="SolveLoopParameters":
		cadwolf_worksheet[eqData['eqID']].solveLoopParameters(cadwolf_worksheet[eqData['eqID']], cadwolf_worksheet, eqData['LoopID'])

	if eqData['cadwolfType']=="SolveWhileLoopParameters":
		cadwolf_worksheet[eqData['eqID']].solveWhileLoopParameters(cadwolf_worksheet[eqData['eqID']], cadwolf_worksheet, eqData['LoopID'], 1)

	if eqData['cadwolfType']=="SolveIfElseParameters":
		cadwolf_worksheet[eqData['eqID']].solveIfElseParameters(cadwolf_worksheet[eqData['eqID']], cadwolf_worksheet, eqData['LoopID'])


	print("The parameters  are ... ")
	print(str(cadwolf_worksheet[eqData['LoopID']].content))

	print("I am returning ... ")
	print(str(cadwolf_worksheet[eqData['LoopID']].postMessage))

	return cadwolf_worksheet[eqData['LoopID']]

"""
	This is the code that solves the plot data. 
"""
def taskPlotDataSolver(eqData):

	print('In the task plot data solver')


	cadwolf_worksheet=eqData['eqObj']

	for index, item in enumerate(cadwolf_worksheet):

		if cadwolf_worksheet[item]['component_type_id']==6 or cadwolf_worksheet[item]['component_type_id']=="6":
			print("Making a for loop")
			cadwolf_worksheet[item]=ForLoop(cadwolf_worksheet[item])

		elif cadwolf_worksheet[item]['component_type_id']==7 or cadwolf_worksheet[item]['component_type_id']=="7":
			print("Making a while loop")
			cadwolf_worksheet[item]=WhileLoop(cadwolf_worksheet[item])
			print("The order is "+str(cadwolf_worksheet[item].Page_lastposition))

		elif cadwolf_worksheet[item]['component_type_id']==8 or cadwolf_worksheet[item]['component_type_id']=="8":
			print("Making a if else")
			cadwolf_worksheet[item]=IfElse(cadwolf_worksheet[item])

		elif cadwolf_worksheet[item]['component_type_id']==3 or cadwolf_worksheet[item]['component_type_id']=="3":
			print("Making an equation")
			cadwolf_worksheet[item]=Equation( cadwolf_worksheet[item]['Format_id'], cadwolf_worksheet[item]['name'], cadwolf_worksheet[item]['fileid'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order

		elif cadwolf_worksheet[item]['component_type_id']==5 or cadwolf_worksheet[item]['component_type_id']=="5":
			print("Making a table - "+str(item))
			cadwolf_worksheet[item]=Table( item, eqData['FileID'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order


	cadwolf_worksheet[eqData['plotID']]=Plot(eqData['plotObject'])

	plotObject=eqData['plotObject']
	PlotID=eqData['plotID']
	DataID=eqData['dataID']
	className=eqData['className']
	FileID=eqData['FileID']
	plotLoc=eqData['Location']

	thisEqx=''
	thisEqy=''
	thisEqz=''
	thisEqc=''

	if className=="all":
		dataIndex=0
		for dataIndex in range(0, len(plotObject['Chart_dataobj']), 1):
			if plotObject['Chart_dataobj'][dataIndex]['Format_id']==DataID:
				thisEqx=plotObject['Chart_dataobj'][dataIndex]['xdata_name']
				thisEqy=plotObject['Chart_dataobj'][dataIndex]['ydata_name']
				thisEqz=plotObject['Chart_dataobj'][dataIndex]['zdata_name']
				thisEqc=plotObject['Chart_dataobj'][dataIndex]['cdata_name']

		if thisEqx!='' and thisEqy!='' and thisEqz!='' and thisEqc!='': 
			cadwolf_worksheet[PlotID].passPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, PlotID, DataID, className, plotObject) 


		if thisEqx!='': 
			eqObj={	"Page_position":plotLoc, 
					"equation":"PlotEq="+str(thisEqx) }
			plotTaskEqID=getID("Equation", FileID, cadwolf_worksheet)
			thisEq=Equation(plotTaskEqID , "PlotEq", FileID, eqObj )
			cadwolf_worksheet[plotTaskEqID]=thisEq
			eqID=thisEq.createEq(thisEq, cadwolf_worksheet, FileID, 1, eqObj)

			if thisEqy=='' and thisEqz=='':
				cadwolf_worksheet[eqID].solveEq("PlotEq="+thisEqx, cadwolf_worksheet, 'SolveEquation')
				cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, 'plot_xdatainput')
				cadwolf_worksheet[PlotID].passPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, PlotID, DataID, className, plotObject) 


			else:
				cadwolf_worksheet[eqID].solveEq("PlotEq="+thisEqx, cadwolf_worksheet, 'SolveEquation')
				cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, 'plot_xdatainput')



		if thisEqy!='':
			eqObj={	"Page_position":plotLoc, 
					"equation":"PlotEq="+str(thisEqy)	}
			plotTaskEqID=getID("Equation", FileID, cadwolf_worksheet)
			thisEq=Equation(plotTaskEqID , "PlotEq", FileID, eqObj )
			cadwolf_worksheet[plotTaskEqID]=thisEq
			eqID=thisEq.createEq(thisEq, cadwolf_worksheet, FileID, 1, eqObj)



			if thisEqz=='':
				cadwolf_worksheet[eqID].solveEq("PlotEq="+str(thisEqy), cadwolf_worksheet, 'SolveEquation')
				cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, 'plot_ydatainput')
				cadwolf_worksheet[PlotID].passPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, PlotID, DataID, className, plotObject) 

			else:
				cadwolf_worksheet[eqID].solveEq("PlotEq="+str(thisEqy), cadwolf_worksheet, 'SolveEquation')
				cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, 'plot_ydatainput')


		if thisEqz!='':
			eqObj={	"Page_position":plotLoc, 
					"equation":"PlotEq="+thisEqz	}
			plotTaskEqID=getID("Equation", FileID, cadwolf_worksheet)
			thisEq=Equation(plotTaskEqID , "PlotEq", FileID, eqObj )
			cadwolf_worksheet[plotTaskEqID]=thisEq
			eqID=thisEq.createEq(thisEq, cadwolf_worksheet, FileID, 1, eqObj)

			cadwolf_worksheet[eqID].solveEq("PlotEq="+str(thisEqz), cadwolf_worksheet, 'SolveEquation')
			cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, 'plot_zdatainput')
			cadwolf_worksheet[PlotID].passPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, PlotID, DataID, className, plotObject) 


		if thisEqc!='':
			eqObj={	"Page_position":plotLoc, 
					"equation":"PlotEq="+thisEqc	}
			plotTaskEqID=getID("Equation", FileID, cadwolf_worksheet)
			thisEq=Equation(plotTaskEqID , "PlotEq", FileID, eqObj )
			cadwolf_worksheet[plotTaskEqID]=thisEq
			eqID=thisEq.createEq(thisEq, cadwolf_worksheet, FileID, 1, eqObj)

			cadwolf_worksheet[eqID].solveEq("PlotEq="+str(thisEqc), cadwolf_worksheet, 'SolveEquation')
			cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, 'plot_cdatainput')
			cadwolf_worksheet[PlotID].passPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, PlotID, DataID, className, plotObject) 


	elif className=="Lathe":
		thisEq=plotObject['Chart_dataobj'][dataIndex]['curvetext'] 
		eqObj={	"Page_position":plotLoc, 
				"Format_showtype":"InnerFunction", 
				"equation":"PlotEq="+thisEq 	}
		plotTaskEqID=getID("Equation", FileID, cadwolf_worksheet)
		thisEq=Equation(plotTaskEqID , "PlotEq", FileID, eqObj )
		cadwolf_worksheet[plotTaskEqID]=thisEq
		eqID=thisEq.createEq(thisEq, cadwolf_worksheet, FileID, 1, eqObj)

		cadwolf_worksheet[eqID].solveEq("PlotEq="+thisEq, cadwolf_worksheet, 'SolveEquation')
		cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, className)
		cadwolf_worksheet[PlotID].passPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, PlotID, DataID, className, plotObject) 

	else:
		for thisData in range(0, len(plotObject['Chart_dataobj']), 1):
			if plotObject['Chart_dataobj'][thisData]['Format_id']==DataID:                          
				thisEq='';
				if className=="plot_xdatainput":thisEq=plotObject['Chart_dataobj'][thisData]['xdata_name']
				if className=="plot_ydatainput":thisEq=plotObject['Chart_dataobj'][thisData]['ydata_name']
				if className=="plot_zdatainput":thisEq=plotObject['Chart_dataobj'][thisData]['zdata_name']
				if className=="plot_cdatainput":thisEq=plotObject['Chart_dataobj'][thisData]['cdata_name']
				if className=="xLathe":thisEq=plotObject['Chart_dataobj'][thisData]['xdata_name']
				if className=="yLathe":thisEq=plotObject['Chart_dataobj'][thisData]['ydata_name']
				if thisEq=='':	thisEq="[0:1:"+len(plotObject['Chart_dataobj'][thisData]['PointData'])-1+"]"


		eqObj={	"Page_position":plotLoc,
        		"Format_showtype":"InnerFunction", 
        		"equation":"PlotEq="+str(thisEq) 	}
		plotTaskEqID=getID("Equation", FileID, cadwolf_worksheet)
		thisEq=Equation(plotTaskEqID , "PlotEq", FileID, eqObj )
		cadwolf_worksheet[plotTaskEqID]=thisEq
		eqID=thisEq.createEq(thisEq, cadwolf_worksheet, FileID, 1, eqObj)


		cadwolf_worksheet[eqID].solveEq("PlotEq="+thisEq, cadwolf_worksheet, 'SolveEquation')
		cadwolf_worksheet[PlotID].prepPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, eqID, plotObject, PlotID, DataID, className)
		cadwolf_worksheet[PlotID].passPlotData(cadwolf_worksheet[PlotID], cadwolf_worksheet, PlotID, DataID, className, plotObject) 


	return cadwolf_worksheet[PlotID]



"""
	These are the first two steps in taking an entry and prepraing it for a surface map. In the first function, an equation is created with the given text and solved
	for given the proper parameters. In the second function, the results are placed into the proper spot in the data object. Remember, only the data object is passed
	to this function and sent around and not the entire plot object. This was due to the original object containing DOM elements which made it unable to send.

	solveSurfaceData	-	This is the function called when the worker is first called from the main program. It asks as a steward and calls the remaining functions.
							The equation solver promise is initiated from this function and the remaining functions are called from the promise.
	setSurfaceData		-	This function sets x, y, or z data to the solution of the equation as well as the size and length.
	getSurfaceExtremes	-	This function looks at the mins and maxes for each axes for all datasets and sets the overall min and max for the chart	
	sendSurfaceData		-	This function just sends the data that was created back to the main program	

"""

def taskSurfaceDataSolver(eqData):

	print('In the solve surface data function')

	cadwolf_worksheet=eqData['eqObj']

	#tempEq = Equation("newEq", "x", 0, {})
	#tempEq.setWorksheet(tempEq, cadwolf_worksheet, 0, Equation)


	for index, item in enumerate(cadwolf_worksheet):

		if cadwolf_worksheet[item]['component_type_id']==6 or cadwolf_worksheet[item]['component_type_id']=="6":
			print("Making a for loop")
			cadwolf_worksheet[item]=ForLoop(cadwolf_worksheet[item])

		elif cadwolf_worksheet[item]['component_type_id']==7 or cadwolf_worksheet[item]['component_type_id']=="7":
			print("Making a while loop")
			cadwolf_worksheet[item]=WhileLoop(cadwolf_worksheet[item])

		elif cadwolf_worksheet[item]['component_type_id']==8 or cadwolf_worksheet[item]['component_type_id']=="8":
			print("Making a if else")
			cadwolf_worksheet[item]=IfElse(cadwolf_worksheet[item])

		elif cadwolf_worksheet[item]['component_type_id']==3 or cadwolf_worksheet[item]['component_type_id']=="3":
			print("Making an equation - "+str(cadwolf_worksheet[item]['name']))
			print(cadwolf_worksheet[item]['order'])
			cadwolf_worksheet[item]=Equation( cadwolf_worksheet[item]['Format_id'], cadwolf_worksheet[item]['name'], cadwolf_worksheet[item]['fileid'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order

		elif cadwolf_worksheet[item]['component_type_id']==5 or cadwolf_worksheet[item]['component_type_id']=="5":
			print("Making a table - "+str(item))
			cadwolf_worksheet[item]=Table( item, eqData['FileID'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order

		elif cadwolf_worksheet[item]['component_type_id']==13 or cadwolf_worksheet[item]['component_type_id']=="13":
			print("Making a surface - "+str(item))
			cadwolf_worksheet[item]=Surface(item, cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order


	# Find the data index
	dataIndex=0
	for dataInd in range(0, len(eqData['dataObject']), 1):
		if eqData['dataObject'][dataInd]['Format_id']==eqData['DataID']:
			dataIndex=dataInd


	# Set the equation to be solved
	if eqData['axis']=="X":
		equation=eqData['dataObject'][dataIndex]['xDataRaw']
	if eqData['axis']=="Y":
		equation=eqData['dataObject'][dataIndex]['yDataRaw']
	if eqData['axis']=="Z":
		equation=eqData['dataObject'][dataIndex]['zDataRaw']
	if eqData['axis']=="C":
		equation=eqData['dataObject'][dataIndex]['cDataRaw']


	# Solve the equation
	eqObj={	"Page_position":eqData['order'], 
			"Format_showtype":"InnerFunction", 
			"equation":"Temp="+equation }

	tempEq = Equation(eqData['eqID'], "x", eqData['FileID'], eqObj)
	id=tempEq.createEq(tempEq, cadwolf_worksheet, eqData['FileID'], 1, eqObj)																			       


	print('The eqobj is ')
	print(str(getAttributes(cadwolf_worksheet[id])))
	


	if eqData['type']=="surface" or eqData['type']=="pointCloud":
		setSurfaceData(cadwolf_worksheet[id], cadwolf_worksheet, eqData['PlotID'], eqData['DataID'], eqData['dataObject'], eqData['axis'], id)
		sendSurfaceData(cadwolf_worksheet[id], cadwolf_worksheet, eqData['PlotID'], eqData['dataObject'], eqData['type'], eqData['DataID'], {}, eqData['axis'])

	elif eqData['type']=="line":
		setSurfaceData(cadwolf_worksheet[id], cadwolf_worksheet, eqData['PlotID'], eqData['DataID'], eqData['dataObject'], eqData['axis'], id)
		sendSurfaceData(cadwolf_worksheet[id], cadwolf_worksheet, eqData['PlotID'], eqData['dataObject'], eqData['type'], eqData['DataID'], {}, eqData['axis'])

	elif eqData['type']=="lathe":
		setLatheData(cadwolf_worksheet[id], cadwolf_worksheet, eqData['PlotID'], eqData['DataID'], eqData['dataObject'], eqData['axis'], id)
		sendSurfaceData(cadwolf_worksheet[id], cadwolf_worksheet, eqData['PlotID'], eqData['dataObject'], "lathe", eqData['DataID'], {}, eqData['axis']) 


	return cadwolf_worksheet[id]


"""
	This is the code that actually runs and solves the for loops, while loops, and if/else
	statements. The code creates objects for each item sent as part of the worksheet and 
	then calls the actual do structure code to run the structure.
"""
def taskStructureSolver(eqData):

	cadwolf_worksheet=eqData['eqObj']

	#tempEq = Equation("newEq", "x", 0, {})
	#tempEq.setWorksheet(tempEq, cadwolf_worksheet, 0, Equation)


	for index, item in enumerate(cadwolf_worksheet):

		if cadwolf_worksheet[item]['component_type_id']==6 or cadwolf_worksheet[item]['component_type_id']=="6":
			print("Making a for loop")
			cadwolf_worksheet[item]=ForLoop(cadwolf_worksheet[item], cadwolf_worksheet)

		elif cadwolf_worksheet[item]['component_type_id']==7 or cadwolf_worksheet[item]['component_type_id']=="7":
			print("Making a while loop")
			cadwolf_worksheet[item]=WhileLoop(cadwolf_worksheet[item], cadwolf_worksheet)

		elif cadwolf_worksheet[item]['component_type_id']==8 or cadwolf_worksheet[item]['component_type_id']=="8":
			print("Making a if else")
			cadwolf_worksheet[item]=IfElse(cadwolf_worksheet[item], cadwolf_worksheet)

		elif cadwolf_worksheet[item]['component_type_id']==3 or cadwolf_worksheet[item]['component_type_id']=="3":
			print("Making an equation")
			cadwolf_worksheet[item]=Equation( cadwolf_worksheet[item]['Format_id'], cadwolf_worksheet[item]['name'], cadwolf_worksheet[item]['fileid'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order

		elif cadwolf_worksheet[item]['component_type_id']==5 or cadwolf_worksheet[item]['component_type_id']=="5":
			print("Making a table - "+str(item))
			cadwolf_worksheet[item]=Table( item, eqData['FileID'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order


	doStructure(cadwolf_worksheet[eqData['eqID']], cadwolf_worksheet, 0, 1) 

	returnItem=passStructure(eqData['eqID'], cadwolf_worksheet)

	print('In task, the item being returned is ...')
	print(returnItem)

	return returnItem
"""
	This is the code that solves for a table cell.
"""
def taskTableCellSolver(eqData):

	print('In the task table cell solver')
	cadwolf_worksheet=eqData['eqObj']

	print('The table ID, row, and column are '+str(eqData['tableID'])+' - '+str(eqData['tableRow'])+' - '+str(eqData['tableCol']))
	eqObj={	"Page_position":eqData['order'], 
			"equation":"myTableCell"+eqData['Equation'],
			"Format_showtype":"InnerFunction",
			"tableID":eqData['tableID'],
			"tableRow":eqData['tableRow'],
			"tableCol":eqData['tableCol'],
			"Format_name":"myTableCell" 	}
	tempEq = Equation(eqData['eqID'], "myTableCell", eqData['FileID'], eqObj)
	tempEq.order=eqData['order']
	tempEq.newEquation=eqData['Equation']
	eqData['eqObj'][eqData['eqID']]=tempEq
	tempEq.setWorksheet(tempEq, cadwolf_worksheet, 0, Equation)
	tempEq.solveEq("myTableCell"+eqData['Equation'], eqData['eqObj'], 'SolveEquation')
	tempEq.postMessage['messageType']="TableCellResult"
	print("Table Cell Solution is "+str(tempEq.Solution_real))
	print(str(tempEq.Solution_imag))
	print(str(tempEq.Units_units))
	return tempEq


"""
	This is the function that solves for all the cells that are being solved for when a table is filled left, right, up, or down. There are 8 inputs that help guide
	the function to its solution. Overall, the code is exactly what you would expect. That is, it simply solves one table cell and then moves on to the next cell and
    solves it until it reaches the end of the table. 
    The code has X parts : 
        1.  The first time through, the code creates an equation to use to solve the cell and it creates the variables needed 
        2.  Based upon the direction that the fill is moving, the code will change the cell indices in question to be the next one in the table. It also sets the
            indices of the previously solved table cell to the value of the solution from the previous solve. 
        3.  The equation from the original cell is simpy has the rows or columns increased or decreased depending on the direction and that equation is solved
        4. This is repeated until the number of rows or columns are exceeded

"""


def taskTableFillSolver(eqData):

	print('In the task table fill solver')

	cadwolf_worksheet=eqData['eqObj']

	for index, item in enumerate(cadwolf_worksheet):

		if cadwolf_worksheet[item]['component_type_id']==3 or cadwolf_worksheet[item]['component_type_id']=="3":
			print("Making an equation")
			print(cadwolf_worksheet[item]['order'])
			cadwolf_worksheet[item]=Equation( cadwolf_worksheet[item]['Format_id'], cadwolf_worksheet[item]['name'], cadwolf_worksheet[item]['fileid'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order

		if cadwolf_worksheet[item]['component_type_id']==5 or cadwolf_worksheet[item]['component_type_id']=="5":
			print("Making a table - "+str(item))
			cadwolf_worksheet[item]=Table( item, eqData['FileID'], cadwolf_worksheet[item] )
			cadwolf_worksheet[item].fileid=cadwolf_worksheet[item].fileid
			cadwolf_worksheet[item].Original_id=cadwolf_worksheet[item].Format_id
			cadwolf_worksheet[item].Page_position=cadwolf_worksheet[item].order


	id=getID("Equation", eqData['FileID'], cadwolf_worksheet)
	tempEq = Equation(id, "ownedEq", eqData['FileID'], {})
	setWorksheet(tempEq, cadwolf_worksheet, 0, Equation)

	solveTableFill({}, cadwolf_worksheet, eqData['FileID'], eqData['tableID'], eqData['order'], eqData['fillType'], eqData['tableRow'], eqData['tableCol'], eqData['numRows'], eqData['numCols'], 1, 'none')

	return cadwolf_worksheet[eqData['tableID']]










"""

	This is the function that is recursively called to pull an equation and then solve it recursively

"""

def solveTableFill(thisItem, worksheet, fileID, tableID, order, fillType, tableRow, tableCol, numRows, numCols, firstRun, thisID):

	
	# This first statement deals with setting the equation from the proper table cell
	if firstRun==1:

		# Create the equation that will be solved
		tableCells={}
		eqObj={	'Page_position':order, 
				'Format_showtype':"InnerFunction", 
				'Format_name':"myTableFill",
				'equation':"myTableFill=0"	}
		id=getID("Equation", fileID, worksheet)
		solveEq = Equation(id, "ownedEq", fileID, {})
		thisID=solveEq.createEq(solveEq, worksheet, fileID, 0, eqObj)
		print('The table ID is '+str(tableID)+' and the row and column are '+str(tableRow)+' - '+str(tableCol))
		print(str(worksheet[tableID].content))
		thisEquation=worksheet[tableID].content['data'][tableRow][tableCol]['equation']
		worksheet[thisID].equation="myTableFill"+str(thisEquation)
		worksheet[thisID].newEquation="myTableFill"+str(thisEquation)
		print('The equation for '+str(thisID)+' is '+str(worksheet[thisID].equation))
		print('The equation for '+str(thisID)+' is '+str(thisEquation))

	
	# If this is not the first time that the function is being called, then 
	else:
		print('-The equation for '+str(thisID)+' is '+str(worksheet[thisID].equation))
		worksheet[tableID].content['data'][tableRow][tableCol]['equation']=re.sub('^myTableFill', '', worksheet[thisID].equation)
		worksheet[tableID].content['data'][tableRow][tableCol]['real']=np.float_(np.real(worksheet[thisID].fullMat[[0][0]]))
		worksheet[tableID].content['data'][tableRow][tableCol]['imag']=np.float_(np.imag(worksheet[thisID].fullMat[[0][0]]))
		worksheet[tableID].content['data'][tableRow][tableCol]['units']=worksheet[thisID].Units_units
		thisEquation=worksheet[tableID].content['data'][tableRow][tableCol]['equation']
		tableMatch=re.search('\#File[0-9]+Table[0-9]+\.[A-Z]+\.[0-9]+', thisEquation)
		tableMatchNo=re.search('\#File[0-9]+Table[0-9]+\.[A-Z]+\.\$[0-9]+', thisEquation)


		print('The table match is '+str(tableMatch)+' - '+str(tableMatchNo)+' - '+str(thisEquation))

		if tableMatchNo!=None:
			for index in range(0, len(tableMatchNo), 1):
				tableMatch.append(tableMatchNo[index])
		tableMatchNo=re.search('\#File[0-9]+Table[0-9]+\.\$[A-Z]+\.[0-9+]', thisEquation)
		if tableMatchNo!=None:
			for index in range(0, len(tableMatchNo), 1):
				tableMatch.append(tableMatchNo[index])

		if fillType=="right": 	tableCol=tableCol+1
		if fillType=="left": 	tableCol=tableCol-1
		if fillType=="down": 	tableRow=tableRow+1
		if fillType=="up": 		tableRow=tableRow-1


	# The case where the user has opted to go left or right
	if fillType=="left" or fillType=="right":
		if (fillType=="left" and tableCol>=0) or (fillType=="right" and tableCol<numCols):
			if firstRun==0 and tableMatch is not None:

				for index, item in enumerate(re.findall('\#File[0-9]+Table[0-9]+\.[A-Z]+\.[0-9]+', thisEquation)):
					colNumArr=re.search('\.[A-Z]+\.[0-9]+$', item)
					if colNumArr!=None:
						colNum=re.sub('^\.', '', colNumArr[0])
						colNum=re.sub('\.[0-9]+$','', colNum)
						colNum=re.sub('\.\$[0-9]+$','', colNum)
						rowNum=re.sub('^\.[A-Z]+\.', '', colNumArr[0])
						rowNum=re.sub('^\.\$[A-Z]+\.','', rowNum)

						if fillType=="left":
							newIndex=chr(ord(colNum)-1)
						if fillType=="right":
							newIndex=chr(ord(colNum)+1)
						replacement=re.sub('\.[A-Z]+\.[0-9]+$','.'+str(newIndex)+'.'+str(rowNum), str(item))
						thisEquation=re.sub(item, replacement, thisEquation)

					
					colNumArr=re.search('\.[A-Z]+\.\$[0-9]+$', item)
					if colNumArr!=None:
						colNum=re.sub('^\.', '', colNumArr[0])
						colNum=re.sub('\.[0-9]+$','', colNum)
						colNum=re.sub('\.\$[0-9]+$','', colNum)
						rowNum=re.sub('^\.[A-Z]+\.', '', colNumArr[0])
						rowNum=re.sub('^\.\$[A-Z]+\.','', rowNum)
						if fillType=="left":
							newIndex=chr(ord(colNum)-1)
						if fillType=="right":
							newIndex=chr(ord(colNum)+1)
						replacement=re.sub('\.[A-Z]+\.\$[0-9]+$','.'+str(newIndex)+'.'+str(rowNum), str(item))
						thisEquation=re.sub(item, replacement, thisEquation)

			worksheet[tableID].content['data'][tableRow][tableCol]['equation']=thisEquation
			worksheet[tableID].content['data'][tableRow][tableCol]['needsUpdateFlag']=1
			worksheet[thisID].Format_right=thisEquation
			worksheet[thisID].equation="myTableFill"+str(thisEquation)
			worksheet[thisID].newEquation="myTableFill"+str(thisEquation)
			worksheet[thisID].solveEq("myTableFill"+str(thisEquation), worksheet, 'SolveEquation')
			solveTableFill(thisItem, worksheet, fileID, tableID, order, fillType, tableRow, tableCol, numRows, numCols, 0, thisID)

		else:
			worksheet[tableID].postMessage={	"messageType":"FullTable", 
												"tableID":tableID, 
												"tableData":worksheet[tableID].content['data'] }



	# The case where the user has opted to go left or right
	if fillType=="up" or fillType=="down":
		if (fillType=="down" and tableRow<numRows) or (fillType=="up" and tableRow>=0):
			if firstRun==0 and tableMatch is not None:
				for index, item in enumerate(re.findall('\#File[0-9]+Table[0-9]+\.[A-Z]+\.[0-9]+', thisEquation)):
					rowNumArr=re.search('\.[A-Z]+\.[0-9]+$', item)
					if rowNumArr!=None:
						rowNum=re.sub('^\.[A-Z]+\.', '', rowNumArr[0])
						rowNum=re.sub('\^\.\$[A-Z]+\.','', rowNum)
						colNum=re.sub('^\./,', '', colNumArr[0])
						colNum=re.sub('\.[0-9]+$','', colNum)
						colNum=re.sub('\.\$[0-9]+$','', colNum)
						if fillType=="up":
							newIndex=rowNum-1
						if fillType=="down":
							newIndex=rowNnum+1
						replacement=re.sub('\.[A-Z]+\.[0-9]+$','.'+colNum+'.'+newindex, item)
						thisEquation=re.sub(item, replacement, thisEquation)

					rowNumArr=re.search('\.$[A-Z]+\.\[0-9]+$', item)
					if colNumArr!=None:
						rowNum=re.sub('^\.[A-Z]\.', '', rowNumArr[0])
						rowNum=re.sub('\^\.\$[A-Z]\.','', rowNum)
						colNum=re.sub('^\./,', '', colNumArr[0])
						colNum=re.sub('\.[0-9]+$','', colNum)
						colNum=re.sub('\.\$[0-9]+$','', colNum)
						if fillType=="up":
							newIndex=rowNum-1
						if fillType=="down":
							newIndex=rowNum+1
						replacement=re.sub('\.[A-Z]+\.\$[0-9]+$','.$'+colNum+'.'+newIndex, item)
						thisEquation=re.sub(item, replacement, thisEquation)

			worksheet[tableID].content['data'][tableRow][tableCol]['equation']=thisEquation
			worksheet[tableID].content['data'][tableRow][tableCol]['needsUpdateFlag']=1
			worksheet[thisID].Format_right=thisEquation
			worksheet[thisID].equation="myTableFill"+str(thisEquation)
			worksheet[thisID].newEquation="myTableFill"+str(thisEquation)
			worksheet[thisID].solveEq("myTableFill"+str(thisEquation), worksheet, 'SolveEquation')
			solveTableFill(thisItem, worksheet, fileID, tableID, order, fillType, tableRow, tableCol, numRows, numCols, 0, thisID)

		else:
			worksheet[tableID].postMessage={	"messageType":"FullTable", 
												"tableID":tableID, 
												"tableData":worksheet[tableID].content['data'] }



"""
	This is the code that formats a solution to a new type

	As of the time that this written, I decided that it was better to keep this
	done in the browser. I may send it to the web worker or the python code in
	the future.
	
"""
def taskFormatSolution(eqData):

	print('In the task format solution')

	eqObj=eqData['eqObject']
	eqID=eqData['eqID']
	cadwolf_worksheet=eqData['eqObj']
	cadwolf_worksheet[eqID]=Equation(eqID, 'x', eqData['FileID'], eqObj)

	

	for index, objProp in enumerate(eqObj):
		worksheet[eqID][objProp]=eqObj[objProp]
		worksheet[eqID].showSolution(worksheet[eqID], cadwolf_worksheet)
		worksheet[eqID].passSolutionResults(eqID)

	print("Format Solution is "+str(tempEq.Solution_real))
	return worksheet[eqID]




















#!/usr/bin/env python
 
from http.server import BaseHTTPRequestHandler, HTTPServer
 
# HTTPRequestHandler class
class testHTTPServer_RequestHandler(BaseHTTPRequestHandler):


	def do_OPTIONS(self):
		self.send_response(200, "ok")
		self.send_header('Access-Control-Allow-Origin', '*')
		self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
		self.send_header("Access-Control-Allow-Headers", "X-Requested-With")


	# GET - Used by the site to verify that the server is running
	def do_GET(self):
		# Send response status code
		self.send_response(200)
 
		# Send headers
		self.send_header('Content-type','text/html')
		self.end_headers()
 
		# Send message back to client
		message = "CADWOLF Get Message"
		# Write content as utf-8 data
		self.wfile.write(bytes(message, "utf8"))
		return
 



	# GET - Used by the site to verify that the server is running
	def do_POST(self):


		content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
		postData = self.rfile.read(content_length)

		tempData = json.loads(postData)

		try:
			tempData['testMessage']
			# Send response status code
			self.send_response(200)

			# Send headers
			self.send_header('Content-type','text/html')
			self.send_header('Access-Control-Allow-Origin', '*')
			self.end_headers()

			# Send message back to client
			message = "CADWOLF Server is running"
			# Write content as utf-8 data
			self.wfile.write(bytes(str(message), "utf8"))
			return

		except:

			# Declare the global variables
			global cadwolfConstants
			global cadwolfScaleUnits
			global cadwolfParseUnits
			global cadwolfCadParts
			global cadwolfImportedFunctions
			global cadwolfUnitList
			global cadwolfNumTest
			global cadwolfFunctions
			global cadwolfEventType


			eqData = tempData['params']

			cadwolfConstants=eqData['Constants']
			cadwolfScaleUnits=eqData['scaleUnits']
			cadwolfParseUnits=eqData['parseUnits']
			cadwolfCadParts=eqData['cadParts']
			cadwolfImportedFunctions=eqData['importedFunctions']
			cadwolfUnitList=['A', 'K', 's', 'm', 'kg', 'cd', 'mol', 'rad']
			cadwolfNumTest=re.compile('^[-+]?[0-9]+[\.]?([0-9]+)?$')
			cadwolfFunctions=Functions


			cadwolfEventType=eqData['cadwolfType']

			if eqData['cadwolfType']=="SolveEquation":
				returnData=taskEquationSolver(eqData)

			if eqData['cadwolfType']=="SolveLoopParameters" or eqData['cadwolfType']=="SolveWhileLoopParameters" or eqData['cadwolfType']=="SolveIfElseParameters":
				returnData=taskParameterSolver(eqData)

			if eqData['cadwolfType']=="solvePlotData":
				returnData=taskPlotDataSolver(eqData)

			if eqData['cadwolfType']=="SolveStructure":
				returnData=taskStructureSolver(eqData)
				print('The data in the main code is ...')
				print(returnData.postMessage)

			if eqData['cadwolfType']=="SolveTableCell":
				returnData=taskTableCellSolver(eqData)

			if eqData['cadwolfType']=="SolveTableFill":
				returnData=taskTableFillSolver(eqData)

			if eqData['cadwolfType']=="FormatSolution":
				returnData=taskFormatSolution(eqData)

			if eqData['cadwolfType']=="SolveSurfaceData":
				returnData=taskSurfaceDataSolver(eqData)

			# Send response status code
			self.send_response(200)

			print('The return item is ...')
			print(returnData.postMessage)

			# Send headers
			self.send_header('Content-type','application/json')
			self.send_header('Access-Control-Allow-Origin', '*')
			self.end_headers()

			# Send message back to client
			message = "CADWOLF Post Message"
			# Write content as utf-8 data
			self.wfile.write(bytes(str(json.dumps(returnData.postMessage)), "utf8"))
			return




def run():
	print('Starting CADWOLF python server...')
 
	# Server settings
	# Choose port 8080, for port 80, which is normally used for a http server, you need root access
	server_address = ('127.0.0.1', 8081)
	httpd = HTTPServer(server_address, testHTTPServer_RequestHandler)
	print('The CADWOLF python equation server is now running. You should now be able to solve equations in the worksheet using python.')
	httpd.serve_forever()
 
 
run()






